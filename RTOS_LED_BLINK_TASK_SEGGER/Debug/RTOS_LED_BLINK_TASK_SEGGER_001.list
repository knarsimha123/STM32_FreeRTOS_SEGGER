
RTOS_LED_BLINK_TASK_SEGGER_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb0  08005cb0  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb8  08005cb8  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005cc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00013c10  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c24  20013c24  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dab  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b88  00000000  00000000  00019def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0001c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  0001db88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024052  00000000  00000000  0001e96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001486e  00000000  00000000  000429c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8064  00000000  00000000  0005722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f292  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b20  00000000  00000000  0013f2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bc  00000000  00000000  00143df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b2c 	.word	0x08005b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005b2c 	.word	0x08005b2c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e50 	.word	0x20012e50

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb97 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f86d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8d5 	bl	8000710 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000566:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <main+0xd0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2e      	ldr	r2, [pc, #184]	@ (8000624 <main+0xd0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000572:	f003 f9e9 	bl	8003948 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000576:	f004 fc7f 	bl	8004e78 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	4927      	ldr	r1, [pc, #156]	@ (8000628 <main+0xd4>)
 800058a:	4828      	ldr	r0, [pc, #160]	@ (800062c <main+0xd8>)
 800058c:	f001 fe8a 	bl	80022a4 <xTaskCreate>
 8000590:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

  status = xTaskCreate(led_red_handler, "LED_green_task", 200, NULL, 2, &task2_handle);
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	22c8      	movs	r2, #200	@ 0xc8
 80005be:	491a      	ldr	r1, [pc, #104]	@ (8000628 <main+0xd4>)
 80005c0:	481b      	ldr	r0, [pc, #108]	@ (8000630 <main+0xdc>)
 80005c2:	f001 fe6f 	bl	80022a4 <xTaskCreate>
 80005c6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d00b      	beq.n	80005e6 <main+0x92>
    __asm volatile
 80005ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d2:	f383 8811 	msr	BASEPRI, r3
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	617b      	str	r3, [r7, #20]
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	e7fd      	b.n	80005e2 <main+0x8e>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task3_handle);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	22c8      	movs	r2, #200	@ 0xc8
 80005f2:	4910      	ldr	r1, [pc, #64]	@ (8000634 <main+0xe0>)
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0xe4>)
 80005f6:	f001 fe55 	bl	80022a4 <xTaskCreate>
 80005fa:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00b      	beq.n	800061a <main+0xc6>
    __asm volatile
 8000602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	613b      	str	r3, [r7, #16]
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0xc2>

  vTaskStartScheduler();
 800061a:	f002 f807 	bl	800262c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	bf00      	nop
 8000620:	e7fd      	b.n	800061e <main+0xca>
 8000622:	bf00      	nop
 8000624:	e0001000 	.word	0xe0001000
 8000628:	08005b44 	.word	0x08005b44
 800062c:	080009cd 	.word	0x080009cd
 8000630:	080009f9 	.word	0x080009f9
 8000634:	08005b54 	.word	0x08005b54
 8000638:	08000a25 	.word	0x08000a25

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fa34 	bl	8005ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b0:	2332      	movs	r3, #50	@ 0x32
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fdfb 	bl	80012bc <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f9d2 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f85c 	bl	80017ac <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f9bb 	bl	8000a74 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4ba2      	ldr	r3, [pc, #648]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4aa1      	ldr	r2, [pc, #644]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b9f      	ldr	r3, [pc, #636]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b9b      	ldr	r3, [pc, #620]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a9a      	ldr	r2, [pc, #616]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b98      	ldr	r3, [pc, #608]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b94      	ldr	r3, [pc, #592]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a93      	ldr	r2, [pc, #588]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b91      	ldr	r3, [pc, #580]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b8d      	ldr	r3, [pc, #564]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a8c      	ldr	r2, [pc, #560]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b8a      	ldr	r3, [pc, #552]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b86      	ldr	r3, [pc, #536]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a85      	ldr	r2, [pc, #532]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b83      	ldr	r3, [pc, #524]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b7f      	ldr	r3, [pc, #508]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a7e      	ldr	r2, [pc, #504]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b7c      	ldr	r3, [pc, #496]	@ (80009b4 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	4879      	ldr	r0, [pc, #484]	@ (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d4:	f000 fd3e 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4877      	ldr	r0, [pc, #476]	@ (80009bc <MX_GPIO_Init+0x2ac>)
 80007de:	f000 fd39 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e2:	2200      	movs	r2, #0
 80007e4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007e8:	4875      	ldr	r0, [pc, #468]	@ (80009c0 <MX_GPIO_Init+0x2b0>)
 80007ea:	f000 fd33 	bl	8001254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ee:	2308      	movs	r3, #8
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	486c      	ldr	r0, [pc, #432]	@ (80009b8 <MX_GPIO_Init+0x2a8>)
 8000806:	f000 fb89 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4866      	ldr	r0, [pc, #408]	@ (80009bc <MX_GPIO_Init+0x2ac>)
 8000822:	f000 fb7b 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000836:	2305      	movs	r3, #5
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	485e      	ldr	r0, [pc, #376]	@ (80009bc <MX_GPIO_Init+0x2ac>)
 8000842:	f000 fb6b 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	485a      	ldr	r0, [pc, #360]	@ (80009c4 <MX_GPIO_Init+0x2b4>)
 800085c:	f000 fb5e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000860:	2310      	movs	r3, #16
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000870:	2306      	movs	r3, #6
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4852      	ldr	r0, [pc, #328]	@ (80009c4 <MX_GPIO_Init+0x2b4>)
 800087c:	f000 fb4e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000880:	23e0      	movs	r3, #224	@ 0xe0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000890:	2305      	movs	r3, #5
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	484a      	ldr	r0, [pc, #296]	@ (80009c4 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb3e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a0:	2304      	movs	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4845      	ldr	r0, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x2b8>)
 80008b4:	f000 fb32 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	@ (80009c8 <MX_GPIO_Init+0x2b8>)
 80008d6:	f000 fb21 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4833      	ldr	r0, [pc, #204]	@ (80009c0 <MX_GPIO_Init+0x2b0>)
 80008f4:	f000 fb12 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008f8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090a:	2306      	movs	r3, #6
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4829      	ldr	r0, [pc, #164]	@ (80009bc <MX_GPIO_Init+0x2ac>)
 8000916:	f000 fb01 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800091a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4825      	ldr	r0, [pc, #148]	@ (80009c4 <MX_GPIO_Init+0x2b4>)
 8000930:	f000 faf4 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000934:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000946:	230a      	movs	r3, #10
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <MX_GPIO_Init+0x2b4>)
 8000952:	f000 fae3 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <MX_GPIO_Init+0x2b0>)
 800096a:	f000 fad7 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800096e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000980:	2304      	movs	r3, #4
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <MX_GPIO_Init+0x2b8>)
 800098c:	f000 fac6 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000994:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0x2a8>)
 80009a6:	f000 fab9 	bl	8000f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	@ 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400

080009cc <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void *parameter)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <led_green_handler+0x24>)
 80009d6:	f004 ffef 	bl	80059b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <led_green_handler+0x28>)
 80009e0:	f000 fc51 	bl	8001286 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f000 f992 	bl	8000d10 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 80009ec:	bf00      	nop
 80009ee:	e7f1      	b.n	80009d4 <led_green_handler+0x8>
 80009f0:	08005b64 	.word	0x08005b64
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <led_red_handler>:
	}
}

static void led_red_handler(void *parameter)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000a00:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <led_red_handler+0x24>)
 8000a02:	f004 ffd9 	bl	80059b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <led_red_handler+0x28>)
 8000a0c:	f000 fc3b 	bl	8001286 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a14:	f000 f97c 	bl	8000d10 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000a18:	bf00      	nop
 8000a1a:	e7f1      	b.n	8000a00 <led_red_handler+0x8>
 8000a1c:	08005b78 	.word	0x08005b78
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <led_blue_handler>:
	}
}

static void led_blue_handler(void *parameter)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000a2c:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <led_blue_handler+0x24>)
 8000a2e:	f004 ffc3 	bl	80059b8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_BLUE_PIN);
 8000a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <led_blue_handler+0x28>)
 8000a38:	f000 fc25 	bl	8001286 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a40:	f000 f966 	bl	8000d10 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000a44:	bf00      	nop
 8000a46:	e7f1      	b.n	8000a2c <led_blue_handler+0x8>
 8000a48:	08005b8c 	.word	0x08005b8c
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 f935 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40001000 	.word	0x40001000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
 vInitPrioGroupValue();
 8000abe:	f002 fb01 	bl	80030c4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	@ 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <HAL_InitTick+0xe4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a32      	ldr	r2, [pc, #200]	@ (8000bb4 <HAL_InitTick+0xe4>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <HAL_InitTick+0xe4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f85c 	bl	8001bc4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b16:	f001 f841 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1e:	f001 f83d 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b22:	4603      	mov	r3, r0
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b2a:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <HAL_InitTick+0xe8>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	3b01      	subs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	@ (8000bc0 <HAL_InitTick+0xf0>)
 8000b3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b44:	4a1d      	ldr	r2, [pc, #116]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b5c:	4817      	ldr	r0, [pc, #92]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b5e:	f001 f863 	bl	8001c28 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d11b      	bne.n	8000ba8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b70:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <HAL_InitTick+0xec>)
 8000b72:	f001 f8b3 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b84:	2036      	movs	r0, #54	@ 0x36
 8000b86:	f000 f9bb 	bl	8000f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d808      	bhi.n	8000ba2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2036      	movs	r0, #54	@ 0x36
 8000b96:	f000 f997 	bl	8000ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_InitTick+0xf4>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e002      	b.n	8000ba8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	@ 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	20000030 	.word	0x20000030
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f001 f8d9 	bl	8001dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000030 	.word	0x20000030

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c3c:	f7ff ffea 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 ff2f 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc73 	bl	8000554 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c7c:	08005cc0 	.word	0x08005cc0
  ldr r2, =_sbss
 8000c80:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c84:	20013c24 	.word	0x20013c24

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8fc 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff ff08 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fede 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000078 	.word	0x20000078

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000078 	.word	0x20000078

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	@ (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	@ (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fcc0 	bl	8000cf8 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcbc 	bl	8000cf8 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fcac 	bl	8000cf8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fca8 	bl	8000cf8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc61 	bl	8000cf8 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc5d 	bl	8000cf8 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc40 	bl	8000cf8 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc3c 	bl	8000cf8 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fc20 	bl	8000cf8 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc1c 	bl	8000cf8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc09 	bl	8000cf8 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc05 	bl	8000cf8 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fbc5 	bl	8000cf8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fbc1 	bl	8000cf8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb86 	bl	8000cf8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb82 	bl	8000cf8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb70 	bl	8000cf8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb6c 	bl	8000cf8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb40 	bl	8000cf8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb3c 	bl	8000cf8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb15 	bl	8000cf8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fb11 	bl	8000cf8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fafe 	bl	8000cf8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fafa 	bl	8000cf8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff fa2c 	bl	8000cf8 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff fa28 	bl	8000cf8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f8bc 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08005c60 	.word	0x08005c60
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b094      	sub	sp, #80	@ 0x50
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b79      	ldr	r3, [pc, #484]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80e1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e0db      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b0:	e0db      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b6:	e0d8      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ea:	4622      	mov	r2, r4
 80019ec:	462b      	mov	r3, r5
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	0159      	lsls	r1, r3, #5
 80019f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fc:	0150      	lsls	r0, r2, #5
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4621      	mov	r1, r4
 8001a04:	1a51      	subs	r1, r2, r1
 8001a06:	6139      	str	r1, [r7, #16]
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4651      	mov	r1, sl
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4651      	mov	r1, sl
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a30:	4659      	mov	r1, fp
 8001a32:	eb63 0901 	sbc.w	r9, r3, r1
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	eb18 0303 	adds.w	r3, r8, r3
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	462b      	mov	r3, r5
 8001a58:	eb49 0303 	adc.w	r3, r9, r3
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	024b      	lsls	r3, r1, #9
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a74:	4621      	mov	r1, r4
 8001a76:	024a      	lsls	r2, r1, #9
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a88:	f7fe fbec 	bl	8000264 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	e058      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab0:	4642      	mov	r2, r8
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac2:	0150      	lsls	r0, r2, #5
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ace:	4649      	mov	r1, r9
 8001ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aec:	eb63 050b 	sbc.w	r5, r3, fp
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	00eb      	lsls	r3, r5, #3
 8001afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afe:	00e2      	lsls	r2, r4, #3
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	4643      	mov	r3, r8
 8001b06:	18e3      	adds	r3, r4, r3
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	eb45 0303 	adc.w	r3, r5, r3
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	61fa      	str	r2, [r7, #28]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fb92 	bl	8000264 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3750      	adds	r7, #80	@ 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08005c70 	.word	0x08005c70

08001bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_RCC_GetClockConfig+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f839 	bl	8001cc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9c0 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04e      	b.n	8001d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_TIM_Base_Start_IT+0xd0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a18      	ldr	r2, [pc, #96]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d010      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	e007      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40001800 	.word	0x40001800

08001dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0202 	mvn.w	r2, #2
 8001df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8d2 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8c4 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8d5 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0204 	mvn.w	r2, #4
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8ac 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f89e 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8af 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f886 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f878 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f889 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0210 	mvn.w	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f860 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f852 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f863 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fd94 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f906 	bl	8002158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f834 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8d8 	bl	8002144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a46      	ldr	r2, [pc, #280]	@ (8002118 <TIM_Base_SetConfig+0x12c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a43      	ldr	r2, [pc, #268]	@ (800211c <TIM_Base_SetConfig+0x130>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a42      	ldr	r2, [pc, #264]	@ (8002120 <TIM_Base_SetConfig+0x134>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <TIM_Base_SetConfig+0x138>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a40      	ldr	r2, [pc, #256]	@ (8002128 <TIM_Base_SetConfig+0x13c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a35      	ldr	r2, [pc, #212]	@ (8002118 <TIM_Base_SetConfig+0x12c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a32      	ldr	r2, [pc, #200]	@ (800211c <TIM_Base_SetConfig+0x130>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a31      	ldr	r2, [pc, #196]	@ (8002120 <TIM_Base_SetConfig+0x134>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <TIM_Base_SetConfig+0x138>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <TIM_Base_SetConfig+0x13c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <TIM_Base_SetConfig+0x140>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2d      	ldr	r2, [pc, #180]	@ (8002130 <TIM_Base_SetConfig+0x144>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2c      	ldr	r2, [pc, #176]	@ (8002134 <TIM_Base_SetConfig+0x148>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <TIM_Base_SetConfig+0x14c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2a      	ldr	r2, [pc, #168]	@ (800213c <TIM_Base_SetConfig+0x150>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a29      	ldr	r2, [pc, #164]	@ (8002140 <TIM_Base_SetConfig+0x154>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <TIM_Base_SetConfig+0x12c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <TIM_Base_SetConfig+0x13c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f023 0201 	bic.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
  }
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 0208 	add.w	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021a0:	f240 1019 	movw	r0, #281	@ 0x119
 80021a4:	f003 f9ac 	bl	8005500 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021be:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021c2:	f003 f99d 	bl	8005500 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6892      	ldr	r2, [r2, #8]
 80021e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d103      	bne.n	8002202 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	f240 101d 	movw	r0, #285	@ 0x11d
 800221c:	f003 f9ac 	bl	8005578 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af04      	add	r7, sp, #16
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f8ee 	bl	8003420 <pvPortMalloc>
 8002244:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800224c:	2058      	movs	r0, #88	@ 0x58
 800224e:	f001 f8e7 	bl	8003420 <pvPortMalloc>
 8002252:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800225a:	2258      	movs	r2, #88	@ 0x58
 800225c:	2100      	movs	r1, #0
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f003 fc2a 	bl	8005ab8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
 800226a:	e005      	b.n	8002278 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800226c:	6938      	ldr	r0, [r7, #16]
 800226e:	f001 fa0f 	bl	8003690 <vPortFree>
 8002272:	e001      	b.n	8002278 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800227e:	2300      	movs	r3, #0
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f82d 	bl	80022f4 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800229a:	697b      	ldr	r3, [r7, #20]
    }
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ffb3 	bl	800222c <prvCreateTask>
 80022c6:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80022ce:	6938      	ldr	r0, [r7, #16]
 80022d0:	f000 f8a0 	bl	8002414 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e002      	b.n	80022e0 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4619      	mov	r1, r3
 80022e4:	20c2      	movs	r0, #194	@ 0xc2
 80022e6:	f003 f947 	bl	8005578 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80022ea:	697b      	ldr	r3, [r7, #20]
    }
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002304:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	21a5      	movs	r1, #165	@ 0xa5
 800230e:	f003 fbd3 	bl	8005ab8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800231c:	3b01      	subs	r3, #1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	617b      	str	r3, [r7, #20]
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	e7fd      	b.n	800234a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01e      	beq.n	8002392 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e012      	b.n	8002380 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	7819      	ldrb	r1, [r3, #0]
 8002362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	3334      	adds	r3, #52	@ 0x34
 800236a:	460a      	mov	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b09      	cmp	r3, #9
 8002384:	d9e9      	bls.n	800235a <prvInitialiseNewTask+0x66>
 8002386:	e000      	b.n	800238a <prvInitialiseNewTask+0x96>
            {
                break;
 8002388:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	2b04      	cmp	r3, #4
 8002396:	d90b      	bls.n	80023b0 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	613b      	str	r3, [r7, #16]
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d901      	bls.n	80023ba <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023b6:	2304      	movs	r3, #4
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	3304      	adds	r3, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fef0 	bl	80021b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	3318      	adds	r3, #24
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff feeb 	bl	80021b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	f1c3 0205 	rsb	r2, r3, #5
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	69b8      	ldr	r0, [r7, #24]
 80023f6:	f000 fce3 	bl	8002dc0 <pxPortInitialiseStack>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800240a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800241c:	f000 fed2 	bl	80031c4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002420:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <prvAddNewTaskToReadyList+0x150>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a4f      	ldr	r2, [pc, #316]	@ (8002564 <prvAddNewTaskToReadyList+0x150>)
 8002428:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800242a:	4b4f      	ldr	r3, [pc, #316]	@ (8002568 <prvAddNewTaskToReadyList+0x154>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002432:	4a4d      	ldr	r2, [pc, #308]	@ (8002568 <prvAddNewTaskToReadyList+0x154>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002438:	4b4a      	ldr	r3, [pc, #296]	@ (8002564 <prvAddNewTaskToReadyList+0x150>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d110      	bne.n	8002462 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002440:	f000 fc24 	bl	8002c8c <prvInitialiseTaskLists>
 8002444:	e00d      	b.n	8002462 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002446:	4b49      	ldr	r3, [pc, #292]	@ (800256c <prvAddNewTaskToReadyList+0x158>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800244e:	4b46      	ldr	r3, [pc, #280]	@ (8002568 <prvAddNewTaskToReadyList+0x154>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	429a      	cmp	r2, r3
 800245a:	d802      	bhi.n	8002462 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800245c:	4a42      	ldr	r2, [pc, #264]	@ (8002568 <prvAddNewTaskToReadyList+0x154>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <prvAddNewTaskToReadyList+0x15c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a41      	ldr	r2, [pc, #260]	@ (8002570 <prvAddNewTaskToReadyList+0x15c>)
 800246a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800246c:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <prvAddNewTaskToReadyList+0x15c>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <prvAddNewTaskToReadyList+0x94>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f8ef 	bl	8005660 <SEGGER_SYSVIEW_OnTaskCreate>
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	461d      	mov	r5, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461c      	mov	r4, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	1ae3      	subs	r3, r4, r3
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	462b      	mov	r3, r5
 80024a4:	f001 faf2 	bl	8003a8c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 f95c 	bl	8005768 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <prvAddNewTaskToReadyList+0x160>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	4a2d      	ldr	r2, [pc, #180]	@ (8002574 <prvAddNewTaskToReadyList+0x160>)
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c6:	492c      	ldr	r1, [pc, #176]	@ (8002578 <prvAddNewTaskToReadyList+0x164>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3304      	adds	r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	3204      	adds	r2, #4
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <prvAddNewTaskToReadyList+0x164>)
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002510:	4919      	ldr	r1, [pc, #100]	@ (8002578 <prvAddNewTaskToReadyList+0x164>)
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	4814      	ldr	r0, [pc, #80]	@ (8002578 <prvAddNewTaskToReadyList+0x164>)
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002532:	f000 fe79 	bl	8003228 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002536:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <prvAddNewTaskToReadyList+0x158>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <prvAddNewTaskToReadyList+0x154>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <prvAddNewTaskToReadyList+0x148>
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <prvAddNewTaskToReadyList+0x168>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	20000154 	.word	0x20000154
 8002568:	2000007c 	.word	0x2000007c
 800256c:	20000160 	.word	0x20000160
 8002570:	20000170 	.word	0x20000170
 8002574:	2000015c 	.word	0x2000015c
 8002578:	20000080 	.word	0x20000080
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002586:	2301      	movs	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e011      	b.n	80025c6 <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <prvCreateIdleTasks+0xa0>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	4413      	add	r3, r2
 80025a8:	7819      	ldrb	r1, [r3, #0]
 80025aa:	1d3a      	adds	r2, r7, #4
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4413      	add	r3, r2
 80025b0:	460a      	mov	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80025b4:	1d3a      	adds	r2, r7, #4
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d9ea      	bls.n	80025a2 <prvCreateIdleTasks+0x22>
 80025cc:	e000      	b.n	80025d0 <prvCreateIdleTasks+0x50>
        {
            break;
 80025ce:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 80025d0:	1d3a      	adds	r2, r7, #4
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4413      	add	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e015      	b.n	800260c <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <prvCreateIdleTasks+0xa4>)
 80025e2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002628 <prvCreateIdleTasks+0xa8>)
 80025ea:	4413      	add	r3, r2
 80025ec:	1d39      	adds	r1, r7, #4
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2300      	movs	r3, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2282      	movs	r2, #130	@ 0x82
 80025f8:	6938      	ldr	r0, [r7, #16]
 80025fa:	f7ff fe53 	bl	80022a4 <xTaskCreate>
 80025fe:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3301      	adds	r3, #1
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	dde6      	ble.n	80025e0 <prvCreateIdleTasks+0x60>
 8002612:	e000      	b.n	8002616 <prvCreateIdleTasks+0x96>
        {
            break;
 8002614:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002616:	69fb      	ldr	r3, [r7, #28]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	08005ba0 	.word	0x08005ba0
 8002624:	08002c5d 	.word	0x08002c5d
 8002628:	20000178 	.word	0x20000178

0800262c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002632:	f7ff ffa5 	bl	8002580 <prvCreateIdleTasks>
 8002636:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d124      	bne.n	8002688 <vTaskStartScheduler+0x5c>
    __asm volatile
 800263e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	60bb      	str	r3, [r7, #8]
}
 8002650:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <vTaskStartScheduler+0x90>)
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <vTaskStartScheduler+0x94>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <vTaskStartScheduler+0x98>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002666:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <vTaskStartScheduler+0x9c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <vTaskStartScheduler+0xa0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d102      	bne.n	8002678 <vTaskStartScheduler+0x4c>
 8002672:	f002 ffd9 	bl	8005628 <SEGGER_SYSVIEW_OnIdle>
 8002676:	e004      	b.n	8002682 <vTaskStartScheduler+0x56>
 8002678:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <vTaskStartScheduler+0xa0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 f831 	bl	80056e4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002682:	f000 fc2f 	bl	8002ee4 <xPortStartScheduler>
 8002686:	e00f      	b.n	80026a8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d10b      	bne.n	80026a8 <vTaskStartScheduler+0x7c>
    __asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	607b      	str	r3, [r7, #4]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <vTaskStartScheduler+0xa4>)
 80026aa:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80026ac:	20cd      	movs	r0, #205	@ 0xcd
 80026ae:	f002 ff27 	bl	8005500 <SEGGER_SYSVIEW_RecordEndCall>
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000174 	.word	0x20000174
 80026c0:	20000160 	.word	0x20000160
 80026c4:	20000158 	.word	0x20000158
 80026c8:	20000178 	.word	0x20000178
 80026cc:	2000007c 	.word	0x2000007c
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80026d8:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <vTaskSuspendAll+0x18>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a03      	ldr	r2, [pc, #12]	@ (80026ec <vTaskSuspendAll+0x18>)
 80026e0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80026e2:	20cf      	movs	r0, #207	@ 0xcf
 80026e4:	f002 ff0c 	bl	8005500 <SEGGER_SYSVIEW_RecordEndCall>
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000017c 	.word	0x2000017c

080026f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80026fe:	f000 fd61 	bl	80031c4 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002706:	4b7a      	ldr	r3, [pc, #488]	@ (80028f0 <xTaskResumeAll+0x200>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <xTaskResumeAll+0x36>
    __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	603b      	str	r3, [r7, #0]
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002726:	4b72      	ldr	r3, [pc, #456]	@ (80028f0 <xTaskResumeAll+0x200>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	4a70      	ldr	r2, [pc, #448]	@ (80028f0 <xTaskResumeAll+0x200>)
 800272e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002730:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <xTaskResumeAll+0x200>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 80ce 	bne.w	80028d6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800273a:	4b6e      	ldr	r3, [pc, #440]	@ (80028f4 <xTaskResumeAll+0x204>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80c9 	beq.w	80028d6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002744:	e092      	b.n	800286c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002746:	4b6c      	ldr	r3, [pc, #432]	@ (80028f8 <xTaskResumeAll+0x208>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	6a12      	ldr	r2, [r2, #32]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	69d2      	ldr	r2, [r2, #28]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3318      	adds	r3, #24
 8002770:	429a      	cmp	r2, r3
 8002772:	d103      	bne.n	800277c <xTaskResumeAll+0x8c>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	@ 0x28
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d103      	bne.n	80027ba <xTaskResumeAll+0xca>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 ffcb 	bl	8005768 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	2201      	movs	r2, #1
 80027d8:	409a      	lsls	r2, r3
 80027da:	4b48      	ldr	r3, [pc, #288]	@ (80028fc <xTaskResumeAll+0x20c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	4a46      	ldr	r2, [pc, #280]	@ (80028fc <xTaskResumeAll+0x20c>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	4945      	ldr	r1, [pc, #276]	@ (8002900 <xTaskResumeAll+0x210>)
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3304      	adds	r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	60da      	str	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	3204      	adds	r2, #4
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	1d1a      	adds	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4a36      	ldr	r2, [pc, #216]	@ (8002900 <xTaskResumeAll+0x210>)
 8002828:	441a      	add	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002832:	4933      	ldr	r1, [pc, #204]	@ (8002900 <xTaskResumeAll+0x210>)
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002844:	1c59      	adds	r1, r3, #1
 8002846:	482e      	ldr	r0, [pc, #184]	@ (8002900 <xTaskResumeAll+0x210>)
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4403      	add	r3, r0
 8002852:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <xTaskResumeAll+0x214>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	429a      	cmp	r2, r3
 8002860:	d904      	bls.n	800286c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002862:	4a29      	ldr	r2, [pc, #164]	@ (8002908 <xTaskResumeAll+0x218>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2101      	movs	r1, #1
 8002868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <xTaskResumeAll+0x208>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f af68 	bne.w	8002746 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800287c:	f000 fa84 	bl	8002d88 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002880:	4b22      	ldr	r3, [pc, #136]	@ (800290c <xTaskResumeAll+0x21c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800288c:	f000 f858 	bl	8002940 <xTaskIncrementTick>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <xTaskResumeAll+0x218>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2101      	movs	r1, #1
 800289c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ef      	bne.n	800288c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <xTaskResumeAll+0x21c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <xTaskResumeAll+0x218>)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <xTaskResumeAll+0x214>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <xTaskResumeAll+0x220>)
 80028c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028d6:	f000 fca7 	bl	8003228 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4619      	mov	r1, r3
 80028de:	20d0      	movs	r0, #208	@ 0xd0
 80028e0:	f002 fe4a 	bl	8005578 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80028e4:	69bb      	ldr	r3, [r7, #24]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000017c 	.word	0x2000017c
 80028f4:	20000154 	.word	0x20000154
 80028f8:	20000114 	.word	0x20000114
 80028fc:	2000015c 	.word	0x2000015c
 8002900:	20000080 	.word	0x20000080
 8002904:	2000007c 	.word	0x2000007c
 8002908:	20000168 	.word	0x20000168
 800290c:	20000164 	.word	0x20000164
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800291a:	f000 fd3f 	bl	800339c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <xTaskGetTickCountFromISR+0x28>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	20d2      	movs	r0, #210	@ 0xd2
 800292c:	f002 fe24 	bl	8005578 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002930:	683b      	ldr	r3, [r7, #0]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000158 	.word	0x20000158

08002940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800294a:	4b83      	ldr	r3, [pc, #524]	@ (8002b58 <xTaskIncrementTick+0x218>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 80f3 	bne.w	8002b3a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002954:	4b81      	ldr	r3, [pc, #516]	@ (8002b5c <xTaskIncrementTick+0x21c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800295c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b5c <xTaskIncrementTick+0x21c>)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d121      	bne.n	80029ac <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002968:	4b7d      	ldr	r3, [pc, #500]	@ (8002b60 <xTaskIncrementTick+0x220>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <xTaskIncrementTick+0x4a>
    __asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	607b      	str	r3, [r7, #4]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xTaskIncrementTick+0x46>
 800298a:	4b75      	ldr	r3, [pc, #468]	@ (8002b60 <xTaskIncrementTick+0x220>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	4b74      	ldr	r3, [pc, #464]	@ (8002b64 <xTaskIncrementTick+0x224>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a72      	ldr	r2, [pc, #456]	@ (8002b60 <xTaskIncrementTick+0x220>)
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4a72      	ldr	r2, [pc, #456]	@ (8002b64 <xTaskIncrementTick+0x224>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b72      	ldr	r3, [pc, #456]	@ (8002b68 <xTaskIncrementTick+0x228>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a70      	ldr	r2, [pc, #448]	@ (8002b68 <xTaskIncrementTick+0x228>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	f000 f9ee 	bl	8002d88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <xTaskIncrementTick+0x22c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f0c0 80ac 	bcc.w	8002b10 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b8:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <xTaskIncrementTick+0x220>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80029c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <xTaskIncrementTick+0x22c>)
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	601a      	str	r2, [r3, #0]
                    break;
 80029ca:	e0a1      	b.n	8002b10 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029cc:	4b64      	ldr	r3, [pc, #400]	@ (8002b60 <xTaskIncrementTick+0x220>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d203      	bcs.n	80029ec <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029e4:	4a61      	ldr	r2, [pc, #388]	@ (8002b6c <xTaskIncrementTick+0x22c>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6013      	str	r3, [r2, #0]
                        break;
 80029ea:	e091      	b.n	8002b10 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d103      	bne.n	8002a1a <xTaskIncrementTick+0xda>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01e      	beq.n	8002a70 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	6a12      	ldr	r2, [r2, #32]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	69d2      	ldr	r2, [r2, #28]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3318      	adds	r3, #24
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d103      	bne.n	8002a60 <xTaskIncrementTick+0x120>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2200      	movs	r2, #0
 8002a64:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fe78 	bl	8005768 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <xTaskIncrementTick+0x230>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a3a      	ldr	r2, [pc, #232]	@ (8002b70 <xTaskIncrementTick+0x230>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8e:	4939      	ldr	r1, [pc, #228]	@ (8002b74 <xTaskIncrementTick+0x234>)
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	3204      	adds	r2, #4
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1d1a      	adds	r2, r3, #4
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <xTaskIncrementTick+0x234>)
 8002ace:	441a      	add	r2, r3
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad8:	4926      	ldr	r1, [pc, #152]	@ (8002b74 <xTaskIncrementTick+0x234>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	4821      	ldr	r0, [pc, #132]	@ (8002b74 <xTaskIncrementTick+0x234>)
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4403      	add	r3, r0
 8002af8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <xTaskIncrementTick+0x238>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f67f af57 	bls.w	80029b8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0e:	e753      	b.n	80029b8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <xTaskIncrementTick+0x238>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b16:	4917      	ldr	r1, [pc, #92]	@ (8002b74 <xTaskIncrementTick+0x234>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d901      	bls.n	8002b2c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <xTaskIncrementTick+0x23c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	e004      	b.n	8002b44 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <xTaskIncrementTick+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <xTaskIncrementTick+0x240>)
 8002b42:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	20db      	movs	r0, #219	@ 0xdb
 8002b4a:	f002 fd15 	bl	8005578 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000017c 	.word	0x2000017c
 8002b5c:	20000158 	.word	0x20000158
 8002b60:	2000010c 	.word	0x2000010c
 8002b64:	20000110 	.word	0x20000110
 8002b68:	2000016c 	.word	0x2000016c
 8002b6c:	20000174 	.word	0x20000174
 8002b70:	2000015c 	.word	0x2000015c
 8002b74:	20000080 	.word	0x20000080
 8002b78:	2000007c 	.word	0x2000007c
 8002b7c:	20000168 	.word	0x20000168
 8002b80:	20000164 	.word	0x20000164

08002b84 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <vTaskSwitchContext+0xc0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002b92:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <vTaskSwitchContext+0xc4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002b98:	e04f      	b.n	8002c3a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <vTaskSwitchContext+0xc4>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <vTaskSwitchContext+0xc8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f1c3 031f 	rsb	r3, r3, #31
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4926      	ldr	r1, [pc, #152]	@ (8002c50 <vTaskSwitchContext+0xcc>)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	607b      	str	r3, [r7, #4]
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <vTaskSwitchContext+0x5a>
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <vTaskSwitchContext+0xcc>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	3308      	adds	r3, #8
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d103      	bne.n	8002c10 <vTaskSwitchContext+0x8c>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	@ (8002c54 <vTaskSwitchContext+0xd0>)
 8002c18:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <vTaskSwitchContext+0xd4>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <vTaskSwitchContext+0xd0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d102      	bne.n	8002c2c <vTaskSwitchContext+0xa8>
 8002c26:	f002 fcff 	bl	8005628 <SEGGER_SYSVIEW_OnIdle>
 8002c2a:	e004      	b.n	8002c36 <vTaskSwitchContext+0xb2>
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <vTaskSwitchContext+0xd0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fd57 	bl	80056e4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002c36:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <vTaskSwitchContext+0xd0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
    }
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000017c 	.word	0x2000017c
 8002c48:	20000168 	.word	0x20000168
 8002c4c:	2000015c 	.word	0x2000015c
 8002c50:	20000080 	.word	0x20000080
 8002c54:	2000007c 	.word	0x2000007c
 8002c58:	20000178 	.word	0x20000178

08002c5c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c64:	f000 f852 	bl	8002d0c <prvCheckTasksWaitingTermination>
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */

        	if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <prvIdleTask+0x28>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d9f9      	bls.n	8002c64 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <prvIdleTask+0x2c>)
 8002c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c80:	e7f0      	b.n	8002c64 <prvIdleTask+0x8>
 8002c82:	bf00      	nop
 8002c84:	20000080 	.word	0x20000080
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	e00c      	b.n	8002cb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <prvInitialiseTaskLists+0x60>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa60 	bl	800216c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d9ef      	bls.n	8002c98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cb8:	480d      	ldr	r0, [pc, #52]	@ (8002cf0 <prvInitialiseTaskLists+0x64>)
 8002cba:	f7ff fa57 	bl	800216c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cbe:	480d      	ldr	r0, [pc, #52]	@ (8002cf4 <prvInitialiseTaskLists+0x68>)
 8002cc0:	f7ff fa54 	bl	800216c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <prvInitialiseTaskLists+0x6c>)
 8002cc6:	f7ff fa51 	bl	800216c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002cca:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <prvInitialiseTaskLists+0x70>)
 8002ccc:	f7ff fa4e 	bl	800216c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002cd0:	480b      	ldr	r0, [pc, #44]	@ (8002d00 <prvInitialiseTaskLists+0x74>)
 8002cd2:	f7ff fa4b 	bl	800216c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <prvInitialiseTaskLists+0x78>)
 8002cd8:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <prvInitialiseTaskLists+0x64>)
 8002cda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <prvInitialiseTaskLists+0x7c>)
 8002cde:	4a05      	ldr	r2, [pc, #20]	@ (8002cf4 <prvInitialiseTaskLists+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000080 	.word	0x20000080
 8002cf0:	200000e4 	.word	0x200000e4
 8002cf4:	200000f8 	.word	0x200000f8
 8002cf8:	20000114 	.word	0x20000114
 8002cfc:	20000128 	.word	0x20000128
 8002d00:	20000140 	.word	0x20000140
 8002d04:	2000010c 	.word	0x2000010c
 8002d08:	20000110 	.word	0x20000110

08002d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d12:	e019      	b.n	8002d48 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002d14:	f000 fa56 	bl	80031c4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d18:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <prvCheckTasksWaitingTermination+0x50>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fa52 	bl	80021ce <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <prvCheckTasksWaitingTermination+0x54>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a0b      	ldr	r2, [pc, #44]	@ (8002d60 <prvCheckTasksWaitingTermination+0x54>)
 8002d32:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d3c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002d3e:	f000 fa73 	bl	8003228 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f810 	bl	8002d68 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e1      	bne.n	8002d14 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000128 	.word	0x20000128
 8002d60:	20000154 	.word	0x20000154
 8002d64:	2000013c 	.word	0x2000013c

08002d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fc8b 	bl	8003690 <vPortFree>
            vPortFree( pxTCB );
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fc88 	bl	8003690 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <prvResetNextTaskUnblockTime+0x30>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <prvResetNextTaskUnblockTime+0x34>)
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d9e:	e005      	b.n	8002dac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <prvResetNextTaskUnblockTime+0x30>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <prvResetNextTaskUnblockTime+0x34>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	2000010c 	.word	0x2000010c
 8002dbc:	20000174 	.word	0x20000174

08002dc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3b04      	subs	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002df0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <pxPortInitialiseStack+0x64>)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3b14      	subs	r3, #20
 8002dfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b04      	subs	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f06f 0202 	mvn.w	r2, #2
 8002e0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b20      	subs	r3, #32
 8002e14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e16:	68fb      	ldr	r3, [r7, #12]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	08002e29 	.word	0x08002e29

08002e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <prvTaskExitError+0x58>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d00b      	beq.n	8002e54 <prvTaskExitError+0x2c>
    __asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	60fb      	str	r3, [r7, #12]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <prvTaskExitError+0x28>
    __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	60bb      	str	r3, [r7, #8]
}
 8002e66:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e68:	bf00      	nop
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0fc      	beq.n	8002e6a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000010 	.word	0x20000010
	...

08002e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e90:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <pxCurrentTCBConst2>)
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	f380 8809 	msr	PSP, r0
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	4770      	bx	lr
 8002eac:	f3af 8000 	nop.w

08002eb0 <pxCurrentTCBConst2>:
 8002eb0:	2000007c 	.word	0x2000007c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop

08002eb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002eb8:	4808      	ldr	r0, [pc, #32]	@ (8002edc <prvPortStartFirstTask+0x24>)
 8002eba:	6800      	ldr	r0, [r0, #0]
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	f380 8808 	msr	MSP, r0
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f380 8814 	msr	CONTROL, r0
 8002eca:	b662      	cpsie	i
 8002ecc:	b661      	cpsie	f
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	df00      	svc	0
 8002ed8:	bf00      	nop
 8002eda:	0000      	.short	0x0000
 8002edc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop

08002ee4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eea:	4b69      	ldr	r3, [pc, #420]	@ (8003090 <xPortStartScheduler+0x1ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a69      	ldr	r2, [pc, #420]	@ (8003094 <xPortStartScheduler+0x1b0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10b      	bne.n	8002f0c <xPortStartScheduler+0x28>
    __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f0c:	4b60      	ldr	r3, [pc, #384]	@ (8003090 <xPortStartScheduler+0x1ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a61      	ldr	r2, [pc, #388]	@ (8003098 <xPortStartScheduler+0x1b4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10b      	bne.n	8002f2e <xPortStartScheduler+0x4a>
    __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	623b      	str	r3, [r7, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	e7fd      	b.n	8002f2a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800309c <xPortStartScheduler+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	332c      	adds	r3, #44	@ 0x2c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a59      	ldr	r2, [pc, #356]	@ (80030a0 <xPortStartScheduler+0x1bc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <xPortStartScheduler+0x74>
    __asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61fb      	str	r3, [r7, #28]
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5a:	3338      	adds	r3, #56	@ 0x38
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a51      	ldr	r2, [pc, #324]	@ (80030a4 <xPortStartScheduler+0x1c0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <xPortStartScheduler+0x98>
    __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61bb      	str	r3, [r7, #24]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f80:	4b49      	ldr	r3, [pc, #292]	@ (80030a8 <xPortStartScheduler+0x1c4>)
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	22ff      	movs	r2, #255	@ 0xff
 8002f90:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <xPortStartScheduler+0x1c8>)
 8002fa6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002fa8:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <xPortStartScheduler+0x1c8>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <xPortStartScheduler+0xe4>
    __asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	617b      	str	r3, [r7, #20]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <xPortStartScheduler+0x11a>
    __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	613b      	str	r3, [r7, #16]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b80      	cmp	r3, #128	@ 0x80
 8003008:	d0f1      	beq.n	8002fee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d103      	bne.n	8003018 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003010:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e004      	b.n	8003022 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 8003020:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003022:	4b23      	ldr	r3, [pc, #140]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	4a21      	ldr	r2, [pc, #132]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 800302a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800302c:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003034:	4a1e      	ldr	r2, [pc, #120]	@ (80030b0 <xPortStartScheduler+0x1cc>)
 8003036:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003040:	4b1c      	ldr	r3, [pc, #112]	@ (80030b4 <xPortStartScheduler+0x1d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <xPortStartScheduler+0x1d0>)
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800304a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <xPortStartScheduler+0x1d0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <xPortStartScheduler+0x1d0>)
 8003052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003056:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <xPortStartScheduler+0x1d4>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800305e:	f000 f96d 	bl	800333c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <xPortStartScheduler+0x1d8>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003068:	f000 f98c 	bl	8003384 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800306c:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <xPortStartScheduler+0x1dc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a13      	ldr	r2, [pc, #76]	@ (80030c0 <xPortStartScheduler+0x1dc>)
 8003072:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003078:	f7ff ff1e 	bl	8002eb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800307c:	f7ff fd82 	bl	8002b84 <vTaskSwitchContext>
    prvTaskExitError();
 8003080:	f7ff fed2 	bl	8002e28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3730      	adds	r7, #48	@ 0x30
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	410fc271 	.word	0x410fc271
 8003098:	410fc270 	.word	0x410fc270
 800309c:	e000ed08 	.word	0xe000ed08
 80030a0:	08002e91 	.word	0x08002e91
 80030a4:	08003281 	.word	0x08003281
 80030a8:	e000e400 	.word	0xe000e400
 80030ac:	20000180 	.word	0x20000180
 80030b0:	20000184 	.word	0x20000184
 80030b4:	e000ed20 	.word	0xe000ed20
 80030b8:	e000ed1c 	.word	0xe000ed1c
 80030bc:	20000010 	.word	0x20000010
 80030c0:	e000ef34 	.word	0xe000ef34

080030c4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <vInitPrioGroupValue+0xe8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a38      	ldr	r2, [pc, #224]	@ (80031b0 <vInitPrioGroupValue+0xec>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10b      	bne.n	80030ec <vInitPrioGroupValue+0x28>
    __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	613b      	str	r3, [r7, #16]
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030ec:	4b2f      	ldr	r3, [pc, #188]	@ (80031ac <vInitPrioGroupValue+0xe8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <vInitPrioGroupValue+0xf0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10b      	bne.n	800310e <vInitPrioGroupValue+0x4a>
    __asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60fb      	str	r3, [r7, #12]
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	e7fd      	b.n	800310a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800310e:	4b2a      	ldr	r3, [pc, #168]	@ (80031b8 <vInitPrioGroupValue+0xf4>)
 8003110:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	22ff      	movs	r2, #255	@ 0xff
 800311e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <vInitPrioGroupValue+0xf8>)
 8003134:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003136:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800313c:	e009      	b.n	8003152 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800313e:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3b01      	subs	r3, #1
 8003144:	4a1e      	ldr	r2, [pc, #120]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003146:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d0ef      	beq.n	800313e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00b      	beq.n	8003182 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60bb      	str	r3, [r7, #8]
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	e7fd      	b.n	800317e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 800318a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <vInitPrioGroupValue+0xfc>)
 8003196:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00
 80031b0:	410fc271 	.word	0x410fc271
 80031b4:	410fc270 	.word	0x410fc270
 80031b8:	e000e400 	.word	0xe000e400
 80031bc:	20000180 	.word	0x20000180
 80031c0:	20000184 	.word	0x20000184

080031c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
    __asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	607b      	str	r3, [r7, #4]
}
 80031dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <vPortEnterCritical+0x5c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <vPortEnterCritical+0x5c>)
 80031e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <vPortEnterCritical+0x5c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d110      	bne.n	8003212 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <vPortEnterCritical+0x60>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <vPortEnterCritical+0x4e>
    __asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	603b      	str	r3, [r7, #0]
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	e7fd      	b.n	800320e <vPortEnterCritical+0x4a>
    }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800322e:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <vPortExitCritical+0x50>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <vPortExitCritical+0x26>
    __asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	607b      	str	r3, [r7, #4]
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	e7fd      	b.n	800324a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <vPortExitCritical+0x50>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3b01      	subs	r3, #1
 8003254:	4a08      	ldr	r2, [pc, #32]	@ (8003278 <vPortExitCritical+0x50>)
 8003256:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003258:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <vPortExitCritical+0x50>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <vPortExitCritical+0x44>
 8003260:	2300      	movs	r3, #0
 8003262:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800326a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	20000010 	.word	0x20000010
 800327c:	00000000 	.word	0x00000000

08003280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003280:	f3ef 8009 	mrs	r0, PSP
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <pxCurrentTCBConst>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f01e 0f10 	tst.w	lr, #16
 8003290:	bf08      	it	eq
 8003292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80032a4:	f380 8811 	msr	BASEPRI, r0
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f7ff fc68 	bl	8002b84 <vTaskSwitchContext>
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f380 8811 	msr	BASEPRI, r0
 80032bc:	bc09      	pop	{r0, r3}
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6808      	ldr	r0, [r1, #0]
 80032c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c6:	f01e 0f10 	tst.w	lr, #16
 80032ca:	bf08      	it	eq
 80032cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032d0:	f380 8809 	msr	PSP, r0
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst>:
 80032e0:	2000007c 	.word	0x2000007c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
    __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
}
 8003300:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003302:	f002 f883 	bl	800540c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003306:	f7ff fb1b 	bl	8002940 <xTaskIncrementTick>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003310:	f002 f8da 	bl	80054c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <SysTick_Handler+0x50>)
 8003316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e001      	b.n	8003322 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800331e:	f002 f8b7 	bl	8005490 <SEGGER_SYSVIEW_RecordExitISR>
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f383 8811 	msr	BASEPRI, r3
}
 800332c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <vPortSetupTimerInterrupt+0x34>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <vPortSetupTimerInterrupt+0x38>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800334c:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <vPortSetupTimerInterrupt+0x3c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <vPortSetupTimerInterrupt+0x40>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <vPortSetupTimerInterrupt+0x44>)
 800335a:	3b01      	subs	r3, #1
 800335c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <vPortSetupTimerInterrupt+0x34>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010
 8003374:	e000e018 	.word	0xe000e018
 8003378:	20000000 	.word	0x20000000
 800337c:	10624dd3 	.word	0x10624dd3
 8003380:	e000e014 	.word	0xe000e014

08003384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003394 <vPortEnableVFP+0x10>
 8003388:	6801      	ldr	r1, [r0, #0]
 800338a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800338e:	6001      	str	r1, [r0, #0]
 8003390:	4770      	bx	lr
 8003392:	0000      	.short	0x0000
 8003394:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop

0800339c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033a2:	f3ef 8305 	mrs	r3, IPSR
 80033a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d915      	bls.n	80033da <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033ae:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <vPortValidateInterruptPriority+0x74>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033b8:	4b16      	ldr	r3, [pc, #88]	@ (8003414 <vPortValidateInterruptPriority+0x78>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	7afa      	ldrb	r2, [r7, #11]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d20b      	bcs.n	80033da <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	607b      	str	r3, [r7, #4]
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	e7fd      	b.n	80033d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <vPortValidateInterruptPriority+0x7c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033e2:	4b0e      	ldr	r3, [pc, #56]	@ (800341c <vPortValidateInterruptPriority+0x80>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d90b      	bls.n	8003402 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <vPortValidateInterruptPriority+0x62>
    }
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e3f0 	.word	0xe000e3f0
 8003414:	20000180 	.word	0x20000180
 8003418:	e000ed0c 	.word	0xe000ed0c
 800341c:	20000184 	.word	0x20000184

08003420 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	@ 0x38
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003436:	2308      	movs	r3, #8
 8003438:	43db      	mvns	r3, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d81b      	bhi.n	8003478 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003440:	2208      	movs	r2, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	2b00      	cmp	r3, #0
 8003450:	d014      	beq.n	800347c <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	f1c3 0308 	rsb	r3, r3, #8
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	43db      	mvns	r3, r3
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	d804      	bhi.n	8003472 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	4413      	add	r3, r2
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e004      	b.n	800347c <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	e001      	b.n	800347c <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800347c:	f7ff f92a 	bl	80026d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003480:	4b7c      	ldr	r3, [pc, #496]	@ (8003674 <pvPortMalloc+0x254>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003488:	f000 f97c 	bl	8003784 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f2c0 80d7 	blt.w	8003642 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80d3 	beq.w	8003642 <pvPortMalloc+0x222>
 800349c:	4b76      	ldr	r3, [pc, #472]	@ (8003678 <pvPortMalloc+0x258>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	f200 80cd 	bhi.w	8003642 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80034a8:	4b74      	ldr	r3, [pc, #464]	@ (800367c <pvPortMalloc+0x25c>)
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80034ac:	4b73      	ldr	r3, [pc, #460]	@ (800367c <pvPortMalloc+0x25c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	4a72      	ldr	r2, [pc, #456]	@ (8003680 <pvPortMalloc+0x260>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d305      	bcc.n	80034c6 <pvPortMalloc+0xa6>
 80034ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034bc:	4a71      	ldr	r2, [pc, #452]	@ (8003684 <pvPortMalloc+0x264>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d801      	bhi.n	80034c6 <pvPortMalloc+0xa6>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <pvPortMalloc+0xa8>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d129      	bne.n	8003520 <pvPortMalloc+0x100>
    __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	61fb      	str	r3, [r7, #28]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	4a63      	ldr	r2, [pc, #396]	@ (8003680 <pvPortMalloc+0x260>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d305      	bcc.n	8003502 <pvPortMalloc+0xe2>
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	4a62      	ldr	r2, [pc, #392]	@ (8003684 <pvPortMalloc+0x264>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d801      	bhi.n	8003502 <pvPortMalloc+0xe2>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <pvPortMalloc+0xe4>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <pvPortMalloc+0x100>
    __asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d903      	bls.n	8003532 <pvPortMalloc+0x112>
 800352a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1d8      	bne.n	80034e4 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003532:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <pvPortMalloc+0x254>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003538:	429a      	cmp	r2, r3
 800353a:	f000 8082 	beq.w	8003642 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2208      	movs	r2, #8
 8003544:	4413      	add	r3, r2
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354a:	4a4d      	ldr	r2, [pc, #308]	@ (8003680 <pvPortMalloc+0x260>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d305      	bcc.n	800355c <pvPortMalloc+0x13c>
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	4a4c      	ldr	r2, [pc, #304]	@ (8003684 <pvPortMalloc+0x264>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d801      	bhi.n	800355c <pvPortMalloc+0x13c>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <pvPortMalloc+0x13e>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <pvPortMalloc+0x15a>
    __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	617b      	str	r3, [r7, #20]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d90b      	bls.n	80035a4 <pvPortMalloc+0x184>
    __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	613b      	str	r3, [r7, #16]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	2308      	movs	r3, #8
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d924      	bls.n	80035fe <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <pvPortMalloc+0x1be>
    __asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60fb      	str	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	6a3a      	ldr	r2, [r7, #32]
 80035fc:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <pvPortMalloc+0x258>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	4a1b      	ldr	r2, [pc, #108]	@ (8003678 <pvPortMalloc+0x258>)
 800360a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <pvPortMalloc+0x258>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <pvPortMalloc+0x268>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d203      	bcs.n	8003620 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <pvPortMalloc+0x258>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <pvPortMalloc+0x268>)
 800361e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8003620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003638:	4b14      	ldr	r3, [pc, #80]	@ (800368c <pvPortMalloc+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a13      	ldr	r2, [pc, #76]	@ (800368c <pvPortMalloc+0x26c>)
 8003640:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8003642:	f7ff f855 	bl	80026f0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <pvPortMalloc+0x248>
    __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60bb      	str	r3, [r7, #8]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <pvPortMalloc+0x244>
    return pvReturn;
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800366a:	4618      	mov	r0, r3
 800366c:	3738      	adds	r7, #56	@ 0x38
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20012d90 	.word	0x20012d90
 8003678:	20012d94 	.word	0x20012d94
 800367c:	20012d88 	.word	0x20012d88
 8003680:	20000188 	.word	0x20000188
 8003684:	20012d87 	.word	0x20012d87
 8003688:	20012d98 	.word	0x20012d98
 800368c:	20012d9c 	.word	0x20012d9c

08003690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d064      	beq.n	800376c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036a2:	2308      	movs	r3, #8
 80036a4:	425b      	negs	r3, r3
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4a30      	ldr	r2, [pc, #192]	@ (8003774 <vPortFree+0xe4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d305      	bcc.n	80036c4 <vPortFree+0x34>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003778 <vPortFree+0xe8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d801      	bhi.n	80036c4 <vPortFree+0x34>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <vPortFree+0x36>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <vPortFree+0x52>
    __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	617b      	str	r3, [r7, #20]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <vPortFree+0x72>
    __asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	613b      	str	r3, [r7, #16]
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	e7fd      	b.n	80036fe <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <vPortFree+0x92>
    __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60fb      	str	r3, [r7, #12]
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	e7fd      	b.n	800371e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0fdb      	lsrs	r3, r3, #31
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01c      	beq.n	800376c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003746:	f7fe ffc5 	bl	80026d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <vPortFree+0xec>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a09      	ldr	r2, [pc, #36]	@ (800377c <vPortFree+0xec>)
 8003756:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003758:	69b8      	ldr	r0, [r7, #24]
 800375a:	f000 f86d 	bl	8003838 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800375e:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <vPortFree+0xf0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a06      	ldr	r2, [pc, #24]	@ (8003780 <vPortFree+0xf0>)
 8003766:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003768:	f7fe ffc2 	bl	80026f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000188 	.word	0x20000188
 8003778:	20012d87 	.word	0x20012d87
 800377c:	20012d94 	.word	0x20012d94
 8003780:	20012da0 	.word	0x20012da0

08003784 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800378a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800378e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003790:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <prvHeapInit+0xa0>)
 8003792:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3307      	adds	r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <prvHeapInit+0xa0>)
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <prvHeapInit+0xa4>)
 80037bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <prvHeapInit+0xa4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80037cc:	2208      	movs	r2, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a13      	ldr	r2, [pc, #76]	@ (800382c <prvHeapInit+0xa8>)
 80037e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <prvHeapInit+0xa8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80037ea:	4b10      	ldr	r3, [pc, #64]	@ (800382c <prvHeapInit+0xa8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <prvHeapInit+0xa8>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <prvHeapInit+0xac>)
 800380e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <prvHeapInit+0xb0>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	20000188 	.word	0x20000188
 8003828:	20012d88 	.word	0x20012d88
 800382c:	20012d90 	.word	0x20012d90
 8003830:	20012d98 	.word	0x20012d98
 8003834:	20012d94 	.word	0x20012d94

08003838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003840:	4b36      	ldr	r3, [pc, #216]	@ (800391c <prvInsertBlockIntoFreeList+0xe4>)
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e002      	b.n	800384c <prvInsertBlockIntoFreeList+0x14>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d8f7      	bhi.n	8003846 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a30      	ldr	r2, [pc, #192]	@ (800391c <prvInsertBlockIntoFreeList+0xe4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a2f      	ldr	r2, [pc, #188]	@ (8003920 <prvInsertBlockIntoFreeList+0xe8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d305      	bcc.n	8003872 <prvInsertBlockIntoFreeList+0x3a>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4a2e      	ldr	r2, [pc, #184]	@ (8003924 <prvInsertBlockIntoFreeList+0xec>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d801      	bhi.n	8003872 <prvInsertBlockIntoFreeList+0x3a>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <prvInsertBlockIntoFreeList+0x3c>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60fb      	str	r3, [r7, #12]
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d108      	bne.n	80038b4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	441a      	add	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	441a      	add	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d118      	bne.n	80038fa <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b16      	ldr	r3, [pc, #88]	@ (8003928 <prvInsertBlockIntoFreeList+0xf0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d00d      	beq.n	80038f0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	441a      	add	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e008      	b.n	8003902 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <prvInsertBlockIntoFreeList+0xf0>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e003      	b.n	8003902 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d002      	beq.n	8003910 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20012d88 	.word	0x20012d88
 8003920:	20000188 	.word	0x20000188
 8003924:	20012d87 	.word	0x20012d87
 8003928:	20012d90 	.word	0x20012d90

0800392c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003930:	4803      	ldr	r0, [pc, #12]	@ (8003940 <_cbSendSystemDesc+0x14>)
 8003932:	f001 fd15 	bl	8005360 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003936:	4803      	ldr	r0, [pc, #12]	@ (8003944 <_cbSendSystemDesc+0x18>)
 8003938:	f001 fd12 	bl	8005360 <SEGGER_SYSVIEW_SendSysDesc>
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08005ba8 	.word	0x08005ba8
 8003944:	08005bdc 	.word	0x08005bdc

08003948 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <SEGGER_SYSVIEW_Conf+0x20>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <SEGGER_SYSVIEW_Conf+0x20>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <SEGGER_SYSVIEW_Conf+0x24>)
 8003956:	4a06      	ldr	r2, [pc, #24]	@ (8003970 <SEGGER_SYSVIEW_Conf+0x28>)
 8003958:	f001 f986 	bl	8004c68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800395c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003960:	f001 f9c6 	bl	8004cf0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000000 	.word	0x20000000
 800396c:	0800392d 	.word	0x0800392d
 8003970:	08005c78 	.word	0x08005c78

08003974 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	e033      	b.n	80039e8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003980:	491e      	ldr	r1, [pc, #120]	@ (80039fc <_cbSendTaskList+0x88>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	491a      	ldr	r1, [pc, #104]	@ (80039fc <_cbSendTaskList+0x88>)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3304      	adds	r3, #4
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	4c16      	ldr	r4, [pc, #88]	@ (80039fc <_cbSendTaskList+0x88>)
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4423      	add	r3, r4
 80039b0:	3308      	adds	r3, #8
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	4d11      	ldr	r5, [pc, #68]	@ (80039fc <_cbSendTaskList+0x88>)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	442b      	add	r3, r5
 80039c2:	330c      	adds	r3, #12
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	4e0d      	ldr	r6, [pc, #52]	@ (80039fc <_cbSendTaskList+0x88>)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4433      	add	r3, r6
 80039d4:	3310      	adds	r3, #16
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	462b      	mov	r3, r5
 80039dc:	4622      	mov	r2, r4
 80039de:	f000 f8bd 	bl	8003b5c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3301      	adds	r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <_cbSendTaskList+0x8c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3c6      	bcc.n	8003980 <_cbSendTaskList+0xc>
  }
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fc:	20012da4 	.word	0x20012da4
 8003a00:	20012e44 	.word	0x20012e44

08003a04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003a0c:	f7fe ff82 	bl	8002914 <xTaskGetTickCountFromISR>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2200      	movs	r2, #0
 8003a14:	469a      	mov	sl, r3
 8003a16:	4693      	mov	fp, r2
 8003a18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	f04f 0a00 	mov.w	sl, #0
 8003a28:	f04f 0b00 	mov.w	fp, #0
 8003a2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a38:	4652      	mov	r2, sl
 8003a3a:	465b      	mov	r3, fp
 8003a3c:	1a14      	subs	r4, r2, r0
 8003a3e:	eb63 0501 	sbc.w	r5, r3, r1
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	00ab      	lsls	r3, r5, #2
 8003a4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a50:	00a2      	lsls	r2, r4, #2
 8003a52:	4614      	mov	r4, r2
 8003a54:	461d      	mov	r5, r3
 8003a56:	eb14 0800 	adds.w	r8, r4, r0
 8003a5a:	eb45 0901 	adc.w	r9, r5, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a8c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	492b      	ldr	r1, [pc, #172]	@ (8003b4c <SYSVIEW_AddTask+0xc0>)
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f001 fffa 	bl	8005a98 <memcmp>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d04b      	beq.n	8003b42 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003aaa:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d903      	bls.n	8003aba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003ab2:	4828      	ldr	r0, [pc, #160]	@ (8003b54 <SYSVIEW_AddTask+0xc8>)
 8003ab4:	f001 ff94 	bl	80059e0 <SEGGER_SYSVIEW_Warn>
    return;
 8003ab8:	e044      	b.n	8003b44 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003aba:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4926      	ldr	r1, [pc, #152]	@ (8003b58 <SYSVIEW_AddTask+0xcc>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4921      	ldr	r1, [pc, #132]	@ (8003b58 <SYSVIEW_AddTask+0xcc>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3304      	adds	r3, #4
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	491b      	ldr	r1, [pc, #108]	@ (8003b58 <SYSVIEW_AddTask+0xcc>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3308      	adds	r3, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4916      	ldr	r1, [pc, #88]	@ (8003b58 <SYSVIEW_AddTask+0xcc>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4910      	ldr	r1, [pc, #64]	@ (8003b58 <SYSVIEW_AddTask+0xcc>)
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3310      	adds	r3, #16
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	4a08      	ldr	r2, [pc, #32]	@ (8003b50 <SYSVIEW_AddTask+0xc4>)
 8003b2e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f80e 	bl	8003b5c <SYSVIEW_SendTaskInfo>
 8003b40:	e000      	b.n	8003b44 <SYSVIEW_AddTask+0xb8>
    return;
 8003b42:	bf00      	nop

}
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08005bec 	.word	0x08005bec
 8003b50:	20012e44 	.word	0x20012e44
 8003b54:	08005bf4 	.word	0x08005bf4
 8003b58:	20012da4 	.word	0x20012da4

08003b5c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	@ 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	2218      	movs	r2, #24
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 ffa0 	bl	8005ab8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 faed 	bl	8005170 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b96:	bf00      	nop
 8003b98:	3728      	adds	r7, #40	@ 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <USART2_IRQHandler+0x80>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d011      	beq.n	8003bda <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <USART2_IRQHandler+0x84>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 030b 	and.w	r3, r3, #11
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <USART2_IRQHandler+0x88>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003bd0:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <USART2_IRQHandler+0x88>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01a      	beq.n	8003c1a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003be4:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <USART2_IRQHandler+0x8c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d015      	beq.n	8003c18 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <USART2_IRQHandler+0x8c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1dfa      	adds	r2, r7, #7
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4798      	blx	r3
 8003bf6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <USART2_IRQHandler+0x90>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a0b      	ldr	r2, [pc, #44]	@ (8003c30 <USART2_IRQHandler+0x90>)
 8003c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e006      	b.n	8003c1a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <USART2_IRQHandler+0x80>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003c10:	79fa      	ldrb	r2, [r7, #7]
 8003c12:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <USART2_IRQHandler+0x84>)
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e000      	b.n	8003c1a <USART2_IRQHandler+0x7a>
      return;
 8003c18:	bf00      	nop
    }
  }
}
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40004404 	.word	0x40004404
 8003c28:	20012e48 	.word	0x20012e48
 8003c2c:	20012e4c 	.word	0x20012e4c
 8003c30:	4000440c 	.word	0x4000440c

08003c34 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003c38:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a04      	ldr	r2, [pc, #16]	@ (8003c50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	4000440c 	.word	0x4000440c

08003c54 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c5a:	4b26      	ldr	r3, [pc, #152]	@ (8003cf4 <_DoInit+0xa0>)
 8003c5c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c5e:	22a8      	movs	r2, #168	@ 0xa8
 8003c60:	2100      	movs	r1, #0
 8003c62:	6838      	ldr	r0, [r7, #0]
 8003c64:	f001 ff28 	bl	8005ab8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2203      	movs	r2, #3
 8003c72:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <_DoInit+0xa4>)
 8003c78:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cfc <_DoInit+0xa8>)
 8003c7e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c86:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <_DoInit+0xa4>)
 8003c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <_DoInit+0xac>)
 8003ca4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cbe:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	e00c      	b.n	8003ce2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1c3 030f 	rsb	r3, r3, #15
 8003cce:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <_DoInit+0xb0>)
 8003cd0:	5cd1      	ldrb	r1, [r2, r3]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	460a      	mov	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d9ef      	bls.n	8003cc8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ce8:	f3bf 8f5f 	dmb	sy
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20012e50 	.word	0x20012e50
 8003cf8:	08005c44 	.word	0x08005c44
 8003cfc:	20012ef8 	.word	0x20012ef8
 8003d00:	200132f8 	.word	0x200132f8
 8003d04:	08005c80 	.word	0x08005c80

08003d08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	@ 0x30
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d14:	4b3e      	ldr	r3, [pc, #248]	@ (8003e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b53      	cmp	r3, #83	@ 0x53
 8003d20:	d001      	beq.n	8003d26 <SEGGER_RTT_ReadNoLock+0x1e>
 8003d22:	f7ff ff97 	bl	8003c54 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	3360      	adds	r3, #96	@ 0x60
 8003d32:	4a37      	ldr	r2, [pc, #220]	@ (8003e10 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d34:	4413      	add	r3, r2
 8003d36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d92b      	bls.n	8003dac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4293      	cmp	r3, r2
 8003d64:	bf28      	it	cs
 8003d66:	4613      	movcs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d70:	4413      	add	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	6939      	ldr	r1, [r7, #16]
 8003d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d7a:	f001 fec9 	bl	8005b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4413      	add	r3, r2
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d101      	bne.n	8003dac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf28      	it	cs
 8003dbc:	4613      	movcs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d019      	beq.n	8003dfa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	4413      	add	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6939      	ldr	r1, [r7, #16]
 8003dd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dd6:	f001 fe9b 	bl	8005b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4413      	add	r3, r2
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4413      	add	r3, r2
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e04:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	@ 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20012e50 	.word	0x20012e50

08003e14 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e22:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b53      	cmp	r3, #83	@ 0x53
 8003e2e:	d001      	beq.n	8003e34 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e30:	f7ff ff10 	bl	8003c54 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e34:	f3ef 8311 	mrs	r3, BASEPRI
 8003e38:	f04f 0120 	mov.w	r1, #32
 8003e3c:	f381 8811 	msr	BASEPRI, r1
 8003e40:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e42:	4b35      	ldr	r3, [pc, #212]	@ (8003f18 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e44:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	dbeb      	blt.n	8003e4a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e72:	e000      	b.n	8003e76 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e74:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	da3f      	bge.n	8003f00 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e80:	6939      	ldr	r1, [r7, #16]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	440b      	add	r3, r1
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e94:	6939      	ldr	r1, [r7, #16]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003eaa:	6939      	ldr	r1, [r7, #16]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3320      	adds	r3, #32
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3324      	adds	r3, #36	@ 0x24
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	332c      	adds	r3, #44	@ 0x2c
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003efa:	f3bf 8f5f 	dmb	sy
 8003efe:	e002      	b.n	8003f06 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20012e50 	.word	0x20012e50

08003f1c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f2a:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b53      	cmp	r3, #83	@ 0x53
 8003f36:	d001      	beq.n	8003f3c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f38:	f7ff fe8c 	bl	8003c54 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f3e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d82c      	bhi.n	8003fa0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f46:	f3ef 8311 	mrs	r3, BASEPRI
 8003f4a:	f04f 0120 	mov.w	r1, #32
 8003f4e:	f381 8811 	msr	BASEPRI, r1
 8003f52:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	3360      	adds	r3, #96	@ 0x60
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	4413      	add	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9e:	e002      	b.n	8003fa6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3728      	adds	r7, #40	@ 0x28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20012e50 	.word	0x20012e50

08003fb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	60fa      	str	r2, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e022      	b.n	8004018 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	60fa      	str	r2, [r7, #12]
 8003fdc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	@ 0x80
 8003fe2:	d90a      	bls.n	8003ffa <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003fe8:	e007      	b.n	8003ffa <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	1c53      	adds	r3, r2, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	60f9      	str	r1, [r7, #12]
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <_EncodeStr+0x58>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ee      	bne.n	8003fea <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b2da      	uxtb	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3307      	adds	r3, #7
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004046:	4b34      	ldr	r3, [pc, #208]	@ (8004118 <_HandleIncomingPacket+0xd8>)
 8004048:	7e1b      	ldrb	r3, [r3, #24]
 800404a:	4618      	mov	r0, r3
 800404c:	1cfb      	adds	r3, r7, #3
 800404e:	2201      	movs	r2, #1
 8004050:	4619      	mov	r1, r3
 8004052:	f7ff fe59 	bl	8003d08 <SEGGER_RTT_ReadNoLock>
 8004056:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d057      	beq.n	800410e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	2b80      	cmp	r3, #128	@ 0x80
 8004062:	d031      	beq.n	80040c8 <_HandleIncomingPacket+0x88>
 8004064:	2b80      	cmp	r3, #128	@ 0x80
 8004066:	dc40      	bgt.n	80040ea <_HandleIncomingPacket+0xaa>
 8004068:	2b07      	cmp	r3, #7
 800406a:	dc15      	bgt.n	8004098 <_HandleIncomingPacket+0x58>
 800406c:	2b00      	cmp	r3, #0
 800406e:	dd3c      	ble.n	80040ea <_HandleIncomingPacket+0xaa>
 8004070:	3b01      	subs	r3, #1
 8004072:	2b06      	cmp	r3, #6
 8004074:	d839      	bhi.n	80040ea <_HandleIncomingPacket+0xaa>
 8004076:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <_HandleIncomingPacket+0x3c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800409f 	.word	0x0800409f
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040ab 	.word	0x080040ab
 8004088:	080040b1 	.word	0x080040b1
 800408c:	080040b7 	.word	0x080040b7
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040c3 	.word	0x080040c3
 8004098:	2b7f      	cmp	r3, #127	@ 0x7f
 800409a:	d033      	beq.n	8004104 <_HandleIncomingPacket+0xc4>
 800409c:	e025      	b.n	80040ea <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800409e:	f000 feeb 	bl	8004e78 <SEGGER_SYSVIEW_Start>
      break;
 80040a2:	e034      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040a4:	f000 ffa4 	bl	8004ff0 <SEGGER_SYSVIEW_Stop>
      break;
 80040a8:	e031      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040aa:	f001 f97d 	bl	80053a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040ae:	e02e      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040b0:	f001 f942 	bl	8005338 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040b4:	e02b      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040b6:	f000 ffc1 	bl	800503c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80040ba:	e028      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80040bc:	f001 fc3e 	bl	800593c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040c0:	e025      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040c2:	f001 fc1d 	bl	8005900 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040c6:	e022      	b.n	800410e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <_HandleIncomingPacket+0xd8>)
 80040ca:	7e1b      	ldrb	r3, [r3, #24]
 80040cc:	4618      	mov	r0, r3
 80040ce:	1cfb      	adds	r3, r7, #3
 80040d0:	2201      	movs	r2, #1
 80040d2:	4619      	mov	r1, r3
 80040d4:	f7ff fe18 	bl	8003d08 <SEGGER_RTT_ReadNoLock>
 80040d8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d013      	beq.n	8004108 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fb82 	bl	80057ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80040e8:	e00e      	b.n	8004108 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da0c      	bge.n	800410c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <_HandleIncomingPacket+0xd8>)
 80040f4:	7e1b      	ldrb	r3, [r3, #24]
 80040f6:	4618      	mov	r0, r3
 80040f8:	1cfb      	adds	r3, r7, #3
 80040fa:	2201      	movs	r2, #1
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7ff fe03 	bl	8003d08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004102:	e003      	b.n	800410c <_HandleIncomingPacket+0xcc>
      break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <_HandleIncomingPacket+0xce>
      break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <_HandleIncomingPacket+0xce>
      break;
 800410c:	bf00      	nop
    }
  }
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20013b10 	.word	0x20013b10

0800411c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	@ 0x30
 8004120:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004122:	2301      	movs	r3, #1
 8004124:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	3301      	adds	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004130:	4b32      	ldr	r3, [pc, #200]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004136:	e00b      	b.n	8004150 <_TrySendOverflowPacket+0x34>
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	b2da      	uxtb	r2, r3
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004142:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414c:	09db      	lsrs	r3, r3, #7
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004152:	2b7f      	cmp	r3, #127	@ 0x7f
 8004154:	d8f0      	bhi.n	8004138 <_TrySendOverflowPacket+0x1c>
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800415c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004164:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004166:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <_TrySendOverflowPacket+0xe4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 800416c:	4b23      	ldr	r3, [pc, #140]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	e00b      	b.n	8004198 <_TrySendOverflowPacket+0x7c>
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	6279      	str	r1, [r7, #36]	@ 0x24
 800418a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b7f      	cmp	r3, #127	@ 0x7f
 800419c:	d8f0      	bhi.n	8004180 <_TrySendOverflowPacket+0x64>
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80041ae:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	4618      	mov	r0, r3
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	f7fc f806 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041c4:	4603      	mov	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80041c8:	f7ff fd34 	bl	8003c34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041d2:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80041d8:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e004      	b.n	80041f0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80041e6:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a03      	ldr	r2, [pc, #12]	@ (80041fc <_TrySendOverflowPacket+0xe0>)
 80041ee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80041f0:	693b      	ldr	r3, [r7, #16]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3730      	adds	r7, #48	@ 0x30
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20013b10 	.word	0x20013b10
 8004200:	e0001004 	.word	0xe0001004

08004204 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004210:	4b96      	ldr	r3, [pc, #600]	@ (800446c <_SendPacket+0x268>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d010      	beq.n	800423a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004218:	4b94      	ldr	r3, [pc, #592]	@ (800446c <_SendPacket+0x268>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8130 	beq.w	8004482 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004222:	4b92      	ldr	r3, [pc, #584]	@ (800446c <_SendPacket+0x268>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d109      	bne.n	800423e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800422a:	f7ff ff77 	bl	800411c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800422e:	4b8f      	ldr	r3, [pc, #572]	@ (800446c <_SendPacket+0x268>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	f040 8127 	bne.w	8004486 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004238:	e001      	b.n	800423e <_SendPacket+0x3a>
    goto Send;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <_SendPacket+0x3c>
Send:
 800423e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b1f      	cmp	r3, #31
 8004244:	d809      	bhi.n	800425a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004246:	4b89      	ldr	r3, [pc, #548]	@ (800446c <_SendPacket+0x268>)
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f040 8118 	bne.w	800448a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b17      	cmp	r3, #23
 800425e:	d807      	bhi.n	8004270 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e0c4      	b.n	80043fa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b7f      	cmp	r3, #127	@ 0x7f
 800427c:	d912      	bls.n	80042a4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	09da      	lsrs	r2, r3, #7
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b01      	subs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	3a01      	subs	r2, #1
 8004296:	60fa      	str	r2, [r7, #12]
 8004298:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e006      	b.n	80042b2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b7e      	cmp	r3, #126	@ 0x7e
 80042b6:	d807      	bhi.n	80042c8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e098      	b.n	80043fa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ce:	d212      	bcs.n	80042f6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	09da      	lsrs	r2, r3, #7
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	3a01      	subs	r2, #1
 80042e8:	60fa      	str	r2, [r7, #12]
 80042ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e081      	b.n	80043fa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fc:	d21d      	bcs.n	800433a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0b9a      	lsrs	r2, r3, #14
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b01      	subs	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	09db      	lsrs	r3, r3, #7
 8004312:	b2db      	uxtb	r3, r3
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	3a01      	subs	r2, #1
 8004318:	60fa      	str	r2, [r7, #12]
 800431a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	3a01      	subs	r2, #1
 800432c:	60fa      	str	r2, [r7, #12]
 800432e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e05f      	b.n	80043fa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004340:	d228      	bcs.n	8004394 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0d5a      	lsrs	r2, r3, #21
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b01      	subs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0b9b      	lsrs	r3, r3, #14
 8004356:	b2db      	uxtb	r3, r3
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	3a01      	subs	r2, #1
 800435c:	60fa      	str	r2, [r7, #12]
 800435e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	09db      	lsrs	r3, r3, #7
 800436c:	b2db      	uxtb	r3, r3
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	3a01      	subs	r2, #1
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	3a01      	subs	r2, #1
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e032      	b.n	80043fa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0f1a      	lsrs	r2, r3, #28
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0d5b      	lsrs	r3, r3, #21
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	3a01      	subs	r2, #1
 80043ae:	60fa      	str	r2, [r7, #12]
 80043b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0b9b      	lsrs	r3, r3, #14
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	3a01      	subs	r2, #1
 80043c4:	60fa      	str	r2, [r7, #12]
 80043c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	09db      	lsrs	r3, r3, #7
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	3a01      	subs	r2, #1
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	3a01      	subs	r2, #1
 80043ee:	60fa      	str	r2, [r7, #12]
 80043f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <_SendPacket+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004400:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <_SendPacket+0x268>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	e00b      	b.n	800442c <_SendPacket+0x228>
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	6279      	str	r1, [r7, #36]	@ 0x24
 800441e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	09db      	lsrs	r3, r3, #7
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004430:	d8f0      	bhi.n	8004414 <_SendPacket+0x210>
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	627a      	str	r2, [r7, #36]	@ 0x24
 8004438:	6a3a      	ldr	r2, [r7, #32]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <_SendPacket+0x268>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	4618      	mov	r0, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	461a      	mov	r2, r3
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	f7fb febd 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004456:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004458:	f7ff fbec 	bl	8003c34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004462:	4a02      	ldr	r2, [pc, #8]	@ (800446c <_SendPacket+0x268>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	60d3      	str	r3, [r2, #12]
 8004468:	e010      	b.n	800448c <_SendPacket+0x288>
 800446a:	bf00      	nop
 800446c:	20013b10 	.word	0x20013b10
 8004470:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004474:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <_SendPacket+0x2d8>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <_SendPacket+0x2d8>)
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e004      	b.n	800448c <_SendPacket+0x288>
    goto SendDone;
 8004482:	bf00      	nop
 8004484:	e002      	b.n	800448c <_SendPacket+0x288>
      goto SendDone;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <_SendPacket+0x288>
      goto SendDone;
 800448a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800448c:	4b13      	ldr	r3, [pc, #76]	@ (80044dc <_SendPacket+0x2d8>)
 800448e:	7e1b      	ldrb	r3, [r3, #24]
 8004490:	4619      	mov	r1, r3
 8004492:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <_SendPacket+0x2dc>)
 8004494:	460b      	mov	r3, r1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	440b      	add	r3, r1
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	336c      	adds	r3, #108	@ 0x6c
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <_SendPacket+0x2d8>)
 80044a4:	7e1b      	ldrb	r3, [r3, #24]
 80044a6:	4618      	mov	r0, r3
 80044a8:	490d      	ldr	r1, [pc, #52]	@ (80044e0 <_SendPacket+0x2dc>)
 80044aa:	4603      	mov	r3, r0
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4403      	add	r3, r0
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	440b      	add	r3, r1
 80044b4:	3370      	adds	r3, #112	@ 0x70
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d00b      	beq.n	80044d4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <_SendPacket+0x2d8>)
 80044be:	789b      	ldrb	r3, [r3, #2]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <_SendPacket+0x2d8>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044ca:	f7ff fdb9 	bl	8004040 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044ce:	4b03      	ldr	r3, [pc, #12]	@ (80044dc <_SendPacket+0x2d8>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044d4:	bf00      	nop
 80044d6:	3728      	adds	r7, #40	@ 0x28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20013b10 	.word	0x20013b10
 80044e0:	20012e50 	.word	0x20012e50

080044e4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	2b80      	cmp	r3, #128	@ 0x80
 80044fc:	d80a      	bhi.n	8004514 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6051      	str	r1, [r2, #4]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b80      	cmp	r3, #128	@ 0x80
 800451a:	d15a      	bne.n	80045d2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	e00b      	b.n	8004556 <_StoreChar+0x72>
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1c59      	adds	r1, r3, #1
 8004546:	6279      	str	r1, [r7, #36]	@ 0x24
 8004548:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	09db      	lsrs	r3, r3, #7
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	2b7f      	cmp	r3, #127	@ 0x7f
 800455a:	d8f0      	bhi.n	800453e <_StoreChar+0x5a>
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	627a      	str	r2, [r7, #36]	@ 0x24
 8004562:	6a3a      	ldr	r2, [r7, #32]
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e00b      	b.n	800458e <_StoreChar+0xaa>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	1c59      	adds	r1, r3, #1
 800457e:	61f9      	str	r1, [r7, #28]
 8004580:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	09db      	lsrs	r3, r3, #7
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b7f      	cmp	r3, #127	@ 0x7f
 8004592:	d8f0      	bhi.n	8004576 <_StoreChar+0x92>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	61fa      	str	r2, [r7, #28]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	221a      	movs	r2, #26
 80045aa:	6939      	ldr	r1, [r7, #16]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fe29 	bl	8004204 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fd35 	bl	8004026 <_PreparePacket>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]
  }
}
 80045d2:	bf00      	nop
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80045ee:	2301      	movs	r3, #1
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045f6:	e007      	b.n	8004608 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	623b      	str	r3, [r7, #32]
    Width++;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d2f3      	bcs.n	80045f8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d901      	bls.n	800461c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d000      	beq.n	8004628 <_PrintUnsigned+0x4c>
 8004626:	e01f      	b.n	8004668 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01c      	beq.n	8004668 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <_PrintUnsigned+0x68>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <_PrintUnsigned+0x68>
        c = '0';
 800463e:	2330      	movs	r3, #48	@ 0x30
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e001      	b.n	8004648 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004644:	2320      	movs	r3, #32
 8004646:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004648:	e007      	b.n	800465a <_PrintUnsigned+0x7e>
        FieldWidth--;
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	3b01      	subs	r3, #1
 800464e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004650:	7efb      	ldrb	r3, [r7, #27]
 8004652:	4619      	mov	r1, r3
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff ff45 	bl	80044e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <_PrintUnsigned+0x8c>
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	429a      	cmp	r2, r3
 8004666:	d3f0      	bcc.n	800464a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d903      	bls.n	8004676 <_PrintUnsigned+0x9a>
      NumDigits--;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	3b01      	subs	r3, #1
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	e009      	b.n	800468a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d200      	bcs.n	800468a <_PrintUnsigned+0xae>
        break;
 8004688:	e005      	b.n	8004696 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004694:	e7e8      	b.n	8004668 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <_PrintUnsigned+0x128>)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ff13 	bl	80044e4 <_StoreChar>
    Digit /= Base;
 80046be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e3      	bne.n	8004696 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80046ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00e      	beq.n	80046fc <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046de:	e006      	b.n	80046ee <_PrintUnsigned+0x112>
        FieldWidth--;
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	3b01      	subs	r3, #1
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80046e6:	2120      	movs	r1, #32
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff fefb 	bl	80044e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <_PrintUnsigned+0x120>
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3f1      	bcc.n	80046e0 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80046fc:	bf00      	nop
 80046fe:	3728      	adds	r7, #40	@ 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08005ca0 	.word	0x08005ca0

08004708 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	bfb8      	it	lt
 800471c:	425b      	neglt	r3, r3
 800471e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004724:	e007      	b.n	8004736 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	fb92 f3f3 	sdiv	r3, r2, r3
 800472e:	613b      	str	r3, [r7, #16]
    Width++;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3301      	adds	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	429a      	cmp	r2, r3
 800473c:	daf3      	bge.n	8004726 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	429a      	cmp	r2, r3
 8004744:	d901      	bls.n	800474a <_PrintInt+0x42>
    Width = NumDigits;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <_PrintInt+0x5e>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db04      	blt.n	8004760 <_PrintInt+0x58>
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <_PrintInt+0x5e>
    FieldWidth--;
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	3b01      	subs	r3, #1
 8004764:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <_PrintInt+0x6e>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <_PrintInt+0x9c>
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004786:	e006      	b.n	8004796 <_PrintInt+0x8e>
        FieldWidth--;
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	3b01      	subs	r3, #1
 800478c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800478e:	2120      	movs	r1, #32
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fea7 	bl	80044e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <_PrintInt+0x9c>
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3f1      	bcc.n	8004788 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da07      	bge.n	80047ba <_PrintInt+0xb2>
    v = -v;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	425b      	negs	r3, r3
 80047ae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80047b0:	212d      	movs	r1, #45	@ 0x2d
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff fe96 	bl	80044e4 <_StoreChar>
 80047b8:	e008      	b.n	80047cc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80047c4:	212b      	movs	r1, #43	@ 0x2b
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fe8c 	bl	80044e4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d019      	beq.n	800480a <_PrintInt+0x102>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d114      	bne.n	800480a <_PrintInt+0x102>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d111      	bne.n	800480a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047ec:	e006      	b.n	80047fc <_PrintInt+0xf4>
        FieldWidth--;
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80047f4:	2130      	movs	r1, #48	@ 0x30
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7ff fe74 	bl	80044e4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <_PrintInt+0x102>
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3f1      	bcc.n	80047ee <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fedf 	bl	80045dc <_PrintUnsigned>
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b098      	sub	sp, #96	@ 0x60
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004834:	f3ef 8311 	mrs	r3, BASEPRI
 8004838:	f04f 0120 	mov.w	r1, #32
 800483c:	f381 8811 	msr	BASEPRI, r1
 8004840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004842:	48b7      	ldr	r0, [pc, #732]	@ (8004b20 <_VPrintTarget+0x2f8>)
 8004844:	f7ff fbef 	bl	8004026 <_PreparePacket>
 8004848:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800484a:	4bb5      	ldr	r3, [pc, #724]	@ (8004b20 <_VPrintTarget+0x2f8>)
 800484c:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3301      	adds	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800486e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 81a8 	beq.w	8004bc8 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800487c:	2b25      	cmp	r3, #37	@ 0x25
 800487e:	f040 8195 	bne.w	8004bac <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004882:	2300      	movs	r3, #0
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004892:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004896:	3b23      	subs	r3, #35	@ 0x23
 8004898:	2b0d      	cmp	r3, #13
 800489a:	d83f      	bhi.n	800491c <_VPrintTarget+0xf4>
 800489c:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <_VPrintTarget+0x7c>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	0800490d 	.word	0x0800490d
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800491d 	.word	0x0800491d
 80048b0:	0800491d 	.word	0x0800491d
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800491d 	.word	0x0800491d
 80048bc:	0800491d 	.word	0x0800491d
 80048c0:	0800491d 	.word	0x0800491d
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	0800491d 	.word	0x0800491d
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	080048ed 	.word	0x080048ed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80048dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e01a      	b.n	8004922 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80048ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e012      	b.n	8004922 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80048fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e00a      	b.n	8004922 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800490c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800490e:	f043 0308 	orr.w	r3, r3, #8
 8004912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3301      	adds	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e002      	b.n	8004922 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800491c:	2300      	movs	r3, #0
 800491e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004920:	bf00      	nop
        }
      } while (v);
 8004922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1b0      	bne.n	800488a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004928:	2300      	movs	r3, #0
 800492a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004938:	2b2f      	cmp	r3, #47	@ 0x2f
 800493a:	d912      	bls.n	8004962 <_VPrintTarget+0x13a>
 800493c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004940:	2b39      	cmp	r3, #57	@ 0x39
 8004942:	d80e      	bhi.n	8004962 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800494a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	461a      	mov	r2, r3
 8004956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800495a:	4413      	add	r3, r2
 800495c:	3b30      	subs	r3, #48	@ 0x30
 800495e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004960:	e7e4      	b.n	800492c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004962:	2300      	movs	r3, #0
 8004964:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800496e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004972:	2b2e      	cmp	r3, #46	@ 0x2e
 8004974:	d11d      	bne.n	80049b2 <_VPrintTarget+0x18a>
        sFormat++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004988:	2b2f      	cmp	r3, #47	@ 0x2f
 800498a:	d912      	bls.n	80049b2 <_VPrintTarget+0x18a>
 800498c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004990:	2b39      	cmp	r3, #57	@ 0x39
 8004992:	d80e      	bhi.n	80049b2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800499a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	461a      	mov	r2, r3
 80049a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049aa:	4413      	add	r3, r2
 80049ac:	3b30      	subs	r3, #48	@ 0x30
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80049b0:	e7e4      	b.n	800497c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80049ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049be:	2b6c      	cmp	r3, #108	@ 0x6c
 80049c0:	d003      	beq.n	80049ca <_VPrintTarget+0x1a2>
 80049c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049c6:	2b68      	cmp	r3, #104	@ 0x68
 80049c8:	d107      	bne.n	80049da <_VPrintTarget+0x1b2>
          c = *sFormat;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80049d8:	e7ef      	b.n	80049ba <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80049da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049de:	2b25      	cmp	r3, #37	@ 0x25
 80049e0:	f000 80d8 	beq.w	8004b94 <_VPrintTarget+0x36c>
 80049e4:	2b25      	cmp	r3, #37	@ 0x25
 80049e6:	f2c0 80dc 	blt.w	8004ba2 <_VPrintTarget+0x37a>
 80049ea:	2b78      	cmp	r3, #120	@ 0x78
 80049ec:	f300 80d9 	bgt.w	8004ba2 <_VPrintTarget+0x37a>
 80049f0:	2b58      	cmp	r3, #88	@ 0x58
 80049f2:	f2c0 80d6 	blt.w	8004ba2 <_VPrintTarget+0x37a>
 80049f6:	3b58      	subs	r3, #88	@ 0x58
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	f200 80d2 	bhi.w	8004ba2 <_VPrintTarget+0x37a>
 80049fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <_VPrintTarget+0x1dc>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004afb 	.word	0x08004afb
 8004a08:	08004ba3 	.word	0x08004ba3
 8004a0c:	08004ba3 	.word	0x08004ba3
 8004a10:	08004ba3 	.word	0x08004ba3
 8004a14:	08004ba3 	.word	0x08004ba3
 8004a18:	08004ba3 	.word	0x08004ba3
 8004a1c:	08004ba3 	.word	0x08004ba3
 8004a20:	08004ba3 	.word	0x08004ba3
 8004a24:	08004ba3 	.word	0x08004ba3
 8004a28:	08004ba3 	.word	0x08004ba3
 8004a2c:	08004ba3 	.word	0x08004ba3
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004aaf 	.word	0x08004aaf
 8004a38:	08004ba3 	.word	0x08004ba3
 8004a3c:	08004ba3 	.word	0x08004ba3
 8004a40:	08004ba3 	.word	0x08004ba3
 8004a44:	08004ba3 	.word	0x08004ba3
 8004a48:	08004ba3 	.word	0x08004ba3
 8004a4c:	08004ba3 	.word	0x08004ba3
 8004a50:	08004ba3 	.word	0x08004ba3
 8004a54:	08004ba3 	.word	0x08004ba3
 8004a58:	08004ba3 	.word	0x08004ba3
 8004a5c:	08004ba3 	.word	0x08004ba3
 8004a60:	08004ba3 	.word	0x08004ba3
 8004a64:	08004b6f 	.word	0x08004b6f
 8004a68:	08004ba3 	.word	0x08004ba3
 8004a6c:	08004ba3 	.word	0x08004ba3
 8004a70:	08004b25 	.word	0x08004b25
 8004a74:	08004ba3 	.word	0x08004ba3
 8004a78:	08004ad5 	.word	0x08004ad5
 8004a7c:	08004ba3 	.word	0x08004ba3
 8004a80:	08004ba3 	.word	0x08004ba3
 8004a84:	08004afb 	.word	0x08004afb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1d19      	adds	r1, r3, #4
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6011      	str	r1, [r2, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004a9c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004aa0:	f107 0310 	add.w	r3, r7, #16
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fd1c 	bl	80044e4 <_StoreChar>
        break;
 8004aac:	e07a      	b.n	8004ba4 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6011      	str	r1, [r2, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004abc:	f107 0010 	add.w	r0, r7, #16
 8004ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aca:	220a      	movs	r2, #10
 8004acc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ace:	f7ff fe1b 	bl	8004708 <_PrintInt>
        break;
 8004ad2:	e067      	b.n	8004ba4 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1d19      	adds	r1, r3, #4
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ae2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ae4:	f107 0010 	add.w	r0, r7, #16
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af2:	220a      	movs	r2, #10
 8004af4:	f7ff fd72 	bl	80045dc <_PrintUnsigned>
        break;
 8004af8:	e054      	b.n	8004ba4 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1d19      	adds	r1, r3, #4
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6011      	str	r1, [r2, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004b08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b0a:	f107 0010 	add.w	r0, r7, #16
 8004b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b18:	2210      	movs	r2, #16
 8004b1a:	f7ff fd5f 	bl	80045dc <_PrintUnsigned>
        break;
 8004b1e:	e041      	b.n	8004ba4 <_VPrintTarget+0x37c>
 8004b20:	20013b40 	.word	0x20013b40
      case 's':
        s = va_arg(*pParamList, const char*);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <_VPrintTarget+0x314>
          s = "(null)";
 8004b38:	4b4a      	ldr	r3, [pc, #296]	@ (8004c64 <_VPrintTarget+0x43c>)
 8004b3a:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b46:	3301      	adds	r3, #1
 8004b48:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004b52:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fcc1 	bl	80044e4 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b66:	d9e9      	bls.n	8004b3c <_VPrintTarget+0x314>
        break;
 8004b68:	e01c      	b.n	8004ba4 <_VPrintTarget+0x37c>
            break;
 8004b6a:	bf00      	nop
        break;
 8004b6c:	e01a      	b.n	8004ba4 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1d19      	adds	r1, r3, #4
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6011      	str	r1, [r2, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b7e:	f107 0010 	add.w	r0, r7, #16
 8004b82:	2300      	movs	r3, #0
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	2308      	movs	r3, #8
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	f7ff fd25 	bl	80045dc <_PrintUnsigned>
        break;
 8004b92:	e007      	b.n	8004ba4 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b94:	f107 0310 	add.w	r3, r7, #16
 8004b98:	2125      	movs	r1, #37	@ 0x25
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fca2 	bl	80044e4 <_StoreChar>
        break;
 8004ba0:	e000      	b.n	8004ba4 <_VPrintTarget+0x37c>
      default:
        break;
 8004ba2:	bf00      	nop
      }
      sFormat++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e007      	b.n	8004bbc <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004bac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fc94 	bl	80044e4 <_StoreChar>
    }
  } while (*sFormat);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f ae4d 	bne.w	8004860 <_VPrintTarget+0x38>
 8004bc6:	e000      	b.n	8004bca <_VPrintTarget+0x3a2>
      break;
 8004bc8:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d041      	beq.n	8004c54 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004be0:	e00b      	b.n	8004bfa <_VPrintTarget+0x3d2>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	1c59      	adds	r1, r3, #1
 8004bea:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004bec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	09db      	lsrs	r3, r3, #7
 8004bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bfe:	d8f0      	bhi.n	8004be2 <_VPrintTarget+0x3ba>
 8004c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	2300      	movs	r3, #0
 8004c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c18:	e00b      	b.n	8004c32 <_VPrintTarget+0x40a>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	6379      	str	r1, [r7, #52]	@ 0x34
 8004c24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	09db      	lsrs	r3, r3, #7
 8004c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c36:	d8f0      	bhi.n	8004c1a <_VPrintTarget+0x3f2>
 8004c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c46:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	221a      	movs	r2, #26
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fad8 	bl	8004204 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c56:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c5a:	bf00      	nop
 8004c5c:	3758      	adds	r7, #88	@ 0x58
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08005c50 	.word	0x08005c50

08004c68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c76:	2300      	movs	r3, #0
 8004c78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c7c:	4917      	ldr	r1, [pc, #92]	@ (8004cdc <SEGGER_SYSVIEW_Init+0x74>)
 8004c7e:	4818      	ldr	r0, [pc, #96]	@ (8004ce0 <SEGGER_SYSVIEW_Init+0x78>)
 8004c80:	f7ff f8c8 	bl	8003e14 <SEGGER_RTT_AllocUpBuffer>
 8004c84:	4603      	mov	r3, r0
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8e:	785a      	ldrb	r2, [r3, #1]
 8004c90:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c92:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c96:	7e1b      	ldrb	r3, [r3, #24]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <SEGGER_SYSVIEW_Init+0x80>)
 8004ca2:	490f      	ldr	r1, [pc, #60]	@ (8004ce0 <SEGGER_SYSVIEW_Init+0x78>)
 8004ca4:	f7ff f93a 	bl	8003f1c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cae:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <SEGGER_SYSVIEW_Init+0x84>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cb4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004cbc:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004cc2:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004cc8:	4a06      	ldr	r2, [pc, #24]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004cce:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20013308 	.word	0x20013308
 8004ce0:	08005c58 	.word	0x08005c58
 8004ce4:	20013b10 	.word	0x20013b10
 8004ce8:	20013b08 	.word	0x20013b08
 8004cec:	e0001004 	.word	0xe0001004

08004cf0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004cf8:	4a04      	ldr	r2, [pc, #16]	@ (8004d0c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6113      	str	r3, [r2, #16]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20013b10 	.word	0x20013b10

08004d10 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d18:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1c:	f04f 0120 	mov.w	r1, #32
 8004d20:	f381 8811 	msr	BASEPRI, r1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	4808      	ldr	r0, [pc, #32]	@ (8004d48 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d28:	f7ff f97d 	bl	8004026 <_PreparePacket>
 8004d2c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68b8      	ldr	r0, [r7, #8]
 8004d34:	f7ff fa66 	bl	8004204 <_SendPacket>
  RECORD_END();
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20013b40 	.word	0x20013b40

08004d4c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d56:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5a:	f04f 0120 	mov.w	r1, #32
 8004d5e:	f381 8811 	msr	BASEPRI, r1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	4816      	ldr	r0, [pc, #88]	@ (8004dc0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d66:	f7ff f95e 	bl	8004026 <_PreparePacket>
 8004d6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e00b      	b.n	8004d92 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	1c59      	adds	r1, r3, #1
 8004d82:	61f9      	str	r1, [r7, #28]
 8004d84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	09db      	lsrs	r3, r3, #7
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d96:	d8f0      	bhi.n	8004d7a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	61fa      	str	r2, [r7, #28]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	6938      	ldr	r0, [r7, #16]
 8004dae:	f7ff fa29 	bl	8004204 <_SendPacket>
  RECORD_END();
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f383 8811 	msr	BASEPRI, r3
}
 8004db8:	bf00      	nop
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20013b40 	.word	0x20013b40

08004dc4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	@ 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd4:	f04f 0120 	mov.w	r1, #32
 8004dd8:	f381 8811 	msr	BASEPRI, r1
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	4825      	ldr	r0, [pc, #148]	@ (8004e74 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004de0:	f7ff f921 	bl	8004026 <_PreparePacket>
 8004de4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	e00b      	b.n	8004e44 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	09db      	lsrs	r3, r3, #7
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e48:	d8f0      	bhi.n	8004e2c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6979      	ldr	r1, [r7, #20]
 8004e5e:	69b8      	ldr	r0, [r7, #24]
 8004e60:	f7ff f9d0 	bl	8004204 <_SendPacket>
  RECORD_END();
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f383 8811 	msr	BASEPRI, r3
}
 8004e6a:	bf00      	nop
 8004e6c:	3730      	adds	r7, #48	@ 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20013b40 	.word	0x20013b40

08004e78 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e7e:	4b59      	ldr	r3, [pc, #356]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e84:	f3ef 8311 	mrs	r3, BASEPRI
 8004e88:	f04f 0120 	mov.w	r1, #32
 8004e8c:	f381 8811 	msr	BASEPRI, r1
 8004e90:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e92:	4b54      	ldr	r3, [pc, #336]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	220a      	movs	r2, #10
 8004e98:	4953      	ldr	r1, [pc, #332]	@ (8004fe8 <SEGGER_SYSVIEW_Start+0x170>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb f998 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004ea6:	f7fe fec5 	bl	8003c34 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004eaa:	200a      	movs	r0, #10
 8004eac:	f7ff ff30 	bl	8004d10 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb4:	f04f 0120 	mov.w	r1, #32
 8004eb8:	f381 8811 	msr	BASEPRI, r1
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	484b      	ldr	r0, [pc, #300]	@ (8004fec <SEGGER_SYSVIEW_Start+0x174>)
 8004ec0:	f7ff f8b1 	bl	8004026 <_PreparePacket>
 8004ec4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ece:	4b45      	ldr	r3, [pc, #276]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed4:	e00b      	b.n	8004eee <SEGGER_SYSVIEW_Start+0x76>
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	1c59      	adds	r1, r3, #1
 8004ede:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ee0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	09db      	lsrs	r3, r3, #7
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef2:	d8f0      	bhi.n	8004ed6 <SEGGER_SYSVIEW_Start+0x5e>
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f08:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_Start+0xb0>
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_Start+0x98>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	4b28      	ldr	r3, [pc, #160]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e00b      	b.n	8004f62 <SEGGER_SYSVIEW_Start+0xea>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	1c59      	adds	r1, r3, #1
 8004f52:	61f9      	str	r1, [r7, #28]
 8004f54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	09db      	lsrs	r3, r3, #7
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f66:	d8f0      	bhi.n	8004f4a <SEGGER_SYSVIEW_Start+0xd2>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	e00b      	b.n	8004f9a <SEGGER_SYSVIEW_Start+0x122>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	6179      	str	r1, [r7, #20]
 8004f8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	09db      	lsrs	r3, r3, #7
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f9e:	d8f0      	bhi.n	8004f82 <SEGGER_SYSVIEW_Start+0x10a>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	617a      	str	r2, [r7, #20]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff f925 	bl	8004204 <_SendPacket>
      RECORD_END();
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004fc0:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004fce:	f000 f9eb 	bl	80053a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004fd2:	f000 f9b1 	bl	8005338 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004fd6:	f000 fcb1 	bl	800593c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004fda:	bf00      	nop
 8004fdc:	3730      	adds	r7, #48	@ 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20013b10 	.word	0x20013b10
 8004fe8:	08005c94 	.word	0x08005c94
 8004fec:	20013b40 	.word	0x20013b40

08004ff0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	f04f 0120 	mov.w	r1, #32
 8004ffe:	f381 8811 	msr	BASEPRI, r1
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	480b      	ldr	r0, [pc, #44]	@ (8005034 <SEGGER_SYSVIEW_Stop+0x44>)
 8005006:	f7ff f80e 	bl	8004026 <_PreparePacket>
 800500a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800500c:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <SEGGER_SYSVIEW_Stop+0x48>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005014:	220b      	movs	r2, #11
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6838      	ldr	r0, [r7, #0]
 800501a:	f7ff f8f3 	bl	8004204 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <SEGGER_SYSVIEW_Stop+0x48>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f383 8811 	msr	BASEPRI, r3
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20013b40 	.word	0x20013b40
 8005038:	20013b10 	.word	0x20013b10

0800503c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b08c      	sub	sp, #48	@ 0x30
 8005040:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005042:	f3ef 8311 	mrs	r3, BASEPRI
 8005046:	f04f 0120 	mov.w	r1, #32
 800504a:	f381 8811 	msr	BASEPRI, r1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	4845      	ldr	r0, [pc, #276]	@ (8005168 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005052:	f7fe ffe8 	bl	8004026 <_PreparePacket>
 8005056:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005060:	4b42      	ldr	r3, [pc, #264]	@ (800516c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005066:	e00b      	b.n	8005080 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	b2da      	uxtb	r2, r3
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	1c59      	adds	r1, r3, #1
 8005070:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005072:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	09db      	lsrs	r3, r3, #7
 800507e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	2b7f      	cmp	r3, #127	@ 0x7f
 8005084:	d8f0      	bhi.n	8005068 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800508c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	4b34      	ldr	r3, [pc, #208]	@ (800516c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	e00b      	b.n	80050ba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	1c59      	adds	r1, r3, #1
 80050aa:	6279      	str	r1, [r7, #36]	@ 0x24
 80050ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	09db      	lsrs	r3, r3, #7
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80050be:	d8f0      	bhi.n	80050a2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80050c6:	6a3a      	ldr	r2, [r7, #32]
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e00b      	b.n	80050f4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	61f9      	str	r1, [r7, #28]
 80050e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	09db      	lsrs	r3, r3, #7
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80050f8:	d8f0      	bhi.n	80050dc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e00b      	b.n	800512c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	6179      	str	r1, [r7, #20]
 800511e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005130:	d8f0      	bhi.n	8005114 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	617a      	str	r2, [r7, #20]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005142:	2218      	movs	r2, #24
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	f7ff f85c 	bl	8004204 <_SendPacket>
  RECORD_END();
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800515a:	4b04      	ldr	r3, [pc, #16]	@ (800516c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	4798      	blx	r3
  }
}
 8005160:	bf00      	nop
 8005162:	3730      	adds	r7, #48	@ 0x30
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20013b40 	.word	0x20013b40
 800516c:	20013b10 	.word	0x20013b10

08005170 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b092      	sub	sp, #72	@ 0x48
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005178:	f3ef 8311 	mrs	r3, BASEPRI
 800517c:	f04f 0120 	mov.w	r1, #32
 8005180:	f381 8811 	msr	BASEPRI, r1
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	486a      	ldr	r0, [pc, #424]	@ (8005330 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005188:	f7fe ff4d 	bl	8004026 <_PreparePacket>
 800518c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b66      	ldr	r3, [pc, #408]	@ (8005334 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051a2:	e00b      	b.n	80051bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80051a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	6479      	str	r1, [r7, #68]	@ 0x44
 80051ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051b8:	09db      	lsrs	r3, r3, #7
 80051ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80051bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051be:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c0:	d8f0      	bhi.n	80051a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051dc:	e00b      	b.n	80051f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e4:	1c59      	adds	r1, r3, #1
 80051e6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80051e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	09db      	lsrs	r3, r3, #7
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80051fa:	d8f0      	bhi.n	80051de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80051fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7fe fecd 	bl	8003fb4 <_EncodeStr>
 800521a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800521c:	2209      	movs	r2, #9
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6938      	ldr	r0, [r7, #16]
 8005222:	f7fe ffef 	bl	8004204 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b40      	ldr	r3, [pc, #256]	@ (8005334 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
 800523a:	e00b      	b.n	8005254 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	b2da      	uxtb	r2, r3
 8005240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	6379      	str	r1, [r7, #52]	@ 0x34
 8005246:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	09db      	lsrs	r3, r3, #7
 8005252:	633b      	str	r3, [r7, #48]	@ 0x30
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005256:	2b7f      	cmp	r3, #127	@ 0x7f
 8005258:	d8f0      	bhi.n	800523c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800525a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005268:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005274:	e00b      	b.n	800528e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005280:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	09db      	lsrs	r3, r3, #7
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	2b7f      	cmp	r3, #127	@ 0x7f
 8005292:	d8f0      	bhi.n	8005276 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800529a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	623b      	str	r3, [r7, #32]
 80052ae:	e00b      	b.n	80052c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80052ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e00b      	b.n	8005302 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	61f9      	str	r1, [r7, #28]
 80052f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	09db      	lsrs	r3, r3, #7
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b7f      	cmp	r3, #127	@ 0x7f
 8005306:	d8f0      	bhi.n	80052ea <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	61fa      	str	r2, [r7, #28]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005318:	2215      	movs	r2, #21
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6938      	ldr	r0, [r7, #16]
 800531e:	f7fe ff71 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f383 8811 	msr	BASEPRI, r3
}
 8005328:	bf00      	nop
 800532a:	3748      	adds	r7, #72	@ 0x48
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20013b40 	.word	0x20013b40
 8005334:	20013b10 	.word	0x20013b10

08005338 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800534e:	4b03      	ldr	r3, [pc, #12]	@ (800535c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4798      	blx	r3
  }
}
 8005356:	bf00      	nop
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20013b10 	.word	0x20013b10

08005360 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005368:	f3ef 8311 	mrs	r3, BASEPRI
 800536c:	f04f 0120 	mov.w	r1, #32
 8005370:	f381 8811 	msr	BASEPRI, r1
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	480b      	ldr	r0, [pc, #44]	@ (80053a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005378:	f7fe fe55 	bl	8004026 <_PreparePacket>
 800537c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800537e:	2280      	movs	r2, #128	@ 0x80
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	6938      	ldr	r0, [r7, #16]
 8005384:	f7fe fe16 	bl	8003fb4 <_EncodeStr>
 8005388:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800538a:	220e      	movs	r2, #14
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	6938      	ldr	r0, [r7, #16]
 8005390:	f7fe ff38 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f383 8811 	msr	BASEPRI, r3
}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20013b40 	.word	0x20013b40

080053a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01a      	beq.n	80053ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80053c0:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4798      	blx	r3
 80053c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80053ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	000a      	movs	r2, r1
 80053dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053de:	4613      	mov	r3, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4621      	mov	r1, r4
 80053e4:	200d      	movs	r0, #13
 80053e6:	f7ff fced 	bl	8004dc4 <SEGGER_SYSVIEW_RecordU32x2>
 80053ea:	e006      	b.n	80053fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	200c      	movs	r0, #12
 80053f4:	f7ff fcaa 	bl	8004d4c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	20013b10 	.word	0x20013b10
 8005408:	e0001004 	.word	0xe0001004

0800540c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005412:	f3ef 8311 	mrs	r3, BASEPRI
 8005416:	f04f 0120 	mov.w	r1, #32
 800541a:	f381 8811 	msr	BASEPRI, r1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4819      	ldr	r0, [pc, #100]	@ (8005488 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005422:	f7fe fe00 	bl	8004026 <_PreparePacket>
 8005426:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800542c:	4b17      	ldr	r3, [pc, #92]	@ (800548c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005434:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6179      	str	r1, [r7, #20]
 800544a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b7f      	cmp	r3, #127	@ 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	617a      	str	r2, [r7, #20]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800546e:	2202      	movs	r2, #2
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f7fe fec6 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20013b40 	.word	0x20013b40
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005496:	f3ef 8311 	mrs	r3, BASEPRI
 800549a:	f04f 0120 	mov.w	r1, #32
 800549e:	f381 8811 	msr	BASEPRI, r1
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	4807      	ldr	r0, [pc, #28]	@ (80054c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80054a6:	f7fe fdbe 	bl	8004026 <_PreparePacket>
 80054aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80054ac:	2203      	movs	r2, #3
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6838      	ldr	r0, [r7, #0]
 80054b2:	f7fe fea7 	bl	8004204 <_SendPacket>
  RECORD_END();
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f383 8811 	msr	BASEPRI, r3
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20013b40 	.word	0x20013b40

080054c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054ce:	f3ef 8311 	mrs	r3, BASEPRI
 80054d2:	f04f 0120 	mov.w	r1, #32
 80054d6:	f381 8811 	msr	BASEPRI, r1
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	4807      	ldr	r0, [pc, #28]	@ (80054fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80054de:	f7fe fda2 	bl	8004026 <_PreparePacket>
 80054e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80054e4:	2212      	movs	r2, #18
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6838      	ldr	r0, [r7, #0]
 80054ea:	f7fe fe8b 	bl	8004204 <_SendPacket>
  RECORD_END();
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f383 8811 	msr	BASEPRI, r3
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20013b40 	.word	0x20013b40

08005500 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005508:	f3ef 8311 	mrs	r3, BASEPRI
 800550c:	f04f 0120 	mov.w	r1, #32
 8005510:	f381 8811 	msr	BASEPRI, r1
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	4817      	ldr	r0, [pc, #92]	@ (8005574 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005518:	f7fe fd85 	bl	8004026 <_PreparePacket>
 800551c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e00b      	b.n	8005544 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	1c59      	adds	r1, r3, #1
 8005534:	61f9      	str	r1, [r7, #28]
 8005536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	09db      	lsrs	r3, r3, #7
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b7f      	cmp	r3, #127	@ 0x7f
 8005548:	d8f0      	bhi.n	800552c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	61fa      	str	r2, [r7, #28]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800555a:	221c      	movs	r2, #28
 800555c:	68f9      	ldr	r1, [r7, #12]
 800555e:	6938      	ldr	r0, [r7, #16]
 8005560:	f7fe fe50 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f383 8811 	msr	BASEPRI, r3
}
 800556a:	bf00      	nop
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20013b40 	.word	0x20013b40

08005578 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005582:	f3ef 8311 	mrs	r3, BASEPRI
 8005586:	f04f 0120 	mov.w	r1, #32
 800558a:	f381 8811 	msr	BASEPRI, r1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	4824      	ldr	r0, [pc, #144]	@ (8005624 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005592:	f7fe fd48 	bl	8004026 <_PreparePacket>
 8005596:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	e00b      	b.n	80055be <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80055b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c2:	d8f0      	bhi.n	80055a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e00b      	b.n	80055f6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	61f9      	str	r1, [r7, #28]
 80055e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055fa:	d8f0      	bhi.n	80055de <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	61fa      	str	r2, [r7, #28]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800560c:	221c      	movs	r2, #28
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6938      	ldr	r0, [r7, #16]
 8005612:	f7fe fdf7 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f383 8811 	msr	BASEPRI, r3
}
 800561c:	bf00      	nop
 800561e:	3728      	adds	r7, #40	@ 0x28
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20013b40 	.word	0x20013b40

08005628 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800562e:	f3ef 8311 	mrs	r3, BASEPRI
 8005632:	f04f 0120 	mov.w	r1, #32
 8005636:	f381 8811 	msr	BASEPRI, r1
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	4807      	ldr	r0, [pc, #28]	@ (800565c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800563e:	f7fe fcf2 	bl	8004026 <_PreparePacket>
 8005642:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005644:	2211      	movs	r2, #17
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6838      	ldr	r0, [r7, #0]
 800564a:	f7fe fddb 	bl	8004204 <_SendPacket>
  RECORD_END();
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f383 8811 	msr	BASEPRI, r3
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20013b40 	.word	0x20013b40

08005660 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005668:	f3ef 8311 	mrs	r3, BASEPRI
 800566c:	f04f 0120 	mov.w	r1, #32
 8005670:	f381 8811 	msr	BASEPRI, r1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	4819      	ldr	r0, [pc, #100]	@ (80056dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005678:	f7fe fcd5 	bl	8004026 <_PreparePacket>
 800567c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005682:	4b17      	ldr	r3, [pc, #92]	@ (80056e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e00b      	b.n	80056ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	1c59      	adds	r1, r3, #1
 800569e:	61f9      	str	r1, [r7, #28]
 80056a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	09db      	lsrs	r3, r3, #7
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056b2:	d8f0      	bhi.n	8005696 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	61fa      	str	r2, [r7, #28]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056c4:	2208      	movs	r2, #8
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	6938      	ldr	r0, [r7, #16]
 80056ca:	f7fe fd9b 	bl	8004204 <_SendPacket>
  RECORD_END();
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f383 8811 	msr	BASEPRI, r3
}
 80056d4:	bf00      	nop
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20013b40 	.word	0x20013b40
 80056e0:	20013b10 	.word	0x20013b10

080056e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056ec:	f3ef 8311 	mrs	r3, BASEPRI
 80056f0:	f04f 0120 	mov.w	r1, #32
 80056f4:	f381 8811 	msr	BASEPRI, r1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	4819      	ldr	r0, [pc, #100]	@ (8005760 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056fc:	f7fe fc93 	bl	8004026 <_PreparePacket>
 8005700:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005706:	4b17      	ldr	r3, [pc, #92]	@ (8005764 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e00b      	b.n	8005732 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	61f9      	str	r1, [r7, #28]
 8005724:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	09db      	lsrs	r3, r3, #7
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b7f      	cmp	r3, #127	@ 0x7f
 8005736:	d8f0      	bhi.n	800571a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	61fa      	str	r2, [r7, #28]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005748:	2204      	movs	r2, #4
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6938      	ldr	r0, [r7, #16]
 800574e:	f7fe fd59 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20013b40 	.word	0x20013b40
 8005764:	20013b10 	.word	0x20013b10

08005768 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005770:	f3ef 8311 	mrs	r3, BASEPRI
 8005774:	f04f 0120 	mov.w	r1, #32
 8005778:	f381 8811 	msr	BASEPRI, r1
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	4819      	ldr	r0, [pc, #100]	@ (80057e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005780:	f7fe fc51 	bl	8004026 <_PreparePacket>
 8005784:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e00b      	b.n	80057b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	1c59      	adds	r1, r3, #1
 80057a6:	61f9      	str	r1, [r7, #28]
 80057a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	09db      	lsrs	r3, r3, #7
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ba:	d8f0      	bhi.n	800579e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	61fa      	str	r2, [r7, #28]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057cc:	2206      	movs	r2, #6
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6938      	ldr	r0, [r7, #16]
 80057d2:	f7fe fd17 	bl	8004204 <_SendPacket>
  RECORD_END();
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f383 8811 	msr	BASEPRI, r3
}
 80057dc:	bf00      	nop
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20013b40 	.word	0x20013b40
 80057e8:	20013b10 	.word	0x20013b10

080057ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	@ 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80057f6:	4b40      	ldr	r3, [pc, #256]	@ (80058f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d077      	beq.n	80058ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80057fe:	4b3e      	ldr	r3, [pc, #248]	@ (80058f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005804:	2300      	movs	r3, #0
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005808:	e008      	b.n	800581c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	3301      	adds	r3, #1
 800581a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005820:	429a      	cmp	r2, r3
 8005822:	d3f2      	bcc.n	800580a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005824:	e000      	b.n	8005828 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005826:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d055      	beq.n	80058da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800582e:	f3ef 8311 	mrs	r3, BASEPRI
 8005832:	f04f 0120 	mov.w	r1, #32
 8005836:	f381 8811 	msr	BASEPRI, r1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	482f      	ldr	r0, [pc, #188]	@ (80058fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800583e:	f7fe fbf2 	bl	8004026 <_PreparePacket>
 8005842:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	e00b      	b.n	800586a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	6279      	str	r1, [r7, #36]	@ 0x24
 800585c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b7f      	cmp	r3, #127	@ 0x7f
 800586e:	d8f0      	bhi.n	8005852 <SEGGER_SYSVIEW_SendModule+0x66>
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	627a      	str	r2, [r7, #36]	@ 0x24
 8005876:	6a3a      	ldr	r2, [r7, #32]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e00b      	b.n	80058a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	1c59      	adds	r1, r3, #1
 8005894:	61f9      	str	r1, [r7, #28]
 8005896:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	09db      	lsrs	r3, r3, #7
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a8:	d8f0      	bhi.n	800588c <SEGGER_SYSVIEW_SendModule+0xa0>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	61fa      	str	r2, [r7, #28]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	4619      	mov	r1, r3
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7fe fb76 	bl	8003fb4 <_EncodeStr>
 80058c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80058ca:	2216      	movs	r2, #22
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	6938      	ldr	r0, [r7, #16]
 80058d0:	f7fe fc98 	bl	8004204 <_SendPacket>
      RECORD_END();
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <SEGGER_SYSVIEW_SendModule+0x102>
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4798      	blx	r3
    }
  }
}
 80058ee:	bf00      	nop
 80058f0:	3730      	adds	r7, #48	@ 0x30
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20013b38 	.word	0x20013b38
 80058fc:	20013b40 	.word	0x20013b40

08005900 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f2      	bne.n	8005914 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20013b38 	.word	0x20013b38

0800593c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	4817      	ldr	r0, [pc, #92]	@ (80059b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005952:	f7fe fb68 	bl	8004026 <_PreparePacket>
 8005956:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	e00b      	b.n	8005980 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	6179      	str	r1, [r7, #20]
 8005972:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	09db      	lsrs	r3, r3, #7
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b7f      	cmp	r3, #127	@ 0x7f
 8005984:	d8f0      	bhi.n	8005968 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	617a      	str	r2, [r7, #20]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005996:	221b      	movs	r2, #27
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	68b8      	ldr	r0, [r7, #8]
 800599c:	f7fe fc32 	bl	8004204 <_SendPacket>
  RECORD_END();
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f383 8811 	msr	BASEPRI, r3
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20013b40 	.word	0x20013b40
 80059b4:	20013b3c 	.word	0x20013b3c

080059b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80059b8:	b40f      	push	{r0, r1, r2, r3}
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	461a      	mov	r2, r3
 80059ca:	2100      	movs	r1, #0
 80059cc:	6938      	ldr	r0, [r7, #16]
 80059ce:	f7fe ff2b 	bl	8004828 <_VPrintTarget>
  va_end(ParamList);
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059dc:	b004      	add	sp, #16
 80059de:	4770      	bx	lr

080059e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	@ 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059e8:	f3ef 8311 	mrs	r3, BASEPRI
 80059ec:	f04f 0120 	mov.w	r1, #32
 80059f0:	f381 8811 	msr	BASEPRI, r1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	4827      	ldr	r0, [pc, #156]	@ (8005a94 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059f8:	f7fe fb15 	bl	8004026 <_PreparePacket>
 80059fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059fe:	2280      	movs	r2, #128	@ 0x80
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	6938      	ldr	r0, [r7, #16]
 8005a04:	f7fe fad6 	bl	8003fb4 <_EncodeStr>
 8005a08:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	2301      	movs	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	e00b      	b.n	8005a2c <SEGGER_SYSVIEW_Warn+0x4c>
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	09db      	lsrs	r3, r3, #7
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a30:	d8f0      	bhi.n	8005a14 <SEGGER_SYSVIEW_Warn+0x34>
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_Warn+0x84>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	61f9      	str	r1, [r7, #28]
 8005a56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_Warn+0x6c>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	61fa      	str	r2, [r7, #28]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a7a:	221a      	movs	r2, #26
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7fe fbc0 	bl	8004204 <_SendPacket>
  RECORD_END();
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f383 8811 	msr	BASEPRI, r3
}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	@ 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20013b40 	.word	0x20013b40

08005a98 <memcmp>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	3901      	subs	r1, #1
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4290      	cmp	r0, r2
 8005aa0:	d101      	bne.n	8005aa6 <memcmp+0xe>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e005      	b.n	8005ab2 <memcmp+0x1a>
 8005aa6:	7803      	ldrb	r3, [r0, #0]
 8005aa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d001      	beq.n	8005ab4 <memcmp+0x1c>
 8005ab0:	1b18      	subs	r0, r3, r4
 8005ab2:	bd10      	pop	{r4, pc}
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	e7f2      	b.n	8005a9e <memcmp+0x6>

08005ab8 <memset>:
 8005ab8:	4402      	add	r2, r0
 8005aba:	4603      	mov	r3, r0
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d100      	bne.n	8005ac2 <memset+0xa>
 8005ac0:	4770      	bx	lr
 8005ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac6:	e7f9      	b.n	8005abc <memset+0x4>

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	@ (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	@ (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 f826 	bl	8005b2c <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	08005cb8 	.word	0x08005cb8
 8005b04:	08005cb8 	.word	0x08005cb8
 8005b08:	08005cb8 	.word	0x08005cb8
 8005b0c:	08005cbc 	.word	0x08005cbc

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	4291      	cmp	r1, r2
 8005b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	4770      	bx	lr
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	4291      	cmp	r1, r2
 8005b28:	d1f9      	bne.n	8005b1e <memcpy+0xe>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
