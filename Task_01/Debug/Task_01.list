
Task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064bc  080064bc  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080064bc  080064bc  000074bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c4  080064c4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064c8  080064c8  000074c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080064cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          00013d54  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013db8  20013db8  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001264a  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b7  00000000  00000000  0001a6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  0001d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da8  00000000  00000000  0001e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248a5  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014423  00000000  00000000  000438a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8007  00000000  00000000  00057cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fccf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed8  00000000  00000000  0013fd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00144bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006320 	.word	0x08006320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006320 	.word	0x08006320

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e9c 	.word	0x20012e9c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fbad 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f853 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8bb 	bl	8000788 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter

  DWT_CTRL |= (1<<0);
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <main+0x98>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <main+0x98>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800061e:	f003 f973 	bl	8003908 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000622:	f004 fbab 	bl	8004d7c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler,"Task-1",200,"Hello from task-1",2,&task1_handle);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <main+0x9c>)
 8000632:	22c8      	movs	r2, #200	@ 0xc8
 8000634:	491a      	ldr	r1, [pc, #104]	@ (80006a0 <main+0xa0>)
 8000636:	481b      	ldr	r0, [pc, #108]	@ (80006a4 <main+0xa4>)
 8000638:	f001 fe62 	bl	8002300 <xTaskCreate>
 800063c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d00b      	beq.n	800065c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x58>

  status = xTaskCreate(task2_handler,"Task-2",200,"Hello from task-2",2,&task2_handle);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2302      	movs	r3, #2
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <main+0xa8>)
 8000666:	22c8      	movs	r2, #200	@ 0xc8
 8000668:	4910      	ldr	r1, [pc, #64]	@ (80006ac <main+0xac>)
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <main+0xb0>)
 800066c:	f001 fe48 	bl	8002300 <xTaskCreate>
 8000670:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d00b      	beq.n	8000690 <main+0x90>
    __asm volatile
 8000678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067c:	f383 8811 	msr	BASEPRI, r3
 8000680:	f3bf 8f6f 	isb	sy
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	60fb      	str	r3, [r7, #12]
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x8c>


  vTaskStartScheduler();
 8000690:	f001 ffe8 	bl	8002664 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x94>
 8000698:	e0001000 	.word	0xe0001000
 800069c:	08006338 	.word	0x08006338
 80006a0:	0800634c 	.word	0x0800634c
 80006a4:	08000a45 	.word	0x08000a45
 80006a8:	08006354 	.word	0x08006354
 80006ac:	08006368 	.word	0x08006368
 80006b0:	08000a81 	.word	0x08000a81

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f9ac 	bl	8005a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000728:	2332      	movs	r3, #50	@ 0x32
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fded 	bl	8001318 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f9cc 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f84e 	bl	8001808 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f9b5 	bl	8000ae0 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4ba2      	ldr	r3, [pc, #648]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4aa1      	ldr	r2, [pc, #644]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b9f      	ldr	r3, [pc, #636]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b9b      	ldr	r3, [pc, #620]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a9a      	ldr	r2, [pc, #616]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b98      	ldr	r3, [pc, #608]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b94      	ldr	r3, [pc, #592]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a93      	ldr	r2, [pc, #588]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b91      	ldr	r3, [pc, #580]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b8d      	ldr	r3, [pc, #564]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a8c      	ldr	r2, [pc, #560]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b8a      	ldr	r3, [pc, #552]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b86      	ldr	r3, [pc, #536]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a85      	ldr	r2, [pc, #532]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b83      	ldr	r3, [pc, #524]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a7e      	ldr	r2, [pc, #504]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a2c <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4879      	ldr	r0, [pc, #484]	@ (8000a30 <MX_GPIO_Init+0x2a8>)
 800084c:	f000 fd4a 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4877      	ldr	r0, [pc, #476]	@ (8000a34 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fd45 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000860:	4875      	ldr	r0, [pc, #468]	@ (8000a38 <MX_GPIO_Init+0x2b0>)
 8000862:	f000 fd3f 	bl	80012e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	486c      	ldr	r0, [pc, #432]	@ (8000a30 <MX_GPIO_Init+0x2a8>)
 800087e:	f000 fb95 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4866      	ldr	r0, [pc, #408]	@ (8000a34 <MX_GPIO_Init+0x2ac>)
 800089a:	f000 fb87 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	485e      	ldr	r0, [pc, #376]	@ (8000a34 <MX_GPIO_Init+0x2ac>)
 80008ba:	f000 fb77 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	485a      	ldr	r0, [pc, #360]	@ (8000a3c <MX_GPIO_Init+0x2b4>)
 80008d4:	f000 fb6a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d8:	2310      	movs	r3, #16
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e8:	2306      	movs	r3, #6
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4852      	ldr	r0, [pc, #328]	@ (8000a3c <MX_GPIO_Init+0x2b4>)
 80008f4:	f000 fb5a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f8:	23e0      	movs	r3, #224	@ 0xe0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	484a      	ldr	r0, [pc, #296]	@ (8000a3c <MX_GPIO_Init+0x2b4>)
 8000914:	f000 fb4a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4845      	ldr	r0, [pc, #276]	@ (8000a40 <MX_GPIO_Init+0x2b8>)
 800092c:	f000 fb3e 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000942:	2305      	movs	r3, #5
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	483c      	ldr	r0, [pc, #240]	@ (8000a40 <MX_GPIO_Init+0x2b8>)
 800094e:	f000 fb2d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000956:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4833      	ldr	r0, [pc, #204]	@ (8000a38 <MX_GPIO_Init+0x2b0>)
 800096c:	f000 fb1e 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000970:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000982:	2306      	movs	r3, #6
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4829      	ldr	r0, [pc, #164]	@ (8000a34 <MX_GPIO_Init+0x2ac>)
 800098e:	f000 fb0d 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4825      	ldr	r0, [pc, #148]	@ (8000a3c <MX_GPIO_Init+0x2b4>)
 80009a8:	f000 fb00 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009be:	230a      	movs	r3, #10
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <MX_GPIO_Init+0x2b4>)
 80009ca:	f000 faef 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ce:	2320      	movs	r3, #32
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <MX_GPIO_Init+0x2b0>)
 80009e2:	f000 fae3 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ec:	2312      	movs	r3, #18
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f8:	2304      	movs	r3, #4
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	@ (8000a40 <MX_GPIO_Init+0x2b8>)
 8000a04:	f000 fad2 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_GPIO_Init+0x2a8>)
 8000a1e:	f000 fac5 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	@ 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020400 	.word	0x40020400

08000a44 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameter)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09c      	sub	sp, #112	@ 0x70
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
//		printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a4c:	f107 000c 	add.w	r0, r7, #12
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <task1_handler+0x34>)
 8000a54:	2164      	movs	r1, #100	@ 0x64
 8000a56:	f004 ff9f 	bl	8005998 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 ff2a 	bl	80058b8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <task1_handler+0x38>)
 8000a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	f3bf 8f4f 	dsb	sy
 8000a70:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a74:	bf00      	nop
 8000a76:	e7e9      	b.n	8000a4c <task1_handler+0x8>
 8000a78:	08006370 	.word	0x08006370
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <task2_handler>:
	}
}

static void task2_handler(void *parameter)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	@ 0x70
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
//		printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000a88:	f107 000c 	add.w	r0, r7, #12
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a09      	ldr	r2, [pc, #36]	@ (8000ab4 <task2_handler+0x34>)
 8000a90:	2164      	movs	r1, #100	@ 0x64
 8000a92:	f004 ff81 	bl	8005998 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 ff0c 	bl	80058b8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <task2_handler+0x38>)
 8000aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000ab0:	bf00      	nop
 8000ab2:	e7e9      	b.n	8000a88 <task2_handler+0x8>
 8000ab4:	08006370 	.word	0x08006370
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f96b 	bl	8000da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001000 	.word	0x40001000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b2a:	f002 faab 	bl	8003084 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <HAL_InitTick+0xe4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a32      	ldr	r2, [pc, #200]	@ (8000c20 <HAL_InitTick+0xe4>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b68:	f107 0210 	add.w	r2, r7, #16
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f854 	bl	8001c20 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b82:	f001 f839 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8000b86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b88:	e004      	b.n	8000b94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b8a:	f001 f835 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b96:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <HAL_InitTick+0xe8>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	0c9b      	lsrs	r3, r3, #18
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <HAL_InitTick+0xec>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	@ (8000c2c <HAL_InitTick+0xf0>)
 8000ba6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <HAL_InitTick+0xec>)
 8000baa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bca:	f001 f85b 	bl	8001c84 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d11b      	bne.n	8000c14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bdc:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <HAL_InitTick+0xec>)
 8000bde:	f001 f8ab 	bl	8001d38 <HAL_TIM_Base_Start_IT>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d111      	bne.n	8000c14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 f9cd 	bl	8000f90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d808      	bhi.n	8000c0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2036      	movs	r0, #54	@ 0x36
 8000c02:	f000 f9a9 	bl	8000f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_InitTick+0xf4>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e002      	b.n	8000c14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3738      	adds	r7, #56	@ 0x38
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	20000080 	.word	0x20000080
 8000c2c:	40001000 	.word	0x40001000
 8000c30:	20000004 	.word	0x20000004

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <TIM6_DAC_IRQHandler+0x10>)
 8000c72:	f001 f8d1 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000080 	.word	0x20000080

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f004 febe 	bl	8005a30 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200000c8 	.word	0x200000c8
 8000ce8:	20013db8 	.word	0x20013db8

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f004 fe7d 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc5d 	bl	8000600 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d54:	080064cc 	.word	0x080064cc
  ldr r2, =_sbss
 8000d58:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d5c:	20013db8 	.word	0x20013db8

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	@ (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f8d8 	bl	8000f42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fed2 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fea8 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200000cc 	.word	0x200000cc

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200000cc 	.word	0x200000cc

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	@ (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff4c 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6a:	f7ff ff61 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	6978      	ldr	r0, [r7, #20]
 8000f76:	f7ff ffb1 	bl	8000edc <NVIC_EncodePriority>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff80 	bl	8000e88 <__NVIC_SetPriority>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff54 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e16b      	b.n	80012a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 815a 	bne.w	800129a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80b4 	beq.w	800129a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b60      	ldr	r3, [pc, #384]	@ (80012b8 <HAL_GPIO_Init+0x30c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a5f      	ldr	r2, [pc, #380]	@ (80012b8 <HAL_GPIO_Init+0x30c>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_GPIO_Init+0x30c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a5b      	ldr	r2, [pc, #364]	@ (80012bc <HAL_GPIO_Init+0x310>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_GPIO_Init+0x314>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d02b      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a51      	ldr	r2, [pc, #324]	@ (80012c4 <HAL_GPIO_Init+0x318>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a50      	ldr	r2, [pc, #320]	@ (80012c8 <HAL_GPIO_Init+0x31c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x320>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x328>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x32c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x330>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x20a>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e00e      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011b6:	2308      	movs	r3, #8
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x228>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_GPIO_Init+0x310>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae90 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e267      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d075      	beq.n	8001422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001336:	4b88      	ldr	r3, [pc, #544]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b85      	ldr	r3, [pc, #532]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800134a:	2b08      	cmp	r3, #8
 800134c:	d112      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134e:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b7e      	ldr	r3, [pc, #504]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d157      	bne.n	8001420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e242      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x74>
 800137e:	4b76      	ldr	r3, [pc, #472]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b70      	ldr	r3, [pc, #448]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6f      	ldr	r2, [pc, #444]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 80013b0:	4b69      	ldr	r3, [pc, #420]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcfe 	bl	8000dd0 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcfa 	bl	8000dd0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e207      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xc0>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcea 	bl	8000dd0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fce6 	bl	8000dd0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1f3      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0xe8>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800142e:	4b4a      	ldr	r3, [pc, #296]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001446:	4b44      	ldr	r3, [pc, #272]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4937      	ldr	r1, [pc, #220]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x244>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fc9f 	bl	8000dd0 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fc9b 	bl	8000dd0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a8      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4925      	ldr	r1, [pc, #148]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <HAL_RCC_OscConfig+0x244>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc7e 	bl	8000dd0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc7a 	bl	8000dd0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e187      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_RCC_OscConfig+0x248>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fc5e 	bl	8000dd0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc5a 	bl	8000dd0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e167      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x200>
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_RCC_OscConfig+0x248>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fc47 	bl	8000dd0 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fc43 	bl	8000dd0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e150      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8097 	beq.w	80016ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b81      	ldr	r3, [pc, #516]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b7d      	ldr	r3, [pc, #500]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a7c      	ldr	r2, [pc, #496]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b7a      	ldr	r3, [pc, #488]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b77      	ldr	r3, [pc, #476]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ba:	4b74      	ldr	r3, [pc, #464]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a73      	ldr	r2, [pc, #460]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc03 	bl	8000dd0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ce:	f7ff fbff 	bl	8000dd0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e10c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015f4:	4b64      	ldr	r3, [pc, #400]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f8:	4a63      	ldr	r2, [pc, #396]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x30c>
 800160a:	4b5f      	ldr	r3, [pc, #380]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a5e      	ldr	r2, [pc, #376]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	4b5c      	ldr	r3, [pc, #368]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	4a5b      	ldr	r2, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	@ 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001624:	4b58      	ldr	r3, [pc, #352]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001628:	4a57      	ldr	r2, [pc, #348]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001630:	4b55      	ldr	r3, [pc, #340]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001634:	4a54      	ldr	r2, [pc, #336]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fbc4 	bl	8000dd0 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fbc0 	bl	8000dd0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0cb      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4b49      	ldr	r3, [pc, #292]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x334>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fbae 	bl	8000dd0 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fbaa 	bl	8000dd0 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0b5      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a38      	ldr	r2, [pc, #224]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a1 	beq.w	80017f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d05c      	beq.n	800177c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d141      	bne.n	800174e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb7e 	bl	8000dd0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb7a 	bl	8000dd0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e087      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	491b      	ldr	r1, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb53 	bl	8000dd0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb4f 	bl	8000dd0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e05c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x416>
 800174c:	e054      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb3c 	bl	8000dd0 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb38 	bl	8000dd0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e038      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x4ec>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d121      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa6a 	bl	8000dd0 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa66 	bl	8000dd0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8c4 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08006438 	.word	0x08006438
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b094      	sub	sp, #80	@ 0x50
 80019da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ec:	4b79      	ldr	r3, [pc, #484]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x40>
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f200 80e1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e0db      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b73      	ldr	r3, [pc, #460]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a0c:	e0db      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a12:	e0d8      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a58:	0150      	lsls	r0, r2, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4621      	mov	r1, r4
 8001a60:	1a51      	subs	r1, r2, r1
 8001a62:	6139      	str	r1, [r7, #16]
 8001a64:	4629      	mov	r1, r5
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a78:	4659      	mov	r1, fp
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a82:	4651      	mov	r1, sl
 8001a84:	018a      	lsls	r2, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ebb2 0801 	subs.w	r8, r2, r1
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	4699      	mov	r9, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	eb18 0303 	adds.w	r3, r8, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	eb49 0303 	adc.w	r3, r9, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	024b      	lsls	r3, r1, #9
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	024a      	lsls	r2, r1, #9
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ae4:	f7fe fc14 	bl	8000310 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af0:	e058      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	4611      	mov	r1, r2
 8001afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	464b      	mov	r3, r9
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	0159      	lsls	r1, r3, #5
 8001b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1e:	0150      	lsls	r0, r2, #5
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4641      	mov	r1, r8
 8001b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b44:	ebb2 040a 	subs.w	r4, r2, sl
 8001b48:	eb63 050b 	sbc.w	r5, r3, fp
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	00eb      	lsls	r3, r5, #3
 8001b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5a:	00e2      	lsls	r2, r4, #3
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4643      	mov	r3, r8
 8001b62:	18e3      	adds	r3, r4, r3
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	464b      	mov	r3, r9
 8001b68:	eb45 0303 	adc.w	r3, r5, r3
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	61fa      	str	r2, [r7, #28]
 8001b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b98:	f7fe fbba 	bl	8000310 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3750      	adds	r7, #80	@ 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	@ (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08006448 	.word	0x08006448

08001c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_RCC_GetClockConfig+0x60>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0207 	and.w	r2, r3, #7
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e041      	b.n	8001d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f839 	bl	8001d22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 f9c0 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d001      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e04e      	b.n	8001dee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7a:	d01d      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d018      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00e      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d010      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dda:	e007      	b.n	8001dec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40010400 	.word	0x40010400
 8001e10:	40014000 	.word	0x40014000
 8001e14:	40001800 	.word	0x40001800

08001e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0202 	mvn.w	r2, #2
 8001e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8d2 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8c4 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8d5 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0204 	mvn.w	r2, #4
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8ac 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f89e 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8af 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0208 	mvn.w	r2, #8
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f886 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f878 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f889 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0210 	mvn.w	r2, #16
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2208      	movs	r2, #8
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f860 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f852 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f863 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0201 	mvn.w	r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fd9c 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f906 	bl	80021b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f834 	bl	8002034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8d8 	bl	80021a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002066:	d00f      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a43      	ldr	r2, [pc, #268]	@ (8002178 <TIM_Base_SetConfig+0x130>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00b      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a42      	ldr	r2, [pc, #264]	@ (800217c <TIM_Base_SetConfig+0x134>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a41      	ldr	r2, [pc, #260]	@ (8002180 <TIM_Base_SetConfig+0x138>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a40      	ldr	r2, [pc, #256]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d108      	bne.n	800209a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a35      	ldr	r2, [pc, #212]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a8:	d027      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d023      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a31      	ldr	r2, [pc, #196]	@ (800217c <TIM_Base_SetConfig+0x134>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <TIM_Base_SetConfig+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d017      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002188 <TIM_Base_SetConfig+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <TIM_Base_SetConfig+0x144>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <TIM_Base_SetConfig+0x148>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <TIM_Base_SetConfig+0x14c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <TIM_Base_SetConfig+0x150>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a29      	ldr	r2, [pc, #164]	@ (800219c <TIM_Base_SetConfig+0x154>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0xf8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f023 0201 	bic.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40010400 	.word	0x40010400
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800
 8002194:	40001800 	.word	0x40001800
 8002198:	40001c00 	.word	0x40001c00
 800219c:	40002000 	.word	0x40002000

080021a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 0208 	add.w	r2, r3, #8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 0208 	add.w	r2, r3, #8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0208 	add.w	r2, r3, #8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021fc:	f240 1019 	movw	r0, #281	@ 0x119
 8002200:	f003 f8fe 	bl	8005400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800221a:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800221e:	f003 f8ef 	bl	8005400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6892      	ldr	r2, [r2, #8]
 8002240:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6852      	ldr	r2, [r2, #4]
 800224a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d103      	bne.n	800225e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	f240 101d 	movw	r0, #285	@ 0x11d
 8002278:	f003 f8fe 	bl	8005478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af04      	add	r7, sp, #16
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f001 f8a0 	bl	80033e0 <pvPortMalloc>
 80022a0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022a8:	2058      	movs	r0, #88	@ 0x58
 80022aa:	f001 f899 	bl	80033e0 <pvPortMalloc>
 80022ae:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022b6:	2258      	movs	r2, #88	@ 0x58
 80022b8:	2100      	movs	r1, #0
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f003 fbb0 	bl	8005a20 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022c6:	e005      	b.n	80022d4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022c8:	6938      	ldr	r0, [r7, #16]
 80022ca:	f001 f9c1 	bl	8003650 <vPortFree>
 80022ce:	e001      	b.n	80022d4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022da:	2300      	movs	r3, #0
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f82d 	bl	8002350 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80022f6:	697b      	ldr	r3, [r7, #20]
    }
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff ffb3 	bl	8002288 <prvCreateTask>
 8002322:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800232a:	6938      	ldr	r0, [r7, #16]
 800232c:	f000 f8a0 	bl	8002470 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002330:	2301      	movs	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e002      	b.n	800233c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4619      	mov	r1, r3
 8002340:	20c2      	movs	r0, #194	@ 0xc2
 8002342:	f003 f899 	bl	8005478 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002346:	697b      	ldr	r3, [r7, #20]
    }
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002360:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	461a      	mov	r2, r3
 8002368:	21a5      	movs	r1, #165	@ 0xa5
 800236a:	f003 fb59 	bl	8005a20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002378:	3b01      	subs	r3, #1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f023 0307 	bic.w	r3, r3, #7
 8002386:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	617b      	str	r3, [r7, #20]
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01e      	beq.n	80023ee <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	e012      	b.n	80023dc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	7819      	ldrb	r1, [r3, #0]
 80023be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	3334      	adds	r3, #52	@ 0x34
 80023c6:	460a      	mov	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	d9e9      	bls.n	80023b6 <prvInitialiseNewTask+0x66>
 80023e2:	e000      	b.n	80023e6 <prvInitialiseNewTask+0x96>
            {
                break;
 80023e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d90b      	bls.n	800240c <prvInitialiseNewTask+0xbc>
    __asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	613b      	str	r3, [r7, #16]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	2b04      	cmp	r3, #4
 8002410:	d901      	bls.n	8002416 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002412:	2304      	movs	r3, #4
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002420:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	3304      	adds	r3, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fef0 	bl	800220c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	3318      	adds	r3, #24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff feeb 	bl	800220c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800243a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	f1c3 0205 	rsb	r2, r3, #5
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	69b8      	ldr	r0, [r7, #24]
 8002452:	f000 fc99 	bl	8002d88 <pxPortInitialiseStack>
 8002456:	4602      	mov	r2, r0
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002466:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af02      	add	r7, sp, #8
 8002476:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002478:	f000 fe84 	bl	8003184 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800247c:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <prvAddNewTaskToReadyList+0x130>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a47      	ldr	r2, [pc, #284]	@ (80025a0 <prvAddNewTaskToReadyList+0x130>)
 8002484:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002486:	4b47      	ldr	r3, [pc, #284]	@ (80025a4 <prvAddNewTaskToReadyList+0x134>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800248e:	4a45      	ldr	r2, [pc, #276]	@ (80025a4 <prvAddNewTaskToReadyList+0x134>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002494:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <prvAddNewTaskToReadyList+0x130>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d110      	bne.n	80024be <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800249c:	f000 fbda 	bl	8002c54 <prvInitialiseTaskLists>
 80024a0:	e00d      	b.n	80024be <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <prvAddNewTaskToReadyList+0x138>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024aa:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <prvAddNewTaskToReadyList+0x134>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d802      	bhi.n	80024be <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024b8:	4a3a      	ldr	r2, [pc, #232]	@ (80025a4 <prvAddNewTaskToReadyList+0x134>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024be:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <prvAddNewTaskToReadyList+0x13c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a39      	ldr	r2, [pc, #228]	@ (80025ac <prvAddNewTaskToReadyList+0x13c>)
 80024c6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024c8:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <prvAddNewTaskToReadyList+0x13c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <prvAddNewTaskToReadyList+0x94>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f841 	bl	8005560 <SEGGER_SYSVIEW_OnTaskCreate>
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	461d      	mov	r5, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461c      	mov	r4, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	1ae3      	subs	r3, r4, r3
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	462b      	mov	r3, r5
 8002500:	f001 faa4 	bl	8003a4c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f8ae 	bl	8005668 <SEGGER_SYSVIEW_OnTaskStartReady>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	2201      	movs	r2, #1
 8002512:	409a      	lsls	r2, r3
 8002514:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <prvAddNewTaskToReadyList+0x140>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	4a25      	ldr	r2, [pc, #148]	@ (80025b0 <prvAddNewTaskToReadyList+0x140>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002522:	4924      	ldr	r1, [pc, #144]	@ (80025b4 <prvAddNewTaskToReadyList+0x144>)
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3304      	adds	r3, #4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	3204      	adds	r2, #4
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <prvAddNewTaskToReadyList+0x144>)
 8002562:	441a      	add	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256c:	4911      	ldr	r1, [pc, #68]	@ (80025b4 <prvAddNewTaskToReadyList+0x144>)
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800257e:	1c59      	adds	r1, r3, #1
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <prvAddNewTaskToReadyList+0x144>)
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800258e:	f000 fe2b 	bl	80031e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <prvAddNewTaskToReadyList+0x138>)
 8002594:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001a8 	.word	0x200001a8
 80025a4:	200000d0 	.word	0x200000d0
 80025a8:	200001b4 	.word	0x200001b4
 80025ac:	200001c4 	.word	0x200001c4
 80025b0:	200001b0 	.word	0x200001b0
 80025b4:	200000d4 	.word	0x200000d4

080025b8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e011      	b.n	80025fe <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80025da:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <prvCreateIdleTasks+0xa0>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	7819      	ldrb	r1, [r3, #0]
 80025e2:	1d3a      	adds	r2, r7, #4
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	460a      	mov	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80025ec:	1d3a      	adds	r2, r7, #4
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d9ea      	bls.n	80025da <prvCreateIdleTasks+0x22>
 8002604:	e000      	b.n	8002608 <prvCreateIdleTasks+0x50>
        {
            break;
 8002606:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002608:	1d3a      	adds	r2, r7, #4
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4413      	add	r3, r2
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e015      	b.n	8002644 <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <prvCreateIdleTasks+0xa4>)
 800261a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4a0f      	ldr	r2, [pc, #60]	@ (8002660 <prvCreateIdleTasks+0xa8>)
 8002622:	4413      	add	r3, r2
 8002624:	1d39      	adds	r1, r7, #4
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2300      	movs	r3, #0
 800262e:	2282      	movs	r2, #130	@ 0x82
 8002630:	6938      	ldr	r0, [r7, #16]
 8002632:	f7ff fe65 	bl	8002300 <xTaskCreate>
 8002636:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d106      	bne.n	800264c <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	3301      	adds	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	dde6      	ble.n	8002618 <prvCreateIdleTasks+0x60>
 800264a:	e000      	b.n	800264e <prvCreateIdleTasks+0x96>
        {
            break;
 800264c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800264e:	69fb      	ldr	r3, [r7, #28]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	08006374 	.word	0x08006374
 800265c:	08002c31 	.word	0x08002c31
 8002660:	200001cc 	.word	0x200001cc

08002664 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800266a:	f7ff ffa5 	bl	80025b8 <prvCreateIdleTasks>
 800266e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d124      	bne.n	80026c0 <vTaskStartScheduler+0x5c>
    __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	60bb      	str	r3, [r7, #8]
}
 8002688:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <vTaskStartScheduler+0x90>)
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <vTaskStartScheduler+0x94>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <vTaskStartScheduler+0x98>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800269e:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <vTaskStartScheduler+0x9c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <vTaskStartScheduler+0xa0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d102      	bne.n	80026b0 <vTaskStartScheduler+0x4c>
 80026aa:	f002 ff3d 	bl	8005528 <SEGGER_SYSVIEW_OnIdle>
 80026ae:	e004      	b.n	80026ba <vTaskStartScheduler+0x56>
 80026b0:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <vTaskStartScheduler+0xa0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 ff95 	bl	80055e4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80026ba:	f000 fbf3 	bl	8002ea4 <xPortStartScheduler>
 80026be:	e00f      	b.n	80026e0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d10b      	bne.n	80026e0 <vTaskStartScheduler+0x7c>
    __asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	607b      	str	r3, [r7, #4]
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <vTaskStartScheduler+0xa4>)
 80026e2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80026e4:	20cd      	movs	r0, #205	@ 0xcd
 80026e6:	f002 fe8b 	bl	8005400 <SEGGER_SYSVIEW_RecordEndCall>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200001c8 	.word	0x200001c8
 80026f8:	200001b4 	.word	0x200001b4
 80026fc:	200001ac 	.word	0x200001ac
 8002700:	200001cc 	.word	0x200001cc
 8002704:	200000d0 	.word	0x200000d0
 8002708:	2000000c 	.word	0x2000000c

0800270c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <vTaskSuspendAll+0x18>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a03      	ldr	r2, [pc, #12]	@ (8002724 <vTaskSuspendAll+0x18>)
 8002718:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800271a:	20cf      	movs	r0, #207	@ 0xcf
 800271c:	f002 fe70 	bl	8005400 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200001d0 	.word	0x200001d0

08002728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002736:	f000 fd25 	bl	8003184 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800273e:	4b73      	ldr	r3, [pc, #460]	@ (800290c <xTaskResumeAll+0x1e4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10b      	bne.n	800275e <xTaskResumeAll+0x36>
    __asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	603b      	str	r3, [r7, #0]
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800275e:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <xTaskResumeAll+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3b01      	subs	r3, #1
 8002764:	4a69      	ldr	r2, [pc, #420]	@ (800290c <xTaskResumeAll+0x1e4>)
 8002766:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002768:	4b68      	ldr	r3, [pc, #416]	@ (800290c <xTaskResumeAll+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 80c0 	bne.w	80028f2 <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002772:	4b67      	ldr	r3, [pc, #412]	@ (8002910 <xTaskResumeAll+0x1e8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80bb 	beq.w	80028f2 <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800277c:	e092      	b.n	80028a4 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800277e:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <xTaskResumeAll+0x1ec>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	6a12      	ldr	r2, [r2, #32]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	69d2      	ldr	r2, [r2, #28]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3318      	adds	r3, #24
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d103      	bne.n	80027b4 <xTaskResumeAll+0x8c>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d103      	bne.n	80027f2 <xTaskResumeAll+0xca>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4618      	mov	r0, r3
 8002806:	f002 ff2f 	bl	8005668 <SEGGER_SYSVIEW_OnTaskStartReady>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	2201      	movs	r2, #1
 8002810:	409a      	lsls	r2, r3
 8002812:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <xTaskResumeAll+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	4a3f      	ldr	r2, [pc, #252]	@ (8002918 <xTaskResumeAll+0x1f0>)
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002820:	493e      	ldr	r1, [pc, #248]	@ (800291c <xTaskResumeAll+0x1f4>)
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3304      	adds	r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	3204      	adds	r2, #4
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	1d1a      	adds	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4a2f      	ldr	r2, [pc, #188]	@ (800291c <xTaskResumeAll+0x1f4>)
 8002860:	441a      	add	r2, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286a:	492c      	ldr	r1, [pc, #176]	@ (800291c <xTaskResumeAll+0x1f4>)
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	4827      	ldr	r0, [pc, #156]	@ (800291c <xTaskResumeAll+0x1f4>)
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4403      	add	r3, r0
 800288a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002890:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <xTaskResumeAll+0x1f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	429a      	cmp	r2, r3
 8002898:	d904      	bls.n	80028a4 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <xTaskResumeAll+0x1fc>)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2101      	movs	r1, #1
 80028a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <xTaskResumeAll+0x1ec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f af68 	bne.w	800277e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80028b4:	f000 fa4c 	bl	8002d50 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <xTaskResumeAll+0x200>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d012      	beq.n	80028ea <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80028c4:	f000 f848 	bl	8002958 <xTaskIncrementTick>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80028ce:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <xTaskResumeAll+0x1fc>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2101      	movs	r1, #1
 80028d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	3b01      	subs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ef      	bne.n	80028c4 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <xTaskResumeAll+0x200>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80028ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <xTaskResumeAll+0x1fc>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028f2:	f000 fc79 	bl	80031e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4619      	mov	r1, r3
 80028fa:	20d0      	movs	r0, #208	@ 0xd0
 80028fc:	f002 fdbc 	bl	8005478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002900:	697b      	ldr	r3, [r7, #20]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200001d0 	.word	0x200001d0
 8002910:	200001a8 	.word	0x200001a8
 8002914:	20000168 	.word	0x20000168
 8002918:	200001b0 	.word	0x200001b0
 800291c:	200000d4 	.word	0x200000d4
 8002920:	200000d0 	.word	0x200000d0
 8002924:	200001bc 	.word	0x200001bc
 8002928:	200001b8 	.word	0x200001b8

0800292c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002932:	f000 fd13 	bl	800335c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <xTaskGetTickCountFromISR+0x28>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	20d2      	movs	r0, #210	@ 0xd2
 8002944:	f002 fd98 	bl	8005478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002948:	683b      	ldr	r3, [r7, #0]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200001ac 	.word	0x200001ac

08002958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002962:	4b74      	ldr	r3, [pc, #464]	@ (8002b34 <xTaskIncrementTick+0x1dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 80d4 	bne.w	8002b14 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800296c:	4b72      	ldr	r3, [pc, #456]	@ (8002b38 <xTaskIncrementTick+0x1e0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002974:	4a70      	ldr	r2, [pc, #448]	@ (8002b38 <xTaskIncrementTick+0x1e0>)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d121      	bne.n	80029c4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002980:	4b6e      	ldr	r3, [pc, #440]	@ (8002b3c <xTaskIncrementTick+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <xTaskIncrementTick+0x4a>
    __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	607b      	str	r3, [r7, #4]
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <xTaskIncrementTick+0x46>
 80029a2:	4b66      	ldr	r3, [pc, #408]	@ (8002b3c <xTaskIncrementTick+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <xTaskIncrementTick+0x1e8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a63      	ldr	r2, [pc, #396]	@ (8002b3c <xTaskIncrementTick+0x1e4>)
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4a63      	ldr	r2, [pc, #396]	@ (8002b40 <xTaskIncrementTick+0x1e8>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b63      	ldr	r3, [pc, #396]	@ (8002b44 <xTaskIncrementTick+0x1ec>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a61      	ldr	r2, [pc, #388]	@ (8002b44 <xTaskIncrementTick+0x1ec>)
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	f000 f9c6 	bl	8002d50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029c4:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <xTaskIncrementTick+0x1f0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	f0c0 80a7 	bcc.w	8002b1e <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b3c <xTaskIncrementTick+0x1e4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80029da:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <xTaskIncrementTick+0x1f0>)
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	601a      	str	r2, [r3, #0]
                    break;
 80029e2:	e09c      	b.n	8002b1e <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e4:	4b55      	ldr	r3, [pc, #340]	@ (8002b3c <xTaskIncrementTick+0x1e4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d203      	bcs.n	8002a04 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029fc:	4a52      	ldr	r2, [pc, #328]	@ (8002b48 <xTaskIncrementTick+0x1f0>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6013      	str	r3, [r2, #0]
                        break;
 8002a02:	e08c      	b.n	8002b1e <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	6892      	ldr	r2, [r2, #8]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3304      	adds	r3, #4
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d103      	bne.n	8002a32 <xTaskIncrementTick+0xda>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01e      	beq.n	8002a88 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	6a12      	ldr	r2, [r2, #32]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	69d2      	ldr	r2, [r2, #28]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d103      	bne.n	8002a78 <xTaskIncrementTick+0x120>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fdec 	bl	8005668 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	2201      	movs	r2, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	4b2c      	ldr	r3, [pc, #176]	@ (8002b4c <xTaskIncrementTick+0x1f4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b4c <xTaskIncrementTick+0x1f4>)
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa6:	492a      	ldr	r1, [pc, #168]	@ (8002b50 <xTaskIncrementTick+0x1f8>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	3204      	adds	r2, #4
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b50 <xTaskIncrementTick+0x1f8>)
 8002ae6:	441a      	add	r2, r3
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	615a      	str	r2, [r3, #20]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	4917      	ldr	r1, [pc, #92]	@ (8002b50 <xTaskIncrementTick+0x1f8>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	4812      	ldr	r0, [pc, #72]	@ (8002b50 <xTaskIncrementTick+0x1f8>)
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b12:	e75d      	b.n	80029d0 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <xTaskIncrementTick+0x1fc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <xTaskIncrementTick+0x1fc>)
 8002b1c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	4619      	mov	r1, r3
 8002b22:	20db      	movs	r0, #219	@ 0xdb
 8002b24:	f002 fca8 	bl	8005478 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3728      	adds	r7, #40	@ 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001d0 	.word	0x200001d0
 8002b38:	200001ac 	.word	0x200001ac
 8002b3c:	20000160 	.word	0x20000160
 8002b40:	20000164 	.word	0x20000164
 8002b44:	200001c0 	.word	0x200001c0
 8002b48:	200001c8 	.word	0x200001c8
 8002b4c:	200001b0 	.word	0x200001b0
 8002b50:	200000d4 	.word	0x200000d4
 8002b54:	200001b8 	.word	0x200001b8

08002b58 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c18 <vTaskSwitchContext+0xc0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002b66:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <vTaskSwitchContext+0xc4>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002b6c:	e04f      	b.n	8002c0e <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <vTaskSwitchContext+0xc4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <vTaskSwitchContext+0xc8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	f1c3 031f 	rsb	r3, r3, #31
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	4926      	ldr	r1, [pc, #152]	@ (8002c24 <vTaskSwitchContext+0xcc>)
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <vTaskSwitchContext+0x5a>
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <vTaskSwitchContext+0xcc>)
 8002bc2:	4413      	add	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d103      	bne.n	8002be4 <vTaskSwitchContext+0x8c>
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	@ (8002c28 <vTaskSwitchContext+0xd0>)
 8002bec:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <vTaskSwitchContext+0xd4>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <vTaskSwitchContext+0xd0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d102      	bne.n	8002c00 <vTaskSwitchContext+0xa8>
 8002bfa:	f002 fc95 	bl	8005528 <SEGGER_SYSVIEW_OnIdle>
 8002bfe:	e004      	b.n	8002c0a <vTaskSwitchContext+0xb2>
 8002c00:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <vTaskSwitchContext+0xd0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fced 	bl	80055e4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <vTaskSwitchContext+0xd0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
    }
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001d0 	.word	0x200001d0
 8002c1c:	200001bc 	.word	0x200001bc
 8002c20:	200001b0 	.word	0x200001b0
 8002c24:	200000d4 	.word	0x200000d4
 8002c28:	200000d0 	.word	0x200000d0
 8002c2c:	200001cc 	.word	0x200001cc

08002c30 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c38:	f000 f84c 	bl	8002cd4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <prvIdleTask+0x20>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c4c:	bf00      	nop
 8002c4e:	e7f3      	b.n	8002c38 <prvIdleTask+0x8>
 8002c50:	e000ed04 	.word	0xe000ed04

08002c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	e00c      	b.n	8002c7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <prvInitialiseTaskLists+0x60>)
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff faaa 	bl	80021c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d9ef      	bls.n	8002c60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c80:	480d      	ldr	r0, [pc, #52]	@ (8002cb8 <prvInitialiseTaskLists+0x64>)
 8002c82:	f7ff faa1 	bl	80021c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c86:	480d      	ldr	r0, [pc, #52]	@ (8002cbc <prvInitialiseTaskLists+0x68>)
 8002c88:	f7ff fa9e 	bl	80021c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <prvInitialiseTaskLists+0x6c>)
 8002c8e:	f7ff fa9b 	bl	80021c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002c92:	480c      	ldr	r0, [pc, #48]	@ (8002cc4 <prvInitialiseTaskLists+0x70>)
 8002c94:	f7ff fa98 	bl	80021c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002c98:	480b      	ldr	r0, [pc, #44]	@ (8002cc8 <prvInitialiseTaskLists+0x74>)
 8002c9a:	f7ff fa95 	bl	80021c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <prvInitialiseTaskLists+0x78>)
 8002ca0:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <prvInitialiseTaskLists+0x64>)
 8002ca2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <prvInitialiseTaskLists+0x7c>)
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <prvInitialiseTaskLists+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200000d4 	.word	0x200000d4
 8002cb8:	20000138 	.word	0x20000138
 8002cbc:	2000014c 	.word	0x2000014c
 8002cc0:	20000168 	.word	0x20000168
 8002cc4:	2000017c 	.word	0x2000017c
 8002cc8:	20000194 	.word	0x20000194
 8002ccc:	20000160 	.word	0x20000160
 8002cd0:	20000164 	.word	0x20000164

08002cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cda:	e019      	b.n	8002d10 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002cdc:	f000 fa52 	bl	8003184 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ce0:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <prvCheckTasksWaitingTermination+0x50>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fa9c 	bl	800222a <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <prvCheckTasksWaitingTermination+0x54>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d28 <prvCheckTasksWaitingTermination+0x54>)
 8002cfa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <prvCheckTasksWaitingTermination+0x58>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <prvCheckTasksWaitingTermination+0x58>)
 8002d04:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002d06:	f000 fa6f 	bl	80031e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f810 	bl	8002d30 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <prvCheckTasksWaitingTermination+0x58>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e1      	bne.n	8002cdc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000017c 	.word	0x2000017c
 8002d28:	200001a8 	.word	0x200001a8
 8002d2c:	20000190 	.word	0x20000190

08002d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fc87 	bl	8003650 <vPortFree>
            vPortFree( pxTCB );
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fc84 	bl	8003650 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <prvResetNextTaskUnblockTime+0x30>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <prvResetNextTaskUnblockTime+0x34>)
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d66:	e005      	b.n	8002d74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <prvResetNextTaskUnblockTime+0x30>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <prvResetNextTaskUnblockTime+0x34>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000160 	.word	0x20000160
 8002d84:	200001c8 	.word	0x200001c8

08002d88 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b04      	subs	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002da0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3b04      	subs	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b04      	subs	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <pxPortInitialiseStack+0x64>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b14      	subs	r3, #20
 8002dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3b04      	subs	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f06f 0202 	mvn.w	r2, #2
 8002dd6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b20      	subs	r3, #32
 8002ddc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	08002df1 	.word	0x08002df1

08002df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002dfa:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <prvTaskExitError+0x58>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d00b      	beq.n	8002e1c <prvTaskExitError+0x2c>
    __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	60fb      	str	r3, [r7, #12]
}
 8002e16:	bf00      	nop
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <prvTaskExitError+0x28>
    __asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	60bb      	str	r3, [r7, #8]
}
 8002e2e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e30:	bf00      	nop
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0fc      	beq.n	8002e32 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000010 	.word	0x20000010
 8002e4c:	00000000 	.word	0x00000000

08002e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <pxCurrentTCBConst2>)
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	6808      	ldr	r0, [r1, #0]
 8002e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	f380 8809 	msr	PSP, r0
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f380 8811 	msr	BASEPRI, r0
 8002e6a:	4770      	bx	lr
 8002e6c:	f3af 8000 	nop.w

08002e70 <pxCurrentTCBConst2>:
 8002e70:	200000d0 	.word	0x200000d0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop

08002e78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e78:	4808      	ldr	r0, [pc, #32]	@ (8002e9c <prvPortStartFirstTask+0x24>)
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	f380 8808 	msr	MSP, r0
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f380 8814 	msr	CONTROL, r0
 8002e8a:	b662      	cpsie	i
 8002e8c:	b661      	cpsie	f
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	df00      	svc	0
 8002e98:	bf00      	nop
 8002e9a:	0000      	.short	0x0000
 8002e9c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop

08002ea4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	@ 0x30
 8002ea8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eaa:	4b69      	ldr	r3, [pc, #420]	@ (8003050 <xPortStartScheduler+0x1ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a69      	ldr	r2, [pc, #420]	@ (8003054 <xPortStartScheduler+0x1b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10b      	bne.n	8002ecc <xPortStartScheduler+0x28>
    __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ecc:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <xPortStartScheduler+0x1ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a61      	ldr	r2, [pc, #388]	@ (8003058 <xPortStartScheduler+0x1b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10b      	bne.n	8002eee <xPortStartScheduler+0x4a>
    __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	623b      	str	r3, [r7, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <xPortStartScheduler+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	332c      	adds	r3, #44	@ 0x2c
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a59      	ldr	r2, [pc, #356]	@ (8003060 <xPortStartScheduler+0x1bc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <xPortStartScheduler+0x74>
    __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61fb      	str	r3, [r7, #28]
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1a:	3338      	adds	r3, #56	@ 0x38
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a51      	ldr	r2, [pc, #324]	@ (8003064 <xPortStartScheduler+0x1c0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <xPortStartScheduler+0x98>
    __asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61bb      	str	r3, [r7, #24]
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f40:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <xPortStartScheduler+0x1c4>)
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	22ff      	movs	r2, #255	@ 0xff
 8002f50:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b41      	ldr	r3, [pc, #260]	@ (800306c <xPortStartScheduler+0x1c8>)
 8002f66:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002f68:	4b40      	ldr	r3, [pc, #256]	@ (800306c <xPortStartScheduler+0x1c8>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <xPortStartScheduler+0xe4>
    __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	617b      	str	r3, [r7, #20]
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <xPortStartScheduler+0x11a>
    __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	613b      	str	r3, [r7, #16]
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b80      	cmp	r3, #128	@ 0x80
 8002fc8:	d0f1      	beq.n	8002fae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d103      	bne.n	8002fd8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e004      	b.n	8002fe2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002fe0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fe2:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	4a21      	ldr	r2, [pc, #132]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002fea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <xPortStartScheduler+0x1cc>)
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003000:	4b1c      	ldr	r3, [pc, #112]	@ (8003074 <xPortStartScheduler+0x1d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1b      	ldr	r2, [pc, #108]	@ (8003074 <xPortStartScheduler+0x1d0>)
 8003006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800300a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <xPortStartScheduler+0x1d0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <xPortStartScheduler+0x1d0>)
 8003012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003016:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003018:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <xPortStartScheduler+0x1d4>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800301e:	f000 f96d 	bl	80032fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003022:	4b16      	ldr	r3, [pc, #88]	@ (800307c <xPortStartScheduler+0x1d8>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003028:	f000 f98c 	bl	8003344 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <xPortStartScheduler+0x1dc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <xPortStartScheduler+0x1dc>)
 8003032:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003038:	f7ff ff1e 	bl	8002e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800303c:	f7ff fd8c 	bl	8002b58 <vTaskSwitchContext>
    prvTaskExitError();
 8003040:	f7ff fed6 	bl	8002df0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3730      	adds	r7, #48	@ 0x30
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	410fc271 	.word	0x410fc271
 8003058:	410fc270 	.word	0x410fc270
 800305c:	e000ed08 	.word	0xe000ed08
 8003060:	08002e51 	.word	0x08002e51
 8003064:	08003241 	.word	0x08003241
 8003068:	e000e400 	.word	0xe000e400
 800306c:	200001d4 	.word	0x200001d4
 8003070:	200001d8 	.word	0x200001d8
 8003074:	e000ed20 	.word	0xe000ed20
 8003078:	e000ed1c 	.word	0xe000ed1c
 800307c:	20000010 	.word	0x20000010
 8003080:	e000ef34 	.word	0xe000ef34

08003084 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800308a:	4b38      	ldr	r3, [pc, #224]	@ (800316c <vInitPrioGroupValue+0xe8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <vInitPrioGroupValue+0xec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10b      	bne.n	80030ac <vInitPrioGroupValue+0x28>
    __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	613b      	str	r3, [r7, #16]
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030ac:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <vInitPrioGroupValue+0xe8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a30      	ldr	r2, [pc, #192]	@ (8003174 <vInitPrioGroupValue+0xf0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10b      	bne.n	80030ce <vInitPrioGroupValue+0x4a>
    __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60fb      	str	r3, [r7, #12]
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003178 <vInitPrioGroupValue+0xf4>)
 80030d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	22ff      	movs	r2, #255	@ 0xff
 80030de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <vInitPrioGroupValue+0xf8>)
 80030f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030fc:	e009      	b.n	8003112 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 8003106:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b80      	cmp	r3, #128	@ 0x80
 800311c:	d0ef      	beq.n	80030fe <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00b      	beq.n	8003142 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	60bb      	str	r3, [r7, #8]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 800314a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003154:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <vInitPrioGroupValue+0xfc>)
 8003156:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00
 8003170:	410fc271 	.word	0x410fc271
 8003174:	410fc270 	.word	0x410fc270
 8003178:	e000e400 	.word	0xe000e400
 800317c:	200001d4 	.word	0x200001d4
 8003180:	200001d8 	.word	0x200001d8

08003184 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
    __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	607b      	str	r3, [r7, #4]
}
 800319c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <vPortEnterCritical+0x5c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	4a0e      	ldr	r2, [pc, #56]	@ (80031e0 <vPortEnterCritical+0x5c>)
 80031a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <vPortEnterCritical+0x5c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d110      	bne.n	80031d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <vPortEnterCritical+0x60>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	603b      	str	r3, [r7, #0]
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	e7fd      	b.n	80031ce <vPortEnterCritical+0x4a>
    }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000010 	.word	0x20000010
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <vPortExitCritical+0x50>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <vPortExitCritical+0x26>
    __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	607b      	str	r3, [r7, #4]
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <vPortExitCritical+0x50>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <vPortExitCritical+0x50>)
 8003216:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003218:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <vPortExitCritical+0x50>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <vPortExitCritical+0x44>
 8003220:	2300      	movs	r3, #0
 8003222:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800322a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000010 	.word	0x20000010
 800323c:	00000000 	.word	0x00000000

08003240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003240:	f3ef 8009 	mrs	r0, PSP
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <pxCurrentTCBConst>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f01e 0f10 	tst.w	lr, #16
 8003250:	bf08      	it	eq
 8003252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	6010      	str	r0, [r2, #0]
 800325c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003264:	f380 8811 	msr	BASEPRI, r0
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f7ff fc72 	bl	8002b58 <vTaskSwitchContext>
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f380 8811 	msr	BASEPRI, r0
 800327c:	bc09      	pop	{r0, r3}
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	6808      	ldr	r0, [r1, #0]
 8003282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	f01e 0f10 	tst.w	lr, #16
 800328a:	bf08      	it	eq
 800328c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003290:	f380 8809 	msr	PSP, r0
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst>:
 80032a0:	200000d0 	.word	0x200000d0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
    __asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	607b      	str	r3, [r7, #4]
}
 80032c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80032c2:	f002 f823 	bl	800530c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032c6:	f7ff fb47 	bl	8002958 <xTaskIncrementTick>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80032d0:	f002 f87a 	bl	80053c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032d4:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <SysTick_Handler+0x50>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e001      	b.n	80032e2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80032de:	f002 f857 	bl	8005390 <SEGGER_SYSVIEW_RecordExitISR>
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f383 8811 	msr	BASEPRI, r3
}
 80032ec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <vPortSetupTimerInterrupt+0x34>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <vPortSetupTimerInterrupt+0x38>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800330c:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <vPortSetupTimerInterrupt+0x3c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <vPortSetupTimerInterrupt+0x40>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <vPortSetupTimerInterrupt+0x44>)
 800331a:	3b01      	subs	r3, #1
 800331c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800331e:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <vPortSetupTimerInterrupt+0x34>)
 8003320:	2207      	movs	r2, #7
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e010 	.word	0xe000e010
 8003334:	e000e018 	.word	0xe000e018
 8003338:	20000000 	.word	0x20000000
 800333c:	10624dd3 	.word	0x10624dd3
 8003340:	e000e014 	.word	0xe000e014

08003344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003354 <vPortEnableVFP+0x10>
 8003348:	6801      	ldr	r1, [r0, #0]
 800334a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800334e:	6001      	str	r1, [r0, #0]
 8003350:	4770      	bx	lr
 8003352:	0000      	.short	0x0000
 8003354:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop

0800335c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003362:	f3ef 8305 	mrs	r3, IPSR
 8003366:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d915      	bls.n	800339a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <vPortValidateInterruptPriority+0x74>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003378:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <vPortValidateInterruptPriority+0x78>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	7afa      	ldrb	r2, [r7, #11]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20b      	bcs.n	800339a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	607b      	str	r3, [r7, #4]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <vPortValidateInterruptPriority+0x7c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <vPortValidateInterruptPriority+0x80>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90b      	bls.n	80033c2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	603b      	str	r3, [r7, #0]
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <vPortValidateInterruptPriority+0x62>
    }
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e3f0 	.word	0xe000e3f0
 80033d4:	200001d4 	.word	0x200001d4
 80033d8:	e000ed0c 	.word	0xe000ed0c
 80033dc:	200001d8 	.word	0x200001d8

080033e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	@ 0x38
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d022      	beq.n	800343c <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80033f6:	2308      	movs	r3, #8
 80033f8:	43db      	mvns	r3, r3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d81b      	bhi.n	8003438 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003400:	2208      	movs	r2, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	2b00      	cmp	r3, #0
 8003410:	d014      	beq.n	800343c <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	f1c3 0308 	rsb	r3, r3, #8
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	43db      	mvns	r3, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d804      	bhi.n	8003432 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	4413      	add	r3, r2
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e004      	b.n	800343c <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	e001      	b.n	800343c <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800343c:	f7ff f966 	bl	800270c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003440:	4b7c      	ldr	r3, [pc, #496]	@ (8003634 <pvPortMalloc+0x254>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003448:	f000 f97c 	bl	8003744 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f2c0 80d7 	blt.w	8003602 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80d3 	beq.w	8003602 <pvPortMalloc+0x222>
 800345c:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <pvPortMalloc+0x258>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	f200 80cd 	bhi.w	8003602 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003468:	4b74      	ldr	r3, [pc, #464]	@ (800363c <pvPortMalloc+0x25c>)
 800346a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800346c:	4b73      	ldr	r3, [pc, #460]	@ (800363c <pvPortMalloc+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003474:	4a72      	ldr	r2, [pc, #456]	@ (8003640 <pvPortMalloc+0x260>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d305      	bcc.n	8003486 <pvPortMalloc+0xa6>
 800347a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347c:	4a71      	ldr	r2, [pc, #452]	@ (8003644 <pvPortMalloc+0x264>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d801      	bhi.n	8003486 <pvPortMalloc+0xa6>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <pvPortMalloc+0xa8>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d129      	bne.n	80034e0 <pvPortMalloc+0x100>
    __asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	61fb      	str	r3, [r7, #28]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80034a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	4a63      	ldr	r2, [pc, #396]	@ (8003640 <pvPortMalloc+0x260>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d305      	bcc.n	80034c2 <pvPortMalloc+0xe2>
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	4a62      	ldr	r2, [pc, #392]	@ (8003644 <pvPortMalloc+0x264>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d801      	bhi.n	80034c2 <pvPortMalloc+0xe2>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <pvPortMalloc+0xe4>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <pvPortMalloc+0x100>
    __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61bb      	str	r3, [r7, #24]
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d903      	bls.n	80034f2 <pvPortMalloc+0x112>
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1d8      	bne.n	80034a4 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80034f2:	4b50      	ldr	r3, [pc, #320]	@ (8003634 <pvPortMalloc+0x254>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f000 8082 	beq.w	8003602 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2208      	movs	r2, #8
 8003504:	4413      	add	r3, r2
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	4a4d      	ldr	r2, [pc, #308]	@ (8003640 <pvPortMalloc+0x260>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d305      	bcc.n	800351c <pvPortMalloc+0x13c>
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	4a4c      	ldr	r2, [pc, #304]	@ (8003644 <pvPortMalloc+0x264>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d801      	bhi.n	800351c <pvPortMalloc+0x13c>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <pvPortMalloc+0x13e>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <pvPortMalloc+0x15a>
    __asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	617b      	str	r3, [r7, #20]
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	e7fd      	b.n	8003536 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800353a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d90b      	bls.n	8003564 <pvPortMalloc+0x184>
    __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	613b      	str	r3, [r7, #16]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad2      	subs	r2, r2, r3
 800356c:	2308      	movs	r3, #8
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	429a      	cmp	r2, r3
 8003572:	d924      	bls.n	80035be <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <pvPortMalloc+0x1be>
    __asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	60fb      	str	r3, [r7, #12]
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	e7fd      	b.n	800359a <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad2      	subs	r2, r2, r3
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <pvPortMalloc+0x258>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <pvPortMalloc+0x258>)
 80035ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <pvPortMalloc+0x258>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <pvPortMalloc+0x268>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d203      	bcs.n	80035e0 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <pvPortMalloc+0x258>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003648 <pvPortMalloc+0x268>)
 80035de:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80035f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035f8:	4b14      	ldr	r3, [pc, #80]	@ (800364c <pvPortMalloc+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	4a13      	ldr	r2, [pc, #76]	@ (800364c <pvPortMalloc+0x26c>)
 8003600:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8003602:	f7ff f891 	bl	8002728 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <pvPortMalloc+0x248>
    __asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60bb      	str	r3, [r7, #8]
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <pvPortMalloc+0x244>
    return pvReturn;
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800362a:	4618      	mov	r0, r3
 800362c:	3738      	adds	r7, #56	@ 0x38
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20012de4 	.word	0x20012de4
 8003638:	20012de8 	.word	0x20012de8
 800363c:	20012ddc 	.word	0x20012ddc
 8003640:	200001dc 	.word	0x200001dc
 8003644:	20012ddb 	.word	0x20012ddb
 8003648:	20012dec 	.word	0x20012dec
 800364c:	20012df0 	.word	0x20012df0

08003650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d064      	beq.n	800372c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003662:	2308      	movs	r3, #8
 8003664:	425b      	negs	r3, r3
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4a30      	ldr	r2, [pc, #192]	@ (8003734 <vPortFree+0xe4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d305      	bcc.n	8003684 <vPortFree+0x34>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4a2f      	ldr	r2, [pc, #188]	@ (8003738 <vPortFree+0xe8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d801      	bhi.n	8003684 <vPortFree+0x34>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <vPortFree+0x36>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <vPortFree+0x52>
    __asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	617b      	str	r3, [r7, #20]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <vPortFree+0x72>
    __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	613b      	str	r3, [r7, #16]
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <vPortFree+0x92>
    __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	0fdb      	lsrs	r3, r3, #31
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01c      	beq.n	800372c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003706:	f7ff f801 	bl	800270c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <vPortFree+0xec>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4413      	add	r3, r2
 8003714:	4a09      	ldr	r2, [pc, #36]	@ (800373c <vPortFree+0xec>)
 8003716:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003718:	69b8      	ldr	r0, [r7, #24]
 800371a:	f000 f86d 	bl	80037f8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <vPortFree+0xf0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	4a06      	ldr	r2, [pc, #24]	@ (8003740 <vPortFree+0xf0>)
 8003726:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003728:	f7fe fffe 	bl	8002728 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800372c:	bf00      	nop
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200001dc 	.word	0x200001dc
 8003738:	20012ddb 	.word	0x20012ddb
 800373c:	20012de8 	.word	0x20012de8
 8003740:	20012df4 	.word	0x20012df4

08003744 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800374a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800374e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003750:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <prvHeapInit+0xa0>)
 8003752:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3307      	adds	r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0307 	bic.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <prvHeapInit+0xa0>)
 8003774:	4413      	add	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <prvHeapInit+0xa4>)
 800377c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800377e:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <prvHeapInit+0xa4>)
 8003780:	2200      	movs	r2, #0
 8003782:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4413      	add	r3, r2
 800378a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800378c:	2208      	movs	r2, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <prvHeapInit+0xa8>)
 80037a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <prvHeapInit+0xa8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <prvHeapInit+0xa8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <prvHeapInit+0xa8>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <prvHeapInit+0xac>)
 80037ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <prvHeapInit+0xb0>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	200001dc 	.word	0x200001dc
 80037e8:	20012ddc 	.word	0x20012ddc
 80037ec:	20012de4 	.word	0x20012de4
 80037f0:	20012dec 	.word	0x20012dec
 80037f4:	20012de8 	.word	0x20012de8

080037f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <prvInsertBlockIntoFreeList+0xe4>)
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e002      	b.n	800380c <prvInsertBlockIntoFreeList+0x14>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d8f7      	bhi.n	8003806 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4a30      	ldr	r2, [pc, #192]	@ (80038dc <prvInsertBlockIntoFreeList+0xe4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4a2f      	ldr	r2, [pc, #188]	@ (80038e0 <prvInsertBlockIntoFreeList+0xe8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d305      	bcc.n	8003832 <prvInsertBlockIntoFreeList+0x3a>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <prvInsertBlockIntoFreeList+0xec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d801      	bhi.n	8003832 <prvInsertBlockIntoFreeList+0x3a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <prvInsertBlockIntoFreeList+0x3c>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d108      	bne.n	8003874 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	441a      	add	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	441a      	add	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d118      	bne.n	80038ba <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b16      	ldr	r3, [pc, #88]	@ (80038e8 <prvInsertBlockIntoFreeList+0xf0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d00d      	beq.n	80038b0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e008      	b.n	80038c2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80038b0:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <prvInsertBlockIntoFreeList+0xf0>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e003      	b.n	80038c2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d002      	beq.n	80038d0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20012ddc 	.word	0x20012ddc
 80038e0:	200001dc 	.word	0x200001dc
 80038e4:	20012ddb 	.word	0x20012ddb
 80038e8:	20012de4 	.word	0x20012de4

080038ec <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80038f0:	4803      	ldr	r0, [pc, #12]	@ (8003900 <_cbSendSystemDesc+0x14>)
 80038f2:	f001 fcb5 	bl	8005260 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038f6:	4803      	ldr	r0, [pc, #12]	@ (8003904 <_cbSendSystemDesc+0x18>)
 80038f8:	f001 fcb2 	bl	8005260 <SEGGER_SYSVIEW_SendSysDesc>
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	0800637c 	.word	0x0800637c
 8003904:	080063b4 	.word	0x080063b4

08003908 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <SEGGER_SYSVIEW_Conf+0x20>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <SEGGER_SYSVIEW_Conf+0x20>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <SEGGER_SYSVIEW_Conf+0x24>)
 8003916:	4a06      	ldr	r2, [pc, #24]	@ (8003930 <SEGGER_SYSVIEW_Conf+0x28>)
 8003918:	f001 f928 	bl	8004b6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800391c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003920:	f001 f968 	bl	8004bf4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000000 	.word	0x20000000
 800392c:	080038ed 	.word	0x080038ed
 8003930:	08006450 	.word	0x08006450

08003934 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b085      	sub	sp, #20
 8003938:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	e033      	b.n	80039a8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003940:	491e      	ldr	r1, [pc, #120]	@ (80039bc <_cbSendTaskList+0x88>)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	491a      	ldr	r1, [pc, #104]	@ (80039bc <_cbSendTaskList+0x88>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3304      	adds	r3, #4
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	4c16      	ldr	r4, [pc, #88]	@ (80039bc <_cbSendTaskList+0x88>)
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4423      	add	r3, r4
 8003970:	3308      	adds	r3, #8
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	4d11      	ldr	r5, [pc, #68]	@ (80039bc <_cbSendTaskList+0x88>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	442b      	add	r3, r5
 8003982:	330c      	adds	r3, #12
 8003984:	681d      	ldr	r5, [r3, #0]
 8003986:	4e0d      	ldr	r6, [pc, #52]	@ (80039bc <_cbSendTaskList+0x88>)
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4433      	add	r3, r6
 8003994:	3310      	adds	r3, #16
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	462b      	mov	r3, r5
 800399c:	4622      	mov	r2, r4
 800399e:	f000 f8bd 	bl	8003b1c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3301      	adds	r3, #1
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <_cbSendTaskList+0x8c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3c6      	bcc.n	8003940 <_cbSendTaskList+0xc>
  }
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	20012df8 	.word	0x20012df8
 80039c0:	20012e98 	.word	0x20012e98

080039c4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80039cc:	f7fe ffae 	bl	800292c <xTaskGetTickCountFromISR>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2200      	movs	r2, #0
 80039d4:	469a      	mov	sl, r3
 80039d6:	4693      	mov	fp, r2
 80039d8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80039dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	f04f 0a00 	mov.w	sl, #0
 80039e8:	f04f 0b00 	mov.w	fp, #0
 80039ec:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80039f0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80039f4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80039f8:	4652      	mov	r2, sl
 80039fa:	465b      	mov	r3, fp
 80039fc:	1a14      	subs	r4, r2, r0
 80039fe:	eb63 0501 	sbc.w	r5, r3, r1
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	00ab      	lsls	r3, r5, #2
 8003a0c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a10:	00a2      	lsls	r2, r4, #2
 8003a12:	4614      	mov	r4, r2
 8003a14:	461d      	mov	r5, r3
 8003a16:	eb14 0800 	adds.w	r8, r4, r0
 8003a1a:	eb45 0901 	adc.w	r9, r5, r1
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a32:	4690      	mov	r8, r2
 8003a34:	4699      	mov	r9, r3
 8003a36:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a4c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	492b      	ldr	r1, [pc, #172]	@ (8003b0c <SYSVIEW_AddTask+0xc0>)
 8003a5e:	68b8      	ldr	r0, [r7, #8]
 8003a60:	f001 ffce 	bl	8005a00 <memcmp>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04b      	beq.n	8003b02 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a6a:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b07      	cmp	r3, #7
 8003a70:	d903      	bls.n	8003a7a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a72:	4828      	ldr	r0, [pc, #160]	@ (8003b14 <SYSVIEW_AddTask+0xc8>)
 8003a74:	f001 ff34 	bl	80058e0 <SEGGER_SYSVIEW_Warn>
    return;
 8003a78:	e044      	b.n	8003b04 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4926      	ldr	r1, [pc, #152]	@ (8003b18 <SYSVIEW_AddTask+0xcc>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4921      	ldr	r1, [pc, #132]	@ (8003b18 <SYSVIEW_AddTask+0xcc>)
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	491b      	ldr	r1, [pc, #108]	@ (8003b18 <SYSVIEW_AddTask+0xcc>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4916      	ldr	r1, [pc, #88]	@ (8003b18 <SYSVIEW_AddTask+0xcc>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	330c      	adds	r3, #12
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4910      	ldr	r1, [pc, #64]	@ (8003b18 <SYSVIEW_AddTask+0xcc>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <SYSVIEW_AddTask+0xc4>)
 8003aee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f80e 	bl	8003b1c <SYSVIEW_SendTaskInfo>
 8003b00:	e000      	b.n	8003b04 <SYSVIEW_AddTask+0xb8>
    return;
 8003b02:	bf00      	nop

}
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	080063c4 	.word	0x080063c4
 8003b10:	20012e98 	.word	0x20012e98
 8003b14:	080063cc 	.word	0x080063cc
 8003b18:	20012df8 	.word	0x20012df8

08003b1c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	2218      	movs	r2, #24
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 ff74 	bl	8005a20 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b4c:	f107 0310 	add.w	r3, r7, #16
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 fa8d 	bl	8005070 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b56:	bf00      	nop
 8003b58:	3728      	adds	r7, #40	@ 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b66:	4b26      	ldr	r3, [pc, #152]	@ (8003c00 <_DoInit+0xa0>)
 8003b68:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b6a:	22a8      	movs	r2, #168	@ 0xa8
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f001 ff56 	bl	8005a20 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2203      	movs	r2, #3
 8003b78:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <_DoInit+0xa4>)
 8003b84:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <_DoInit+0xa8>)
 8003b8a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b92:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <_DoInit+0xa4>)
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <_DoInit+0xac>)
 8003bb0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003bca:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e00c      	b.n	8003bee <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1c3 030f 	rsb	r3, r3, #15
 8003bda:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <_DoInit+0xb0>)
 8003bdc:	5cd1      	ldrb	r1, [r2, r3]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	460a      	mov	r2, r1
 8003be6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b0f      	cmp	r3, #15
 8003bf2:	d9ef      	bls.n	8003bd4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003bf4:	f3bf 8f5f 	dmb	sy
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20012e9c 	.word	0x20012e9c
 8003c04:	0800641c 	.word	0x0800641c
 8003c08:	20012f44 	.word	0x20012f44
 8003c0c:	20013344 	.word	0x20013344
 8003c10:	08006458 	.word	0x08006458

08003c14 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	@ 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c20:	4b3e      	ldr	r3, [pc, #248]	@ (8003d1c <SEGGER_RTT_ReadNoLock+0x108>)
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b53      	cmp	r3, #83	@ 0x53
 8003c2c:	d001      	beq.n	8003c32 <SEGGER_RTT_ReadNoLock+0x1e>
 8003c2e:	f7ff ff97 	bl	8003b60 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3360      	adds	r3, #96	@ 0x60
 8003c3e:	4a37      	ldr	r2, [pc, #220]	@ (8003d1c <SEGGER_RTT_ReadNoLock+0x108>)
 8003c40:	4413      	add	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d92b      	bls.n	8003cb8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bf28      	it	cs
 8003c72:	4613      	movcs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7c:	4413      	add	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c86:	f001 feff 	bl	8005a88 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4413      	add	r3, r2
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d101      	bne.n	8003cb8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bf28      	it	cs
 8003cc8:	4613      	movcs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	4413      	add	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6939      	ldr	r1, [r7, #16]
 8003ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ce2:	f001 fed1 	bl	8005a88 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4413      	add	r3, r2
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d10:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3730      	adds	r7, #48	@ 0x30
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20012e9c 	.word	0x20012e9c

08003d20 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b53      	cmp	r3, #83	@ 0x53
 8003d3a:	d001      	beq.n	8003d40 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d3c:	f7ff ff10 	bl	8003b60 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d40:	f3ef 8311 	mrs	r3, BASEPRI
 8003d44:	f04f 0120 	mov.w	r1, #32
 8003d48:	f381 8811 	msr	BASEPRI, r1
 8003d4c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d4e:	4b35      	ldr	r3, [pc, #212]	@ (8003e24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d50:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	440b      	add	r3, r1
 8003d66:	3304      	adds	r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dbeb      	blt.n	8003d56 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d7e:	e000      	b.n	8003d82 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d80:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	da3f      	bge.n	8003e0c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d8c:	6939      	ldr	r1, [r7, #16]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003da0:	6939      	ldr	r1, [r7, #16]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	3304      	adds	r3, #4
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003db6:	6939      	ldr	r1, [r7, #16]
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3320      	adds	r3, #32
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3328      	adds	r3, #40	@ 0x28
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003dde:	6939      	ldr	r1, [r7, #16]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	3324      	adds	r3, #36	@ 0x24
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003df2:	6939      	ldr	r1, [r7, #16]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	332c      	adds	r3, #44	@ 0x2c
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e06:	f3bf 8f5f 	dmb	sy
 8003e0a:	e002      	b.n	8003e12 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e10:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e18:	69fb      	ldr	r3, [r7, #28]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20012e9c 	.word	0x20012e9c

08003e28 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003e36:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b53      	cmp	r3, #83	@ 0x53
 8003e42:	d001      	beq.n	8003e48 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e44:	f7ff fe8c 	bl	8003b60 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e48:	4b1c      	ldr	r3, [pc, #112]	@ (8003ebc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003e4a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d82c      	bhi.n	8003eac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003e52:	f3ef 8311 	mrs	r3, BASEPRI
 8003e56:	f04f 0120 	mov.w	r1, #32
 8003e5a:	f381 8811 	msr	BASEPRI, r1
 8003e5e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	3360      	adds	r3, #96	@ 0x60
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e9a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e9c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eaa:	e002      	b.n	8003eb2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3728      	adds	r7, #40	@ 0x28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20012e9c 	.word	0x20012e9c

08003ec0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e022      	b.n	8003f24 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	60fa      	str	r2, [r7, #12]
 8003ee8:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b80      	cmp	r3, #128	@ 0x80
 8003eee:	d90a      	bls.n	8003f06 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003ef4:	e007      	b.n	8003f06 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	1c53      	adds	r3, r2, #1
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	60f9      	str	r1, [r7, #12]
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <_EncodeStr+0x58>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ee      	bne.n	8003ef6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3307      	adds	r3, #7
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f52:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <_HandleIncomingPacket+0xd8>)
 8003f54:	7e1b      	ldrb	r3, [r3, #24]
 8003f56:	4618      	mov	r0, r3
 8003f58:	1cfb      	adds	r3, r7, #3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fe59 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
 8003f62:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d057      	beq.n	800401a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d031      	beq.n	8003fd4 <_HandleIncomingPacket+0x88>
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	dc40      	bgt.n	8003ff6 <_HandleIncomingPacket+0xaa>
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	dc15      	bgt.n	8003fa4 <_HandleIncomingPacket+0x58>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	dd3c      	ble.n	8003ff6 <_HandleIncomingPacket+0xaa>
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d839      	bhi.n	8003ff6 <_HandleIncomingPacket+0xaa>
 8003f82:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <_HandleIncomingPacket+0x3c>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fab 	.word	0x08003fab
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb7 	.word	0x08003fb7
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fcf 	.word	0x08003fcf
 8003fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fa6:	d033      	beq.n	8004010 <_HandleIncomingPacket+0xc4>
 8003fa8:	e025      	b.n	8003ff6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003faa:	f000 fee7 	bl	8004d7c <SEGGER_SYSVIEW_Start>
      break;
 8003fae:	e034      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003fb0:	f000 ff9e 	bl	8004ef0 <SEGGER_SYSVIEW_Stop>
      break;
 8003fb4:	e031      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003fb6:	f001 f977 	bl	80052a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003fba:	e02e      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003fbc:	f001 f93c 	bl	8005238 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003fc0:	e02b      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003fc2:	f000 ffbb 	bl	8004f3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003fc6:	e028      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003fc8:	f001 fc38 	bl	800583c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003fcc:	e025      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003fce:	f001 fc17 	bl	8005800 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003fd2:	e022      	b.n	800401a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <_HandleIncomingPacket+0xd8>)
 8003fd6:	7e1b      	ldrb	r3, [r3, #24]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	1cfb      	adds	r3, r7, #3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7ff fe18 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
 8003fe4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fb7c 	bl	80056ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003ff4:	e00e      	b.n	8004014 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da0c      	bge.n	8004018 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <_HandleIncomingPacket+0xd8>)
 8004000:	7e1b      	ldrb	r3, [r3, #24]
 8004002:	4618      	mov	r0, r3
 8004004:	1cfb      	adds	r3, r7, #3
 8004006:	2201      	movs	r2, #1
 8004008:	4619      	mov	r1, r3
 800400a:	f7ff fe03 	bl	8003c14 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800400e:	e003      	b.n	8004018 <_HandleIncomingPacket+0xcc>
      break;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <_HandleIncomingPacket+0xce>
      break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <_HandleIncomingPacket+0xce>
      break;
 8004018:	bf00      	nop
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20013b5c 	.word	0x20013b5c

08004028 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	@ 0x30
 800402c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800402e:	2301      	movs	r3, #1
 8004030:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	3301      	adds	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403c:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004042:	e00b      	b.n	800405c <_TrySendOverflowPacket+0x34>
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	b2da      	uxtb	r2, r3
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800404e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	09db      	lsrs	r3, r3, #7
 800405a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004060:	d8f0      	bhi.n	8004044 <_TrySendOverflowPacket+0x1c>
 8004062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004070:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004072:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <_TrySendOverflowPacket+0xe0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004078:	4b22      	ldr	r3, [pc, #136]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	e00b      	b.n	80040a4 <_TrySendOverflowPacket+0x7c>
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	6279      	str	r1, [r7, #36]	@ 0x24
 8004096:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80040a8:	d8f0      	bhi.n	800408c <_TrySendOverflowPacket+0x64>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80040ba:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	4618      	mov	r0, r3
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	f7fc f880 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040d0:	4603      	mov	r3, r0
 80040d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040e0:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e004      	b.n	80040f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040ee:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a03      	ldr	r2, [pc, #12]	@ (8004104 <_TrySendOverflowPacket+0xdc>)
 80040f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040f8:	693b      	ldr	r3, [r7, #16]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3730      	adds	r7, #48	@ 0x30
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20013b5c 	.word	0x20013b5c
 8004108:	e0001004 	.word	0xe0001004

0800410c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	@ 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004118:	4b98      	ldr	r3, [pc, #608]	@ (800437c <_SendPacket+0x270>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d010      	beq.n	8004142 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004120:	4b96      	ldr	r3, [pc, #600]	@ (800437c <_SendPacket+0x270>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 812d 	beq.w	8004384 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800412a:	4b94      	ldr	r3, [pc, #592]	@ (800437c <_SendPacket+0x270>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d109      	bne.n	8004146 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004132:	f7ff ff79 	bl	8004028 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004136:	4b91      	ldr	r3, [pc, #580]	@ (800437c <_SendPacket+0x270>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	f040 8124 	bne.w	8004388 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004140:	e001      	b.n	8004146 <_SendPacket+0x3a>
    goto Send;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <_SendPacket+0x3c>
Send:
 8004146:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b1f      	cmp	r3, #31
 800414c:	d809      	bhi.n	8004162 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800414e:	4b8b      	ldr	r3, [pc, #556]	@ (800437c <_SendPacket+0x270>)
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8115 	bne.w	800438c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b17      	cmp	r3, #23
 8004166:	d807      	bhi.n	8004178 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3b01      	subs	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e0c4      	b.n	8004302 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b7f      	cmp	r3, #127	@ 0x7f
 8004184:	d912      	bls.n	80041ac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	09da      	lsrs	r2, r3, #7
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b01      	subs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	3a01      	subs	r2, #1
 800419e:	60fa      	str	r2, [r7, #12]
 80041a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e006      	b.n	80041ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80041be:	d807      	bhi.n	80041d0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e098      	b.n	8004302 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d6:	d212      	bcs.n	80041fe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	09da      	lsrs	r2, r3, #7
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	3a01      	subs	r2, #1
 80041f0:	60fa      	str	r2, [r7, #12]
 80041f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e081      	b.n	8004302 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004204:	d21d      	bcs.n	8004242 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0b9a      	lsrs	r2, r3, #14
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	09db      	lsrs	r3, r3, #7
 800421a:	b2db      	uxtb	r3, r3
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	3a01      	subs	r2, #1
 8004220:	60fa      	str	r2, [r7, #12]
 8004222:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	3a01      	subs	r2, #1
 8004234:	60fa      	str	r2, [r7, #12]
 8004236:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e05f      	b.n	8004302 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004248:	d228      	bcs.n	800429c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0d5a      	lsrs	r2, r3, #21
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b01      	subs	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0b9b      	lsrs	r3, r3, #14
 800425e:	b2db      	uxtb	r3, r3
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	3a01      	subs	r2, #1
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	09db      	lsrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	3a01      	subs	r2, #1
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	3a01      	subs	r2, #1
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e032      	b.n	8004302 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0f1a      	lsrs	r2, r3, #28
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0d5b      	lsrs	r3, r3, #21
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	3a01      	subs	r2, #1
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0b9b      	lsrs	r3, r3, #14
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	3a01      	subs	r2, #1
 80042cc:	60fa      	str	r2, [r7, #12]
 80042ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	60fa      	str	r2, [r7, #12]
 80042f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004302:	4b1f      	ldr	r3, [pc, #124]	@ (8004380 <_SendPacket+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004308:	4b1c      	ldr	r3, [pc, #112]	@ (800437c <_SendPacket+0x270>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e00b      	b.n	8004334 <_SendPacket+0x228>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	6279      	str	r1, [r7, #36]	@ 0x24
 8004326:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	09db      	lsrs	r3, r3, #7
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b7f      	cmp	r3, #127	@ 0x7f
 8004338:	d8f0      	bhi.n	800431c <_SendPacket+0x210>
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <_SendPacket+0x270>)
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	4618      	mov	r0, r3
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	f7fb ff39 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800435e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <_SendPacket+0x270>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	60d3      	str	r3, [r2, #12]
 800436c:	e00f      	b.n	800438e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800436e:	4b03      	ldr	r3, [pc, #12]	@ (800437c <_SendPacket+0x270>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b01      	ldr	r3, [pc, #4]	@ (800437c <_SendPacket+0x270>)
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e008      	b.n	800438e <_SendPacket+0x282>
 800437c:	20013b5c 	.word	0x20013b5c
 8004380:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004384:	bf00      	nop
 8004386:	e002      	b.n	800438e <_SendPacket+0x282>
      goto SendDone;
 8004388:	bf00      	nop
 800438a:	e000      	b.n	800438e <_SendPacket+0x282>
      goto SendDone;
 800438c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800438e:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <_SendPacket+0x2d4>)
 8004390:	7e1b      	ldrb	r3, [r3, #24]
 8004392:	4619      	mov	r1, r3
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <_SendPacket+0x2d8>)
 8004396:	460b      	mov	r3, r1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	440b      	add	r3, r1
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	336c      	adds	r3, #108	@ 0x6c
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <_SendPacket+0x2d4>)
 80043a6:	7e1b      	ldrb	r3, [r3, #24]
 80043a8:	4618      	mov	r0, r3
 80043aa:	490e      	ldr	r1, [pc, #56]	@ (80043e4 <_SendPacket+0x2d8>)
 80043ac:	4603      	mov	r3, r0
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4403      	add	r3, r0
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3370      	adds	r3, #112	@ 0x70
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d00b      	beq.n	80043d6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80043be:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <_SendPacket+0x2d4>)
 80043c0:	789b      	ldrb	r3, [r3, #2]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80043c6:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <_SendPacket+0x2d4>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043cc:	f7ff fdbe 	bl	8003f4c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <_SendPacket+0x2d4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043d6:	bf00      	nop
 80043d8:	3728      	adds	r7, #40	@ 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20013b5c 	.word	0x20013b5c
 80043e4:	20012e9c 	.word	0x20012e9c

080043e8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3301      	adds	r3, #1
 80043fe:	2b80      	cmp	r3, #128	@ 0x80
 8004400:	d80a      	bhi.n	8004418 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6051      	str	r1, [r2, #4]
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b80      	cmp	r3, #128	@ 0x80
 800441e:	d15a      	bne.n	80044d6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	e00b      	b.n	800445a <_StoreChar+0x72>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	1c59      	adds	r1, r3, #1
 800444a:	6279      	str	r1, [r7, #36]	@ 0x24
 800444c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	09db      	lsrs	r3, r3, #7
 8004458:	623b      	str	r3, [r7, #32]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2b7f      	cmp	r3, #127	@ 0x7f
 800445e:	d8f0      	bhi.n	8004442 <_StoreChar+0x5a>
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	627a      	str	r2, [r7, #36]	@ 0x24
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e00b      	b.n	8004492 <_StoreChar+0xaa>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1c59      	adds	r1, r3, #1
 8004482:	61f9      	str	r1, [r7, #28]
 8004484:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	09db      	lsrs	r3, r3, #7
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b7f      	cmp	r3, #127	@ 0x7f
 8004496:	d8f0      	bhi.n	800447a <_StoreChar+0x92>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	221a      	movs	r2, #26
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fe2b 	bl	800410c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fd39 	bl	8003f32 <_PreparePacket>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
  }
}
 80044d6:	bf00      	nop
 80044d8:	3728      	adds	r7, #40	@ 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80044f2:	2301      	movs	r3, #1
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80044fa:	e007      	b.n	800450c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	623b      	str	r3, [r7, #32]
    Width++;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d2f3      	bcs.n	80044fc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	d901      	bls.n	8004520 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d000      	beq.n	800452c <_PrintUnsigned+0x4c>
 800452a:	e01f      	b.n	800456c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01c      	beq.n	800456c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <_PrintUnsigned+0x68>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <_PrintUnsigned+0x68>
        c = '0';
 8004542:	2330      	movs	r3, #48	@ 0x30
 8004544:	76fb      	strb	r3, [r7, #27]
 8004546:	e001      	b.n	800454c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004548:	2320      	movs	r3, #32
 800454a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800454c:	e007      	b.n	800455e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	3b01      	subs	r3, #1
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004554:	7efb      	ldrb	r3, [r7, #27]
 8004556:	4619      	mov	r1, r3
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff45 	bl	80043e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <_PrintUnsigned+0x8c>
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	429a      	cmp	r2, r3
 800456a:	d3f0      	bcc.n	800454e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d903      	bls.n	800457a <_PrintUnsigned+0x9a>
      NumDigits--;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	e009      	b.n	800458e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d200      	bcs.n	800458e <_PrintUnsigned+0xae>
        break;
 800458c:	e005      	b.n	800459a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004598:	e7e8      	b.n	800456c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <_PrintUnsigned+0x128>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff ff13 	bl	80043e8 <_StoreChar>
    Digit /= Base;
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e3      	bne.n	800459a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d011      	beq.n	8004600 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80045dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045e2:	e006      	b.n	80045f2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	3b01      	subs	r3, #1
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80045ea:	2120      	movs	r1, #32
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fefb 	bl	80043e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <_PrintUnsigned+0x120>
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3f1      	bcc.n	80045e4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3728      	adds	r7, #40	@ 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	08006478 	.word	0x08006478

0800460c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfb8      	it	lt
 8004620:	425b      	neglt	r3, r3
 8004622:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004628:	e007      	b.n	800463a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004632:	613b      	str	r3, [r7, #16]
    Width++;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3301      	adds	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	429a      	cmp	r2, r3
 8004640:	daf3      	bge.n	800462a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d901      	bls.n	800464e <_PrintInt+0x42>
    Width = NumDigits;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <_PrintInt+0x5e>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	db04      	blt.n	8004664 <_PrintInt+0x58>
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <_PrintInt+0x5e>
    FieldWidth--;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	3b01      	subs	r3, #1
 8004668:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <_PrintInt+0x6e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d016      	beq.n	80046a8 <_PrintInt+0x9c>
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d111      	bne.n	80046a8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800468a:	e006      	b.n	800469a <_PrintInt+0x8e>
        FieldWidth--;
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	3b01      	subs	r3, #1
 8004690:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004692:	2120      	movs	r1, #32
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fea7 	bl	80043e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <_PrintInt+0x9c>
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d3f1      	bcc.n	800468c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da07      	bge.n	80046be <_PrintInt+0xb2>
    v = -v;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	425b      	negs	r3, r3
 80046b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80046b4:	212d      	movs	r1, #45	@ 0x2d
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff fe96 	bl	80043e8 <_StoreChar>
 80046bc:	e008      	b.n	80046d0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80046c8:	212b      	movs	r1, #43	@ 0x2b
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fe8c 	bl	80043e8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d019      	beq.n	800470e <_PrintInt+0x102>
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d114      	bne.n	800470e <_PrintInt+0x102>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d111      	bne.n	800470e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046f0:	e006      	b.n	8004700 <_PrintInt+0xf4>
        FieldWidth--;
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80046f8:	2130      	movs	r1, #48	@ 0x30
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fe74 	bl	80043e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <_PrintInt+0x102>
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3f1      	bcc.n	80046f2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fedf 	bl	80044e0 <_PrintUnsigned>
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b098      	sub	sp, #96	@ 0x60
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004738:	f3ef 8311 	mrs	r3, BASEPRI
 800473c:	f04f 0120 	mov.w	r1, #32
 8004740:	f381 8811 	msr	BASEPRI, r1
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004746:	48b7      	ldr	r0, [pc, #732]	@ (8004a24 <_VPrintTarget+0x2f8>)
 8004748:	f7ff fbf3 	bl	8003f32 <_PreparePacket>
 800474c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800474e:	4bb5      	ldr	r3, [pc, #724]	@ (8004a24 <_VPrintTarget+0x2f8>)
 8004750:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3301      	adds	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004772:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 81a8 	beq.w	8004acc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800477c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004780:	2b25      	cmp	r3, #37	@ 0x25
 8004782:	f040 8195 	bne.w	8004ab0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004786:	2300      	movs	r3, #0
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004796:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800479a:	3b23      	subs	r3, #35	@ 0x23
 800479c:	2b0d      	cmp	r3, #13
 800479e:	d83f      	bhi.n	8004820 <_VPrintTarget+0xf4>
 80047a0:	a201      	add	r2, pc, #4	@ (adr r2, 80047a8 <_VPrintTarget+0x7c>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	08004811 	.word	0x08004811
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004821 	.word	0x08004821
 80047b4:	08004821 	.word	0x08004821
 80047b8:	08004821 	.word	0x08004821
 80047bc:	08004821 	.word	0x08004821
 80047c0:	08004821 	.word	0x08004821
 80047c4:	08004821 	.word	0x08004821
 80047c8:	08004801 	.word	0x08004801
 80047cc:	08004821 	.word	0x08004821
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	08004821 	.word	0x08004821
 80047d8:	08004821 	.word	0x08004821
 80047dc:	080047f1 	.word	0x080047f1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80047e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e01a      	b.n	8004826 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80047f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e012      	b.n	8004826 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e00a      	b.n	8004826 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004812:	f043 0308 	orr.w	r3, r3, #8
 8004816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e002      	b.n	8004826 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004820:	2300      	movs	r3, #0
 8004822:	653b      	str	r3, [r7, #80]	@ 0x50
 8004824:	bf00      	nop
        }
      } while (v);
 8004826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1b0      	bne.n	800478e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800482c:	2300      	movs	r3, #0
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800483c:	2b2f      	cmp	r3, #47	@ 0x2f
 800483e:	d912      	bls.n	8004866 <_VPrintTarget+0x13a>
 8004840:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004844:	2b39      	cmp	r3, #57	@ 0x39
 8004846:	d80e      	bhi.n	8004866 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800484e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	461a      	mov	r2, r3
 800485a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800485e:	4413      	add	r3, r2
 8004860:	3b30      	subs	r3, #48	@ 0x30
 8004862:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004864:	e7e4      	b.n	8004830 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004866:	2300      	movs	r3, #0
 8004868:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004872:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004876:	2b2e      	cmp	r3, #46	@ 0x2e
 8004878:	d11d      	bne.n	80048b6 <_VPrintTarget+0x18a>
        sFormat++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004888:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800488c:	2b2f      	cmp	r3, #47	@ 0x2f
 800488e:	d912      	bls.n	80048b6 <_VPrintTarget+0x18a>
 8004890:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004894:	2b39      	cmp	r3, #57	@ 0x39
 8004896:	d80e      	bhi.n	80048b6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800489e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	461a      	mov	r2, r3
 80048aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048ae:	4413      	add	r3, r2
 80048b0:	3b30      	subs	r3, #48	@ 0x30
 80048b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80048b4:	e7e4      	b.n	8004880 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80048be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048c2:	2b6c      	cmp	r3, #108	@ 0x6c
 80048c4:	d003      	beq.n	80048ce <_VPrintTarget+0x1a2>
 80048c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048ca:	2b68      	cmp	r3, #104	@ 0x68
 80048cc:	d107      	bne.n	80048de <_VPrintTarget+0x1b2>
          c = *sFormat;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80048dc:	e7ef      	b.n	80048be <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80048de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80048e2:	2b25      	cmp	r3, #37	@ 0x25
 80048e4:	f000 80d8 	beq.w	8004a98 <_VPrintTarget+0x36c>
 80048e8:	2b25      	cmp	r3, #37	@ 0x25
 80048ea:	f2c0 80dc 	blt.w	8004aa6 <_VPrintTarget+0x37a>
 80048ee:	2b78      	cmp	r3, #120	@ 0x78
 80048f0:	f300 80d9 	bgt.w	8004aa6 <_VPrintTarget+0x37a>
 80048f4:	2b58      	cmp	r3, #88	@ 0x58
 80048f6:	f2c0 80d6 	blt.w	8004aa6 <_VPrintTarget+0x37a>
 80048fa:	3b58      	subs	r3, #88	@ 0x58
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	f200 80d2 	bhi.w	8004aa6 <_VPrintTarget+0x37a>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <_VPrintTarget+0x1dc>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	080049ff 	.word	0x080049ff
 800490c:	08004aa7 	.word	0x08004aa7
 8004910:	08004aa7 	.word	0x08004aa7
 8004914:	08004aa7 	.word	0x08004aa7
 8004918:	08004aa7 	.word	0x08004aa7
 800491c:	08004aa7 	.word	0x08004aa7
 8004920:	08004aa7 	.word	0x08004aa7
 8004924:	08004aa7 	.word	0x08004aa7
 8004928:	08004aa7 	.word	0x08004aa7
 800492c:	08004aa7 	.word	0x08004aa7
 8004930:	08004aa7 	.word	0x08004aa7
 8004934:	0800498d 	.word	0x0800498d
 8004938:	080049b3 	.word	0x080049b3
 800493c:	08004aa7 	.word	0x08004aa7
 8004940:	08004aa7 	.word	0x08004aa7
 8004944:	08004aa7 	.word	0x08004aa7
 8004948:	08004aa7 	.word	0x08004aa7
 800494c:	08004aa7 	.word	0x08004aa7
 8004950:	08004aa7 	.word	0x08004aa7
 8004954:	08004aa7 	.word	0x08004aa7
 8004958:	08004aa7 	.word	0x08004aa7
 800495c:	08004aa7 	.word	0x08004aa7
 8004960:	08004aa7 	.word	0x08004aa7
 8004964:	08004aa7 	.word	0x08004aa7
 8004968:	08004a73 	.word	0x08004a73
 800496c:	08004aa7 	.word	0x08004aa7
 8004970:	08004aa7 	.word	0x08004aa7
 8004974:	08004a29 	.word	0x08004a29
 8004978:	08004aa7 	.word	0x08004aa7
 800497c:	080049d9 	.word	0x080049d9
 8004980:	08004aa7 	.word	0x08004aa7
 8004984:	08004aa7 	.word	0x08004aa7
 8004988:	080049ff 	.word	0x080049ff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800499a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80049a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80049a4:	f107 0310 	add.w	r3, r7, #16
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fd1c 	bl	80043e8 <_StoreChar>
        break;
 80049b0:	e07a      	b.n	8004aa8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1d19      	adds	r1, r3, #4
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6011      	str	r1, [r2, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80049c0:	f107 0010 	add.w	r0, r7, #16
 80049c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ce:	220a      	movs	r2, #10
 80049d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049d2:	f7ff fe1b 	bl	800460c <_PrintInt>
        break;
 80049d6:	e067      	b.n	8004aa8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1d19      	adds	r1, r3, #4
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80049e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049e8:	f107 0010 	add.w	r0, r7, #16
 80049ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f6:	220a      	movs	r2, #10
 80049f8:	f7ff fd72 	bl	80044e0 <_PrintUnsigned>
        break;
 80049fc:	e054      	b.n	8004aa8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	1d19      	adds	r1, r3, #4
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6011      	str	r1, [r2, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004a0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a0e:	f107 0010 	add.w	r0, r7, #16
 8004a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	f7ff fd5f 	bl	80044e0 <_PrintUnsigned>
        break;
 8004a22:	e041      	b.n	8004aa8 <_VPrintTarget+0x37c>
 8004a24:	20013b8c 	.word	0x20013b8c
      case 's':
        s = va_arg(*pParamList, const char*);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6011      	str	r1, [r2, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <_VPrintTarget+0x314>
          s = "(null)";
 8004a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b68 <_VPrintTarget+0x43c>)
 8004a3e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004a4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004a56:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fcc1 	bl	80043e8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a6a:	d9e9      	bls.n	8004a40 <_VPrintTarget+0x314>
        break;
 8004a6c:	e01c      	b.n	8004aa8 <_VPrintTarget+0x37c>
            break;
 8004a6e:	bf00      	nop
        break;
 8004a70:	e01a      	b.n	8004aa8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1d19      	adds	r1, r3, #4
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6011      	str	r1, [r2, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004a80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a82:	f107 0010 	add.w	r0, r7, #16
 8004a86:	2300      	movs	r3, #0
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	2308      	movs	r3, #8
 8004a90:	2210      	movs	r2, #16
 8004a92:	f7ff fd25 	bl	80044e0 <_PrintUnsigned>
        break;
 8004a96:	e007      	b.n	8004aa8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	2125      	movs	r1, #37	@ 0x25
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fca2 	bl	80043e8 <_StoreChar>
        break;
 8004aa4:	e000      	b.n	8004aa8 <_VPrintTarget+0x37c>
      default:
        break;
 8004aa6:	bf00      	nop
      }
      sFormat++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e007      	b.n	8004ac0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004ab0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fc94 	bl	80043e8 <_StoreChar>
    }
  } while (*sFormat);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f47f ae4d 	bne.w	8004764 <_VPrintTarget+0x38>
 8004aca:	e000      	b.n	8004ace <_VPrintTarget+0x3a2>
      break;
 8004acc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d041      	beq.n	8004b58 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ae4:	e00b      	b.n	8004afe <_VPrintTarget+0x3d2>
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004af0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afa:	09db      	lsrs	r3, r3, #7
 8004afc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b02:	d8f0      	bhi.n	8004ae6 <_VPrintTarget+0x3ba>
 8004b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b12:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b18:	2300      	movs	r3, #0
 8004b1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b1c:	e00b      	b.n	8004b36 <_VPrintTarget+0x40a>
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	6379      	str	r1, [r7, #52]	@ 0x34
 8004b28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b3a:	d8f0      	bhi.n	8004b1e <_VPrintTarget+0x3f2>
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	221a      	movs	r2, #26
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fada 	bl	800410c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004b5e:	bf00      	nop
 8004b60:	3758      	adds	r7, #88	@ 0x58
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	08006428 	.word	0x08006428

08004b6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b80:	4917      	ldr	r1, [pc, #92]	@ (8004be0 <SEGGER_SYSVIEW_Init+0x74>)
 8004b82:	4818      	ldr	r0, [pc, #96]	@ (8004be4 <SEGGER_SYSVIEW_Init+0x78>)
 8004b84:	f7ff f8cc 	bl	8003d20 <SEGGER_RTT_AllocUpBuffer>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	4b16      	ldr	r3, [pc, #88]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b92:	785a      	ldrb	r2, [r3, #1]
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b98:	4b13      	ldr	r3, [pc, #76]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b9a:	7e1b      	ldrb	r3, [r3, #24]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	4a11      	ldr	r2, [pc, #68]	@ (8004bec <SEGGER_SYSVIEW_Init+0x80>)
 8004ba6:	490f      	ldr	r1, [pc, #60]	@ (8004be4 <SEGGER_SYSVIEW_Init+0x78>)
 8004ba8:	f7ff f93e 	bl	8003e28 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004bac:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <SEGGER_SYSVIEW_Init+0x84>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bba:	4a0b      	ldr	r2, [pc, #44]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bc0:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bc6:	4a08      	ldr	r2, [pc, #32]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bcc:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20013354 	.word	0x20013354
 8004be4:	08006430 	.word	0x08006430
 8004be8:	20013b5c 	.word	0x20013b5c
 8004bec:	20013b54 	.word	0x20013b54
 8004bf0:	e0001004 	.word	0xe0001004

08004bf4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bfc:	4a04      	ldr	r2, [pc, #16]	@ (8004c10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6113      	str	r3, [r2, #16]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20013b5c 	.word	0x20013b5c

08004c14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c20:	f04f 0120 	mov.w	r1, #32
 8004c24:	f381 8811 	msr	BASEPRI, r1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4808      	ldr	r0, [pc, #32]	@ (8004c4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c2c:	f7ff f981 	bl	8003f32 <_PreparePacket>
 8004c30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68b8      	ldr	r0, [r7, #8]
 8004c38:	f7ff fa68 	bl	800410c <_SendPacket>
  RECORD_END();
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f383 8811 	msr	BASEPRI, r3
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20013b8c 	.word	0x20013b8c

08004c50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5e:	f04f 0120 	mov.w	r1, #32
 8004c62:	f381 8811 	msr	BASEPRI, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	4816      	ldr	r0, [pc, #88]	@ (8004cc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c6a:	f7ff f962 	bl	8003f32 <_PreparePacket>
 8004c6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	61f9      	str	r1, [r7, #28]
 8004c88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	6938      	ldr	r0, [r7, #16]
 8004cb2:	f7ff fa2b 	bl	800410c <_SendPacket>
  RECORD_END();
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
}
 8004cbc:	bf00      	nop
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20013b8c 	.word	0x20013b8c

08004cc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	@ 0x30
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd8:	f04f 0120 	mov.w	r1, #32
 8004cdc:	f381 8811 	msr	BASEPRI, r1
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	4825      	ldr	r0, [pc, #148]	@ (8004d78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ce4:	f7ff f925 	bl	8003f32 <_PreparePacket>
 8004ce8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf6:	e00b      	b.n	8004d10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	09db      	lsrs	r3, r3, #7
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d14:	d8f0      	bhi.n	8004cf8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	e00b      	b.n	8004d48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d4c:	d8f0      	bhi.n	8004d30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69b8      	ldr	r0, [r7, #24]
 8004d64:	f7ff f9d2 	bl	800410c <_SendPacket>
  RECORD_END();
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
 8004d70:	3730      	adds	r7, #48	@ 0x30
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20013b8c 	.word	0x20013b8c

08004d7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	@ 0x30
 8004d80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d82:	4b58      	ldr	r3, [pc, #352]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d88:	f3ef 8311 	mrs	r3, BASEPRI
 8004d8c:	f04f 0120 	mov.w	r1, #32
 8004d90:	f381 8811 	msr	BASEPRI, r1
 8004d94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d96:	4b53      	ldr	r3, [pc, #332]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	4952      	ldr	r1, [pc, #328]	@ (8004ee8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb fa16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004daa:	200a      	movs	r0, #10
 8004dac:	f7ff ff32 	bl	8004c14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004db0:	f3ef 8311 	mrs	r3, BASEPRI
 8004db4:	f04f 0120 	mov.w	r1, #32
 8004db8:	f381 8811 	msr	BASEPRI, r1
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	484b      	ldr	r0, [pc, #300]	@ (8004eec <SEGGER_SYSVIEW_Start+0x170>)
 8004dc0:	f7ff f8b7 	bl	8003f32 <_PreparePacket>
 8004dc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dce:	4b45      	ldr	r3, [pc, #276]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd4:	e00b      	b.n	8004dee <SEGGER_SYSVIEW_Start+0x72>
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004de0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	09db      	lsrs	r3, r3, #7
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df2:	d8f0      	bhi.n	8004dd6 <SEGGER_SYSVIEW_Start+0x5a>
 8004df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e08:	4b36      	ldr	r3, [pc, #216]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e00b      	b.n	8004e28 <SEGGER_SYSVIEW_Start+0xac>
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	1c59      	adds	r1, r3, #1
 8004e18:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e2c:	d8f0      	bhi.n	8004e10 <SEGGER_SYSVIEW_Start+0x94>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	4b28      	ldr	r3, [pc, #160]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e00b      	b.n	8004e62 <SEGGER_SYSVIEW_Start+0xe6>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	1c59      	adds	r1, r3, #1
 8004e52:	61f9      	str	r1, [r7, #28]
 8004e54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e66:	d8f0      	bhi.n	8004e4a <SEGGER_SYSVIEW_Start+0xce>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	61fa      	str	r2, [r7, #28]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	e00b      	b.n	8004e9a <SEGGER_SYSVIEW_Start+0x11e>
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	6179      	str	r1, [r7, #20]
 8004e8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e9e:	d8f0      	bhi.n	8004e82 <SEGGER_SYSVIEW_Start+0x106>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	617a      	str	r2, [r7, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004eb0:	2218      	movs	r2, #24
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff f929 	bl	800410c <_SendPacket>
      RECORD_END();
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ec0:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <SEGGER_SYSVIEW_Start+0x168>)
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004ece:	f000 f9eb 	bl	80052a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004ed2:	f000 f9b1 	bl	8005238 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004ed6:	f000 fcb1 	bl	800583c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004eda:	bf00      	nop
 8004edc:	3730      	adds	r7, #48	@ 0x30
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20013b5c 	.word	0x20013b5c
 8004ee8:	0800646c 	.word	0x0800646c
 8004eec:	20013b8c 	.word	0x20013b8c

08004ef0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8004efa:	f04f 0120 	mov.w	r1, #32
 8004efe:	f381 8811 	msr	BASEPRI, r1
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	480b      	ldr	r0, [pc, #44]	@ (8004f34 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f06:	f7ff f814 	bl	8003f32 <_PreparePacket>
 8004f0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f14:	220b      	movs	r2, #11
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6838      	ldr	r0, [r7, #0]
 8004f1a:	f7ff f8f7 	bl	800410c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f383 8811 	msr	BASEPRI, r3
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20013b8c 	.word	0x20013b8c
 8004f38:	20013b5c 	.word	0x20013b5c

08004f3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	@ 0x30
 8004f40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f42:	f3ef 8311 	mrs	r3, BASEPRI
 8004f46:	f04f 0120 	mov.w	r1, #32
 8004f4a:	f381 8811 	msr	BASEPRI, r1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	4845      	ldr	r0, [pc, #276]	@ (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f52:	f7fe ffee 	bl	8003f32 <_PreparePacket>
 8004f56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f60:	4b42      	ldr	r3, [pc, #264]	@ (800506c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f66:	e00b      	b.n	8004f80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7c:	09db      	lsrs	r3, r3, #7
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f84:	d8f0      	bhi.n	8004f68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	4b34      	ldr	r3, [pc, #208]	@ (800506c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e00b      	b.n	8004fba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	1c59      	adds	r1, r3, #1
 8004faa:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	09db      	lsrs	r3, r3, #7
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fbe:	d8f0      	bhi.n	8004fa2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	4b25      	ldr	r3, [pc, #148]	@ (800506c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e00b      	b.n	8004ff4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	1c59      	adds	r1, r3, #1
 8004fe4:	61f9      	str	r1, [r7, #28]
 8004fe6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	09db      	lsrs	r3, r3, #7
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff8:	d8f0      	bhi.n	8004fdc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	61fa      	str	r2, [r7, #28]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e00b      	b.n	800502c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	6179      	str	r1, [r7, #20]
 800501e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	09db      	lsrs	r3, r3, #7
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005030:	d8f0      	bhi.n	8005014 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	617a      	str	r2, [r7, #20]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005042:	2218      	movs	r2, #24
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	f7ff f860 	bl	800410c <_SendPacket>
  RECORD_END();
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005052:	4b06      	ldr	r3, [pc, #24]	@ (800506c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800505a:	4b04      	ldr	r3, [pc, #16]	@ (800506c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	4798      	blx	r3
  }
}
 8005060:	bf00      	nop
 8005062:	3730      	adds	r7, #48	@ 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20013b8c 	.word	0x20013b8c
 800506c:	20013b5c 	.word	0x20013b5c

08005070 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b092      	sub	sp, #72	@ 0x48
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005078:	f3ef 8311 	mrs	r3, BASEPRI
 800507c:	f04f 0120 	mov.w	r1, #32
 8005080:	f381 8811 	msr	BASEPRI, r1
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	486a      	ldr	r0, [pc, #424]	@ (8005230 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005088:	f7fe ff53 	bl	8003f32 <_PreparePacket>
 800508c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	647b      	str	r3, [r7, #68]	@ 0x44
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b66      	ldr	r3, [pc, #408]	@ (8005234 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a2:	e00b      	b.n	80050bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80050a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	6479      	str	r1, [r7, #68]	@ 0x44
 80050ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b8:	09db      	lsrs	r3, r3, #7
 80050ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80050bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050be:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c0:	d8f0      	bhi.n	80050a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050dc:	e00b      	b.n	80050f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e4:	1c59      	adds	r1, r3, #1
 80050e6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80050e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	09db      	lsrs	r3, r3, #7
 80050f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050fa:	d8f0      	bhi.n	80050de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	4619      	mov	r1, r3
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7fe fed3 	bl	8003ec0 <_EncodeStr>
 800511a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800511c:	2209      	movs	r2, #9
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	6938      	ldr	r0, [r7, #16]
 8005122:	f7fe fff3 	bl	800410c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b40      	ldr	r3, [pc, #256]	@ (8005234 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30
 800513a:	e00b      	b.n	8005154 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	b2da      	uxtb	r2, r3
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	6379      	str	r1, [r7, #52]	@ 0x34
 8005146:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	09db      	lsrs	r3, r3, #7
 8005152:	633b      	str	r3, [r7, #48]	@ 0x30
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	2b7f      	cmp	r3, #127	@ 0x7f
 8005158:	d8f0      	bhi.n	800513c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005174:	e00b      	b.n	800518e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005180:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	2b7f      	cmp	r3, #127	@ 0x7f
 8005192:	d8f0      	bhi.n	8005176 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800519a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	623b      	str	r3, [r7, #32]
 80051ae:	e00b      	b.n	80051c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80051ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	09db      	lsrs	r3, r3, #7
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80051cc:	d8f0      	bhi.n	80051b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e00b      	b.n	8005202 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	61f9      	str	r1, [r7, #28]
 80051f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b7f      	cmp	r3, #127	@ 0x7f
 8005206:	d8f0      	bhi.n	80051ea <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	61fa      	str	r2, [r7, #28]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005218:	2215      	movs	r2, #21
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	6938      	ldr	r0, [r7, #16]
 800521e:	f7fe ff75 	bl	800410c <_SendPacket>
  RECORD_END();
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f383 8811 	msr	BASEPRI, r3
}
 8005228:	bf00      	nop
 800522a:	3748      	adds	r7, #72	@ 0x48
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20013b8c 	.word	0x20013b8c
 8005234:	20013b5c 	.word	0x20013b5c

08005238 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800523c:	4b07      	ldr	r3, [pc, #28]	@ (800525c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005244:	4b05      	ldr	r3, [pc, #20]	@ (800525c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800524e:	4b03      	ldr	r3, [pc, #12]	@ (800525c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4798      	blx	r3
  }
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20013b5c 	.word	0x20013b5c

08005260 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005268:	f3ef 8311 	mrs	r3, BASEPRI
 800526c:	f04f 0120 	mov.w	r1, #32
 8005270:	f381 8811 	msr	BASEPRI, r1
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	480b      	ldr	r0, [pc, #44]	@ (80052a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005278:	f7fe fe5b 	bl	8003f32 <_PreparePacket>
 800527c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800527e:	2280      	movs	r2, #128	@ 0x80
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	6938      	ldr	r0, [r7, #16]
 8005284:	f7fe fe1c 	bl	8003ec0 <_EncodeStr>
 8005288:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800528a:	220e      	movs	r2, #14
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f7fe ff3c 	bl	800410c <_SendPacket>
  RECORD_END();
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f383 8811 	msr	BASEPRI, r3
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20013b8c 	.word	0x20013b8c

080052a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01a      	beq.n	80052ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4798      	blx	r3
 80052c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	000a      	movs	r2, r1
 80052dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052de:	4613      	mov	r3, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4621      	mov	r1, r4
 80052e4:	200d      	movs	r0, #13
 80052e6:	f7ff fcef 	bl	8004cc8 <SEGGER_SYSVIEW_RecordU32x2>
 80052ea:	e006      	b.n	80052fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	200c      	movs	r0, #12
 80052f4:	f7ff fcac 	bl	8004c50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
 8005302:	bf00      	nop
 8005304:	20013b5c 	.word	0x20013b5c
 8005308:	e0001004 	.word	0xe0001004

0800530c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005312:	f3ef 8311 	mrs	r3, BASEPRI
 8005316:	f04f 0120 	mov.w	r1, #32
 800531a:	f381 8811 	msr	BASEPRI, r1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	4819      	ldr	r0, [pc, #100]	@ (8005388 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005322:	f7fe fe06 	bl	8003f32 <_PreparePacket>
 8005326:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800532c:	4b17      	ldr	r3, [pc, #92]	@ (800538c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005334:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e00b      	b.n	8005358 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6179      	str	r1, [r7, #20]
 800534a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b7f      	cmp	r3, #127	@ 0x7f
 800535c:	d8f0      	bhi.n	8005340 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	617a      	str	r2, [r7, #20]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800536e:	2202      	movs	r2, #2
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	68b8      	ldr	r0, [r7, #8]
 8005374:	f7fe feca 	bl	800410c <_SendPacket>
  RECORD_END();
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20013b8c 	.word	0x20013b8c
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005396:	f3ef 8311 	mrs	r3, BASEPRI
 800539a:	f04f 0120 	mov.w	r1, #32
 800539e:	f381 8811 	msr	BASEPRI, r1
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	4807      	ldr	r0, [pc, #28]	@ (80053c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80053a6:	f7fe fdc4 	bl	8003f32 <_PreparePacket>
 80053aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80053ac:	2203      	movs	r2, #3
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	6838      	ldr	r0, [r7, #0]
 80053b2:	f7fe feab 	bl	800410c <_SendPacket>
  RECORD_END();
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f383 8811 	msr	BASEPRI, r3
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20013b8c 	.word	0x20013b8c

080053c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ce:	f3ef 8311 	mrs	r3, BASEPRI
 80053d2:	f04f 0120 	mov.w	r1, #32
 80053d6:	f381 8811 	msr	BASEPRI, r1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	4807      	ldr	r0, [pc, #28]	@ (80053fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053de:	f7fe fda8 	bl	8003f32 <_PreparePacket>
 80053e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053e4:	2212      	movs	r2, #18
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	6838      	ldr	r0, [r7, #0]
 80053ea:	f7fe fe8f 	bl	800410c <_SendPacket>
  RECORD_END();
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f383 8811 	msr	BASEPRI, r3
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20013b8c 	.word	0x20013b8c

08005400 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005408:	f3ef 8311 	mrs	r3, BASEPRI
 800540c:	f04f 0120 	mov.w	r1, #32
 8005410:	f381 8811 	msr	BASEPRI, r1
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	4817      	ldr	r0, [pc, #92]	@ (8005474 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005418:	f7fe fd8b 	bl	8003f32 <_PreparePacket>
 800541c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e00b      	b.n	8005444 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	61f9      	str	r1, [r7, #28]
 8005436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b7f      	cmp	r3, #127	@ 0x7f
 8005448:	d8f0      	bhi.n	800542c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	61fa      	str	r2, [r7, #28]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800545a:	221c      	movs	r2, #28
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	6938      	ldr	r0, [r7, #16]
 8005460:	f7fe fe54 	bl	800410c <_SendPacket>
  RECORD_END();
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f383 8811 	msr	BASEPRI, r3
}
 800546a:	bf00      	nop
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20013b8c 	.word	0x20013b8c

08005478 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	@ 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005482:	f3ef 8311 	mrs	r3, BASEPRI
 8005486:	f04f 0120 	mov.w	r1, #32
 800548a:	f381 8811 	msr	BASEPRI, r1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	4824      	ldr	r0, [pc, #144]	@ (8005524 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005492:	f7fe fd4e 	bl	8003f32 <_PreparePacket>
 8005496:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	e00b      	b.n	80054be <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80054b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	623b      	str	r3, [r7, #32]
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c2:	d8f0      	bhi.n	80054a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80054ca:	6a3a      	ldr	r2, [r7, #32]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	e00b      	b.n	80054f6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	61f9      	str	r1, [r7, #28]
 80054e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	09db      	lsrs	r3, r3, #7
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054fa:	d8f0      	bhi.n	80054de <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	61fa      	str	r2, [r7, #28]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800550c:	221c      	movs	r2, #28
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	6938      	ldr	r0, [r7, #16]
 8005512:	f7fe fdfb 	bl	800410c <_SendPacket>
  RECORD_END();
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f383 8811 	msr	BASEPRI, r3
}
 800551c:	bf00      	nop
 800551e:	3728      	adds	r7, #40	@ 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20013b8c 	.word	0x20013b8c

08005528 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800552e:	f3ef 8311 	mrs	r3, BASEPRI
 8005532:	f04f 0120 	mov.w	r1, #32
 8005536:	f381 8811 	msr	BASEPRI, r1
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	4807      	ldr	r0, [pc, #28]	@ (800555c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800553e:	f7fe fcf8 	bl	8003f32 <_PreparePacket>
 8005542:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005544:	2211      	movs	r2, #17
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6838      	ldr	r0, [r7, #0]
 800554a:	f7fe fddf 	bl	800410c <_SendPacket>
  RECORD_END();
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f383 8811 	msr	BASEPRI, r3
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20013b8c 	.word	0x20013b8c

08005560 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005568:	f3ef 8311 	mrs	r3, BASEPRI
 800556c:	f04f 0120 	mov.w	r1, #32
 8005570:	f381 8811 	msr	BASEPRI, r1
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	4819      	ldr	r0, [pc, #100]	@ (80055dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005578:	f7fe fcdb 	bl	8003f32 <_PreparePacket>
 800557c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005582:	4b17      	ldr	r3, [pc, #92]	@ (80055e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e00b      	b.n	80055ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	1c59      	adds	r1, r3, #1
 800559e:	61f9      	str	r1, [r7, #28]
 80055a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	09db      	lsrs	r3, r3, #7
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b2:	d8f0      	bhi.n	8005596 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	61fa      	str	r2, [r7, #28]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80055c4:	2208      	movs	r2, #8
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	6938      	ldr	r0, [r7, #16]
 80055ca:	f7fe fd9f 	bl	800410c <_SendPacket>
  RECORD_END();
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f383 8811 	msr	BASEPRI, r3
}
 80055d4:	bf00      	nop
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20013b8c 	.word	0x20013b8c
 80055e0:	20013b5c 	.word	0x20013b5c

080055e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055ec:	f3ef 8311 	mrs	r3, BASEPRI
 80055f0:	f04f 0120 	mov.w	r1, #32
 80055f4:	f381 8811 	msr	BASEPRI, r1
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	4819      	ldr	r0, [pc, #100]	@ (8005660 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80055fc:	f7fe fc99 	bl	8003f32 <_PreparePacket>
 8005600:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005606:	4b17      	ldr	r3, [pc, #92]	@ (8005664 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e00b      	b.n	8005632 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	61f9      	str	r1, [r7, #28]
 8005624:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	09db      	lsrs	r3, r3, #7
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b7f      	cmp	r3, #127	@ 0x7f
 8005636:	d8f0      	bhi.n	800561a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005648:	2204      	movs	r2, #4
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f7fe fd5d 	bl	800410c <_SendPacket>
  RECORD_END();
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f383 8811 	msr	BASEPRI, r3
}
 8005658:	bf00      	nop
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20013b8c 	.word	0x20013b8c
 8005664:	20013b5c 	.word	0x20013b5c

08005668 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005670:	f3ef 8311 	mrs	r3, BASEPRI
 8005674:	f04f 0120 	mov.w	r1, #32
 8005678:	f381 8811 	msr	BASEPRI, r1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	4819      	ldr	r0, [pc, #100]	@ (80056e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005680:	f7fe fc57 	bl	8003f32 <_PreparePacket>
 8005684:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800568a:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e00b      	b.n	80056b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	1c59      	adds	r1, r3, #1
 80056a6:	61f9      	str	r1, [r7, #28]
 80056a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	09db      	lsrs	r3, r3, #7
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ba:	d8f0      	bhi.n	800569e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80056cc:	2206      	movs	r2, #6
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6938      	ldr	r0, [r7, #16]
 80056d2:	f7fe fd1b 	bl	800410c <_SendPacket>
  RECORD_END();
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f383 8811 	msr	BASEPRI, r3
}
 80056dc:	bf00      	nop
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20013b8c 	.word	0x20013b8c
 80056e8:	20013b5c 	.word	0x20013b5c

080056ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	@ 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80056f6:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d077      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005704:	2300      	movs	r3, #0
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005708:	e008      	b.n	800571c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	3301      	adds	r3, #1
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005720:	429a      	cmp	r2, r3
 8005722:	d3f2      	bcc.n	800570a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005724:	e000      	b.n	8005728 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005726:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d055      	beq.n	80057da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800572e:	f3ef 8311 	mrs	r3, BASEPRI
 8005732:	f04f 0120 	mov.w	r1, #32
 8005736:	f381 8811 	msr	BASEPRI, r1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	482f      	ldr	r0, [pc, #188]	@ (80057fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800573e:	f7fe fbf8 	bl	8003f32 <_PreparePacket>
 8005742:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	e00b      	b.n	800576a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	6279      	str	r1, [r7, #36]	@ 0x24
 800575c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b7f      	cmp	r3, #127	@ 0x7f
 800576e:	d8f0      	bhi.n	8005752 <SEGGER_SYSVIEW_SendModule+0x66>
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	627a      	str	r2, [r7, #36]	@ 0x24
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e00b      	b.n	80057a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	61f9      	str	r1, [r7, #28]
 8005796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057a8:	d8f0      	bhi.n	800578c <SEGGER_SYSVIEW_SendModule+0xa0>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fe fb7c 	bl	8003ec0 <_EncodeStr>
 80057c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80057ca:	2216      	movs	r2, #22
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	6938      	ldr	r0, [r7, #16]
 80057d0:	f7fe fc9c 	bl	800410c <_SendPacket>
      RECORD_END();
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80057da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4798      	blx	r3
    }
  }
}
 80057ee:	bf00      	nop
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20013b84 	.word	0x20013b84
 80057fc:	20013b8c 	.word	0x20013b8c

08005800 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00f      	beq.n	800582e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800580e:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f2      	bne.n	8005814 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20013b84 	.word	0x20013b84

0800583c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	4817      	ldr	r0, [pc, #92]	@ (80058b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005852:	f7fe fb6e 	bl	8003f32 <_PreparePacket>
 8005856:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e00b      	b.n	8005880 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1c59      	adds	r1, r3, #1
 8005870:	6179      	str	r1, [r7, #20]
 8005872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b7f      	cmp	r3, #127	@ 0x7f
 8005884:	d8f0      	bhi.n	8005868 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	617a      	str	r2, [r7, #20]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005896:	221b      	movs	r2, #27
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f7fe fc36 	bl	800410c <_SendPacket>
  RECORD_END();
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f383 8811 	msr	BASEPRI, r3
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20013b8c 	.word	0x20013b8c
 80058b4:	20013b88 	.word	0x20013b88

080058b8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80058b8:	b40f      	push	{r0, r1, r2, r3}
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	461a      	mov	r2, r3
 80058ca:	2100      	movs	r1, #0
 80058cc:	6938      	ldr	r0, [r7, #16]
 80058ce:	f7fe ff2d 	bl	800472c <_VPrintTarget>
  va_end(ParamList);
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058dc:	b004      	add	sp, #16
 80058de:	4770      	bx	lr

080058e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	@ 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058e8:	f3ef 8311 	mrs	r3, BASEPRI
 80058ec:	f04f 0120 	mov.w	r1, #32
 80058f0:	f381 8811 	msr	BASEPRI, r1
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	4827      	ldr	r0, [pc, #156]	@ (8005994 <SEGGER_SYSVIEW_Warn+0xb4>)
 80058f8:	f7fe fb1b 	bl	8003f32 <_PreparePacket>
 80058fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058fe:	2280      	movs	r2, #128	@ 0x80
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	6938      	ldr	r0, [r7, #16]
 8005904:	f7fe fadc 	bl	8003ec0 <_EncodeStr>
 8005908:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
 800590e:	2301      	movs	r3, #1
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e00b      	b.n	800592c <SEGGER_SYSVIEW_Warn+0x4c>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	6279      	str	r1, [r7, #36]	@ 0x24
 800591e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	09db      	lsrs	r3, r3, #7
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005930:	d8f0      	bhi.n	8005914 <SEGGER_SYSVIEW_Warn+0x34>
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	627a      	str	r2, [r7, #36]	@ 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	e00b      	b.n	8005964 <SEGGER_SYSVIEW_Warn+0x84>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	61f9      	str	r1, [r7, #28]
 8005956:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	09db      	lsrs	r3, r3, #7
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b7f      	cmp	r3, #127	@ 0x7f
 8005968:	d8f0      	bhi.n	800594c <SEGGER_SYSVIEW_Warn+0x6c>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	61fa      	str	r2, [r7, #28]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800597a:	221a      	movs	r2, #26
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	6938      	ldr	r0, [r7, #16]
 8005980:	f7fe fbc4 	bl	800410c <_SendPacket>
  RECORD_END();
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f383 8811 	msr	BASEPRI, r3
}
 800598a:	bf00      	nop
 800598c:	3728      	adds	r7, #40	@ 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20013b8c 	.word	0x20013b8c

08005998 <sniprintf>:
 8005998:	b40c      	push	{r2, r3}
 800599a:	b530      	push	{r4, r5, lr}
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <sniprintf+0x64>)
 800599e:	1e0c      	subs	r4, r1, #0
 80059a0:	681d      	ldr	r5, [r3, #0]
 80059a2:	b09d      	sub	sp, #116	@ 0x74
 80059a4:	da08      	bge.n	80059b8 <sniprintf+0x20>
 80059a6:	238b      	movs	r3, #139	@ 0x8b
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	b01d      	add	sp, #116	@ 0x74
 80059b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b4:	b002      	add	sp, #8
 80059b6:	4770      	bx	lr
 80059b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059c0:	bf14      	ite	ne
 80059c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059c6:	4623      	moveq	r3, r4
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	9307      	str	r3, [sp, #28]
 80059cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059d0:	9002      	str	r0, [sp, #8]
 80059d2:	9006      	str	r0, [sp, #24]
 80059d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059da:	ab21      	add	r3, sp, #132	@ 0x84
 80059dc:	a902      	add	r1, sp, #8
 80059de:	4628      	mov	r0, r5
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	f000 f9b3 	bl	8005d4c <_svfiprintf_r>
 80059e6:	1c43      	adds	r3, r0, #1
 80059e8:	bfbc      	itt	lt
 80059ea:	238b      	movlt	r3, #139	@ 0x8b
 80059ec:	602b      	strlt	r3, [r5, #0]
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	d0dd      	beq.n	80059ae <sniprintf+0x16>
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e7d9      	b.n	80059ae <sniprintf+0x16>
 80059fa:	bf00      	nop
 80059fc:	20000014 	.word	0x20000014

08005a00 <memcmp>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	3901      	subs	r1, #1
 8005a04:	4402      	add	r2, r0
 8005a06:	4290      	cmp	r0, r2
 8005a08:	d101      	bne.n	8005a0e <memcmp+0xe>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e005      	b.n	8005a1a <memcmp+0x1a>
 8005a0e:	7803      	ldrb	r3, [r0, #0]
 8005a10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d001      	beq.n	8005a1c <memcmp+0x1c>
 8005a18:	1b18      	subs	r0, r3, r4
 8005a1a:	bd10      	pop	{r4, pc}
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	e7f2      	b.n	8005a06 <memcmp+0x6>

08005a20 <memset>:
 8005a20:	4402      	add	r2, r0
 8005a22:	4603      	mov	r3, r0
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d100      	bne.n	8005a2a <memset+0xa>
 8005a28:	4770      	bx	lr
 8005a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2e:	e7f9      	b.n	8005a24 <memset+0x4>

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000014 	.word	0x20000014

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 fc66 	bl	8006320 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	080064c4 	.word	0x080064c4
 8005a78:	080064c4 	.word	0x080064c4
 8005a7c:	080064c4 	.word	0x080064c4
 8005a80:	080064c8 	.word	0x080064c8

08005a84 <__retarget_lock_acquire_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_release_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <memcpy>:
 8005a88:	440a      	add	r2, r1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a90:	d100      	bne.n	8005a94 <memcpy+0xc>
 8005a92:	4770      	bx	lr
 8005a94:	b510      	push	{r4, lr}
 8005a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9e:	4291      	cmp	r1, r2
 8005aa0:	d1f9      	bne.n	8005a96 <memcpy+0xe>
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <_free_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	d041      	beq.n	8005b30 <_free_r+0x8c>
 8005aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab0:	1f0c      	subs	r4, r1, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bfb8      	it	lt
 8005ab6:	18e4      	addlt	r4, r4, r3
 8005ab8:	f000 f8e0 	bl	8005c7c <__malloc_lock>
 8005abc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b34 <_free_r+0x90>)
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	b933      	cbnz	r3, 8005ad0 <_free_r+0x2c>
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	6014      	str	r4, [r2, #0]
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005acc:	f000 b8dc 	b.w	8005c88 <__malloc_unlock>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d908      	bls.n	8005ae6 <_free_r+0x42>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	1821      	adds	r1, r4, r0
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	bf01      	itttt	eq
 8005adc:	6819      	ldreq	r1, [r3, #0]
 8005ade:	685b      	ldreq	r3, [r3, #4]
 8005ae0:	1809      	addeq	r1, r1, r0
 8005ae2:	6021      	streq	r1, [r4, #0]
 8005ae4:	e7ed      	b.n	8005ac2 <_free_r+0x1e>
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b10b      	cbz	r3, 8005af0 <_free_r+0x4c>
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d9fa      	bls.n	8005ae6 <_free_r+0x42>
 8005af0:	6811      	ldr	r1, [r2, #0]
 8005af2:	1850      	adds	r0, r2, r1
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d10b      	bne.n	8005b10 <_free_r+0x6c>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	4401      	add	r1, r0
 8005afc:	1850      	adds	r0, r2, r1
 8005afe:	4283      	cmp	r3, r0
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	d1e0      	bne.n	8005ac6 <_free_r+0x22>
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	6053      	str	r3, [r2, #4]
 8005b0a:	4408      	add	r0, r1
 8005b0c:	6010      	str	r0, [r2, #0]
 8005b0e:	e7da      	b.n	8005ac6 <_free_r+0x22>
 8005b10:	d902      	bls.n	8005b18 <_free_r+0x74>
 8005b12:	230c      	movs	r3, #12
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	e7d6      	b.n	8005ac6 <_free_r+0x22>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	1821      	adds	r1, r4, r0
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf04      	itt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	bf04      	itt	eq
 8005b28:	1809      	addeq	r1, r1, r0
 8005b2a:	6021      	streq	r1, [r4, #0]
 8005b2c:	6054      	str	r4, [r2, #4]
 8005b2e:	e7ca      	b.n	8005ac6 <_free_r+0x22>
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	bf00      	nop
 8005b34:	20013db4 	.word	0x20013db4

08005b38 <sbrk_aligned>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b78 <sbrk_aligned+0x40>)
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	6831      	ldr	r1, [r6, #0]
 8005b40:	4605      	mov	r5, r0
 8005b42:	b911      	cbnz	r1, 8005b4a <sbrk_aligned+0x12>
 8005b44:	f000 fba6 	bl	8006294 <_sbrk_r>
 8005b48:	6030      	str	r0, [r6, #0]
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 fba1 	bl	8006294 <_sbrk_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d103      	bne.n	8005b5e <sbrk_aligned+0x26>
 8005b56:	f04f 34ff 	mov.w	r4, #4294967295
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	1cc4      	adds	r4, r0, #3
 8005b60:	f024 0403 	bic.w	r4, r4, #3
 8005b64:	42a0      	cmp	r0, r4
 8005b66:	d0f8      	beq.n	8005b5a <sbrk_aligned+0x22>
 8005b68:	1a21      	subs	r1, r4, r0
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 fb92 	bl	8006294 <_sbrk_r>
 8005b70:	3001      	adds	r0, #1
 8005b72:	d1f2      	bne.n	8005b5a <sbrk_aligned+0x22>
 8005b74:	e7ef      	b.n	8005b56 <sbrk_aligned+0x1e>
 8005b76:	bf00      	nop
 8005b78:	20013db0 	.word	0x20013db0

08005b7c <_malloc_r>:
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	1ccd      	adds	r5, r1, #3
 8005b82:	f025 0503 	bic.w	r5, r5, #3
 8005b86:	3508      	adds	r5, #8
 8005b88:	2d0c      	cmp	r5, #12
 8005b8a:	bf38      	it	cc
 8005b8c:	250c      	movcc	r5, #12
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	4606      	mov	r6, r0
 8005b92:	db01      	blt.n	8005b98 <_malloc_r+0x1c>
 8005b94:	42a9      	cmp	r1, r5
 8005b96:	d904      	bls.n	8005ba2 <_malloc_r+0x26>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	6033      	str	r3, [r6, #0]
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c78 <_malloc_r+0xfc>
 8005ba6:	f000 f869 	bl	8005c7c <__malloc_lock>
 8005baa:	f8d8 3000 	ldr.w	r3, [r8]
 8005bae:	461c      	mov	r4, r3
 8005bb0:	bb44      	cbnz	r4, 8005c04 <_malloc_r+0x88>
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff ffbf 	bl	8005b38 <sbrk_aligned>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	d158      	bne.n	8005c72 <_malloc_r+0xf6>
 8005bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc4:	4627      	mov	r7, r4
 8005bc6:	2f00      	cmp	r7, #0
 8005bc8:	d143      	bne.n	8005c52 <_malloc_r+0xd6>
 8005bca:	2c00      	cmp	r4, #0
 8005bcc:	d04b      	beq.n	8005c66 <_malloc_r+0xea>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	eb04 0903 	add.w	r9, r4, r3
 8005bd8:	f000 fb5c 	bl	8006294 <_sbrk_r>
 8005bdc:	4581      	cmp	r9, r0
 8005bde:	d142      	bne.n	8005c66 <_malloc_r+0xea>
 8005be0:	6821      	ldr	r1, [r4, #0]
 8005be2:	1a6d      	subs	r5, r5, r1
 8005be4:	4629      	mov	r1, r5
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ffa6 	bl	8005b38 <sbrk_aligned>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d03a      	beq.n	8005c66 <_malloc_r+0xea>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	442b      	add	r3, r5
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	bb62      	cbnz	r2, 8005c58 <_malloc_r+0xdc>
 8005bfe:	f8c8 7000 	str.w	r7, [r8]
 8005c02:	e00f      	b.n	8005c24 <_malloc_r+0xa8>
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	1b52      	subs	r2, r2, r5
 8005c08:	d420      	bmi.n	8005c4c <_malloc_r+0xd0>
 8005c0a:	2a0b      	cmp	r2, #11
 8005c0c:	d917      	bls.n	8005c3e <_malloc_r+0xc2>
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	6025      	str	r5, [r4, #0]
 8005c14:	bf18      	it	ne
 8005c16:	6059      	strne	r1, [r3, #4]
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	bf08      	it	eq
 8005c1c:	f8c8 1000 	streq.w	r1, [r8]
 8005c20:	5162      	str	r2, [r4, r5]
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 f82f 	bl	8005c88 <__malloc_unlock>
 8005c2a:	f104 000b 	add.w	r0, r4, #11
 8005c2e:	1d23      	adds	r3, r4, #4
 8005c30:	f020 0007 	bic.w	r0, r0, #7
 8005c34:	1ac2      	subs	r2, r0, r3
 8005c36:	bf1c      	itt	ne
 8005c38:	1a1b      	subne	r3, r3, r0
 8005c3a:	50a3      	strne	r3, [r4, r2]
 8005c3c:	e7af      	b.n	8005b9e <_malloc_r+0x22>
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	bf0c      	ite	eq
 8005c44:	f8c8 2000 	streq.w	r2, [r8]
 8005c48:	605a      	strne	r2, [r3, #4]
 8005c4a:	e7eb      	b.n	8005c24 <_malloc_r+0xa8>
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	6864      	ldr	r4, [r4, #4]
 8005c50:	e7ae      	b.n	8005bb0 <_malloc_r+0x34>
 8005c52:	463c      	mov	r4, r7
 8005c54:	687f      	ldr	r7, [r7, #4]
 8005c56:	e7b6      	b.n	8005bc6 <_malloc_r+0x4a>
 8005c58:	461a      	mov	r2, r3
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d1fb      	bne.n	8005c58 <_malloc_r+0xdc>
 8005c60:	2300      	movs	r3, #0
 8005c62:	6053      	str	r3, [r2, #4]
 8005c64:	e7de      	b.n	8005c24 <_malloc_r+0xa8>
 8005c66:	230c      	movs	r3, #12
 8005c68:	6033      	str	r3, [r6, #0]
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 f80c 	bl	8005c88 <__malloc_unlock>
 8005c70:	e794      	b.n	8005b9c <_malloc_r+0x20>
 8005c72:	6005      	str	r5, [r0, #0]
 8005c74:	e7d6      	b.n	8005c24 <_malloc_r+0xa8>
 8005c76:	bf00      	nop
 8005c78:	20013db4 	.word	0x20013db4

08005c7c <__malloc_lock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	@ (8005c84 <__malloc_lock+0x8>)
 8005c7e:	f7ff bf01 	b.w	8005a84 <__retarget_lock_acquire_recursive>
 8005c82:	bf00      	nop
 8005c84:	20013dac 	.word	0x20013dac

08005c88 <__malloc_unlock>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__malloc_unlock+0x8>)
 8005c8a:	f7ff befc 	b.w	8005a86 <__retarget_lock_release_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20013dac 	.word	0x20013dac

08005c94 <__ssputs_r>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	688e      	ldr	r6, [r1, #8]
 8005c9a:	461f      	mov	r7, r3
 8005c9c:	42be      	cmp	r6, r7
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4690      	mov	r8, r2
 8005ca6:	d82d      	bhi.n	8005d04 <__ssputs_r+0x70>
 8005ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cb0:	d026      	beq.n	8005d00 <__ssputs_r+0x6c>
 8005cb2:	6965      	ldr	r5, [r4, #20]
 8005cb4:	6909      	ldr	r1, [r1, #16]
 8005cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cba:	eba3 0901 	sub.w	r9, r3, r1
 8005cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc2:	1c7b      	adds	r3, r7, #1
 8005cc4:	444b      	add	r3, r9
 8005cc6:	106d      	asrs	r5, r5, #1
 8005cc8:	429d      	cmp	r5, r3
 8005cca:	bf38      	it	cc
 8005ccc:	461d      	movcc	r5, r3
 8005cce:	0553      	lsls	r3, r2, #21
 8005cd0:	d527      	bpl.n	8005d22 <__ssputs_r+0x8e>
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7ff ff52 	bl	8005b7c <_malloc_r>
 8005cd8:	4606      	mov	r6, r0
 8005cda:	b360      	cbz	r0, 8005d36 <__ssputs_r+0xa2>
 8005cdc:	6921      	ldr	r1, [r4, #16]
 8005cde:	464a      	mov	r2, r9
 8005ce0:	f7ff fed2 	bl	8005a88 <memcpy>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	6126      	str	r6, [r4, #16]
 8005cf2:	6165      	str	r5, [r4, #20]
 8005cf4:	444e      	add	r6, r9
 8005cf6:	eba5 0509 	sub.w	r5, r5, r9
 8005cfa:	6026      	str	r6, [r4, #0]
 8005cfc:	60a5      	str	r5, [r4, #8]
 8005cfe:	463e      	mov	r6, r7
 8005d00:	42be      	cmp	r6, r7
 8005d02:	d900      	bls.n	8005d06 <__ssputs_r+0x72>
 8005d04:	463e      	mov	r6, r7
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	f000 faa8 	bl	8006260 <memmove>
 8005d10:	68a3      	ldr	r3, [r4, #8]
 8005d12:	1b9b      	subs	r3, r3, r6
 8005d14:	60a3      	str	r3, [r4, #8]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	4433      	add	r3, r6
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	462a      	mov	r2, r5
 8005d24:	f000 fac6 	bl	80062b4 <_realloc_r>
 8005d28:	4606      	mov	r6, r0
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d1e0      	bne.n	8005cf0 <__ssputs_r+0x5c>
 8005d2e:	6921      	ldr	r1, [r4, #16]
 8005d30:	4650      	mov	r0, sl
 8005d32:	f7ff feb7 	bl	8005aa4 <_free_r>
 8005d36:	230c      	movs	r3, #12
 8005d38:	f8ca 3000 	str.w	r3, [sl]
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295
 8005d48:	e7e9      	b.n	8005d1e <__ssputs_r+0x8a>
	...

08005d4c <_svfiprintf_r>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	4698      	mov	r8, r3
 8005d52:	898b      	ldrh	r3, [r1, #12]
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	b09d      	sub	sp, #116	@ 0x74
 8005d58:	4607      	mov	r7, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	d510      	bpl.n	8005d82 <_svfiprintf_r+0x36>
 8005d60:	690b      	ldr	r3, [r1, #16]
 8005d62:	b973      	cbnz	r3, 8005d82 <_svfiprintf_r+0x36>
 8005d64:	2140      	movs	r1, #64	@ 0x40
 8005d66:	f7ff ff09 	bl	8005b7c <_malloc_r>
 8005d6a:	6028      	str	r0, [r5, #0]
 8005d6c:	6128      	str	r0, [r5, #16]
 8005d6e:	b930      	cbnz	r0, 8005d7e <_svfiprintf_r+0x32>
 8005d70:	230c      	movs	r3, #12
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b01d      	add	sp, #116	@ 0x74
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	2340      	movs	r3, #64	@ 0x40
 8005d80:	616b      	str	r3, [r5, #20]
 8005d82:	2300      	movs	r3, #0
 8005d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d86:	2320      	movs	r3, #32
 8005d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d90:	2330      	movs	r3, #48	@ 0x30
 8005d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f30 <_svfiprintf_r+0x1e4>
 8005d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d9a:	f04f 0901 	mov.w	r9, #1
 8005d9e:	4623      	mov	r3, r4
 8005da0:	469a      	mov	sl, r3
 8005da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da6:	b10a      	cbz	r2, 8005dac <_svfiprintf_r+0x60>
 8005da8:	2a25      	cmp	r2, #37	@ 0x25
 8005daa:	d1f9      	bne.n	8005da0 <_svfiprintf_r+0x54>
 8005dac:	ebba 0b04 	subs.w	fp, sl, r4
 8005db0:	d00b      	beq.n	8005dca <_svfiprintf_r+0x7e>
 8005db2:	465b      	mov	r3, fp
 8005db4:	4622      	mov	r2, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	4638      	mov	r0, r7
 8005dba:	f7ff ff6b 	bl	8005c94 <__ssputs_r>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f000 80a7 	beq.w	8005f12 <_svfiprintf_r+0x1c6>
 8005dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc6:	445a      	add	r2, fp
 8005dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dca:	f89a 3000 	ldrb.w	r3, [sl]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 809f 	beq.w	8005f12 <_svfiprintf_r+0x1c6>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dde:	f10a 0a01 	add.w	sl, sl, #1
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	9307      	str	r3, [sp, #28]
 8005de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dec:	4654      	mov	r4, sl
 8005dee:	2205      	movs	r2, #5
 8005df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df4:	484e      	ldr	r0, [pc, #312]	@ (8005f30 <_svfiprintf_r+0x1e4>)
 8005df6:	f7fa fa3b 	bl	8000270 <memchr>
 8005dfa:	9a04      	ldr	r2, [sp, #16]
 8005dfc:	b9d8      	cbnz	r0, 8005e36 <_svfiprintf_r+0xea>
 8005dfe:	06d0      	lsls	r0, r2, #27
 8005e00:	bf44      	itt	mi
 8005e02:	2320      	movmi	r3, #32
 8005e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e08:	0711      	lsls	r1, r2, #28
 8005e0a:	bf44      	itt	mi
 8005e0c:	232b      	movmi	r3, #43	@ 0x2b
 8005e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e12:	f89a 3000 	ldrb.w	r3, [sl]
 8005e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e18:	d015      	beq.n	8005e46 <_svfiprintf_r+0xfa>
 8005e1a:	9a07      	ldr	r2, [sp, #28]
 8005e1c:	4654      	mov	r4, sl
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f04f 0c0a 	mov.w	ip, #10
 8005e24:	4621      	mov	r1, r4
 8005e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e2a:	3b30      	subs	r3, #48	@ 0x30
 8005e2c:	2b09      	cmp	r3, #9
 8005e2e:	d94b      	bls.n	8005ec8 <_svfiprintf_r+0x17c>
 8005e30:	b1b0      	cbz	r0, 8005e60 <_svfiprintf_r+0x114>
 8005e32:	9207      	str	r2, [sp, #28]
 8005e34:	e014      	b.n	8005e60 <_svfiprintf_r+0x114>
 8005e36:	eba0 0308 	sub.w	r3, r0, r8
 8005e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	46a2      	mov	sl, r4
 8005e44:	e7d2      	b.n	8005dec <_svfiprintf_r+0xa0>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	9103      	str	r1, [sp, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bfbb      	ittet	lt
 8005e52:	425b      	neglt	r3, r3
 8005e54:	f042 0202 	orrlt.w	r2, r2, #2
 8005e58:	9307      	strge	r3, [sp, #28]
 8005e5a:	9307      	strlt	r3, [sp, #28]
 8005e5c:	bfb8      	it	lt
 8005e5e:	9204      	strlt	r2, [sp, #16]
 8005e60:	7823      	ldrb	r3, [r4, #0]
 8005e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e64:	d10a      	bne.n	8005e7c <_svfiprintf_r+0x130>
 8005e66:	7863      	ldrb	r3, [r4, #1]
 8005e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e6a:	d132      	bne.n	8005ed2 <_svfiprintf_r+0x186>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	1d1a      	adds	r2, r3, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	9203      	str	r2, [sp, #12]
 8005e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e78:	3402      	adds	r4, #2
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f40 <_svfiprintf_r+0x1f4>
 8005e80:	7821      	ldrb	r1, [r4, #0]
 8005e82:	2203      	movs	r2, #3
 8005e84:	4650      	mov	r0, sl
 8005e86:	f7fa f9f3 	bl	8000270 <memchr>
 8005e8a:	b138      	cbz	r0, 8005e9c <_svfiprintf_r+0x150>
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	eba0 000a 	sub.w	r0, r0, sl
 8005e92:	2240      	movs	r2, #64	@ 0x40
 8005e94:	4082      	lsls	r2, r0
 8005e96:	4313      	orrs	r3, r2
 8005e98:	3401      	adds	r4, #1
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea0:	4824      	ldr	r0, [pc, #144]	@ (8005f34 <_svfiprintf_r+0x1e8>)
 8005ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ea6:	2206      	movs	r2, #6
 8005ea8:	f7fa f9e2 	bl	8000270 <memchr>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d036      	beq.n	8005f1e <_svfiprintf_r+0x1d2>
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <_svfiprintf_r+0x1ec>)
 8005eb2:	bb1b      	cbnz	r3, 8005efc <_svfiprintf_r+0x1b0>
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	3307      	adds	r3, #7
 8005eb8:	f023 0307 	bic.w	r3, r3, #7
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	9303      	str	r3, [sp, #12]
 8005ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec2:	4433      	add	r3, r6
 8005ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec6:	e76a      	b.n	8005d9e <_svfiprintf_r+0x52>
 8005ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ecc:	460c      	mov	r4, r1
 8005ece:	2001      	movs	r0, #1
 8005ed0:	e7a8      	b.n	8005e24 <_svfiprintf_r+0xd8>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	3401      	adds	r4, #1
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f04f 0c0a 	mov.w	ip, #10
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee4:	3a30      	subs	r2, #48	@ 0x30
 8005ee6:	2a09      	cmp	r2, #9
 8005ee8:	d903      	bls.n	8005ef2 <_svfiprintf_r+0x1a6>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0c6      	beq.n	8005e7c <_svfiprintf_r+0x130>
 8005eee:	9105      	str	r1, [sp, #20]
 8005ef0:	e7c4      	b.n	8005e7c <_svfiprintf_r+0x130>
 8005ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e7f0      	b.n	8005ede <_svfiprintf_r+0x192>
 8005efc:	ab03      	add	r3, sp, #12
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	462a      	mov	r2, r5
 8005f02:	4b0e      	ldr	r3, [pc, #56]	@ (8005f3c <_svfiprintf_r+0x1f0>)
 8005f04:	a904      	add	r1, sp, #16
 8005f06:	4638      	mov	r0, r7
 8005f08:	f3af 8000 	nop.w
 8005f0c:	1c42      	adds	r2, r0, #1
 8005f0e:	4606      	mov	r6, r0
 8005f10:	d1d6      	bne.n	8005ec0 <_svfiprintf_r+0x174>
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	065b      	lsls	r3, r3, #25
 8005f16:	f53f af2d 	bmi.w	8005d74 <_svfiprintf_r+0x28>
 8005f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f1c:	e72c      	b.n	8005d78 <_svfiprintf_r+0x2c>
 8005f1e:	ab03      	add	r3, sp, #12
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	462a      	mov	r2, r5
 8005f24:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <_svfiprintf_r+0x1f0>)
 8005f26:	a904      	add	r1, sp, #16
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f000 f879 	bl	8006020 <_printf_i>
 8005f2e:	e7ed      	b.n	8005f0c <_svfiprintf_r+0x1c0>
 8005f30:	08006488 	.word	0x08006488
 8005f34:	08006492 	.word	0x08006492
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	08005c95 	.word	0x08005c95
 8005f40:	0800648e 	.word	0x0800648e

08005f44 <_printf_common>:
 8005f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	4616      	mov	r6, r2
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	688a      	ldr	r2, [r1, #8]
 8005f4e:	690b      	ldr	r3, [r1, #16]
 8005f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bfb8      	it	lt
 8005f58:	4613      	movlt	r3, r2
 8005f5a:	6033      	str	r3, [r6, #0]
 8005f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f60:	4607      	mov	r7, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	b10a      	cbz	r2, 8005f6a <_printf_common+0x26>
 8005f66:	3301      	adds	r3, #1
 8005f68:	6033      	str	r3, [r6, #0]
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	0699      	lsls	r1, r3, #26
 8005f6e:	bf42      	ittt	mi
 8005f70:	6833      	ldrmi	r3, [r6, #0]
 8005f72:	3302      	addmi	r3, #2
 8005f74:	6033      	strmi	r3, [r6, #0]
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	f015 0506 	ands.w	r5, r5, #6
 8005f7c:	d106      	bne.n	8005f8c <_printf_common+0x48>
 8005f7e:	f104 0a19 	add.w	sl, r4, #25
 8005f82:	68e3      	ldr	r3, [r4, #12]
 8005f84:	6832      	ldr	r2, [r6, #0]
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	42ab      	cmp	r3, r5
 8005f8a:	dc26      	bgt.n	8005fda <_printf_common+0x96>
 8005f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f90:	6822      	ldr	r2, [r4, #0]
 8005f92:	3b00      	subs	r3, #0
 8005f94:	bf18      	it	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	0692      	lsls	r2, r2, #26
 8005f9a:	d42b      	bmi.n	8005ff4 <_printf_common+0xb0>
 8005f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	47c8      	blx	r9
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d01e      	beq.n	8005fe8 <_printf_common+0xa4>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	6922      	ldr	r2, [r4, #16]
 8005fae:	f003 0306 	and.w	r3, r3, #6
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	bf02      	ittt	eq
 8005fb6:	68e5      	ldreq	r5, [r4, #12]
 8005fb8:	6833      	ldreq	r3, [r6, #0]
 8005fba:	1aed      	subeq	r5, r5, r3
 8005fbc:	68a3      	ldr	r3, [r4, #8]
 8005fbe:	bf0c      	ite	eq
 8005fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc4:	2500      	movne	r5, #0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bfc4      	itt	gt
 8005fca:	1a9b      	subgt	r3, r3, r2
 8005fcc:	18ed      	addgt	r5, r5, r3
 8005fce:	2600      	movs	r6, #0
 8005fd0:	341a      	adds	r4, #26
 8005fd2:	42b5      	cmp	r5, r6
 8005fd4:	d11a      	bne.n	800600c <_printf_common+0xc8>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e008      	b.n	8005fec <_printf_common+0xa8>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4652      	mov	r2, sl
 8005fde:	4641      	mov	r1, r8
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	47c8      	blx	r9
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d103      	bne.n	8005ff0 <_printf_common+0xac>
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7c6      	b.n	8005f82 <_printf_common+0x3e>
 8005ff4:	18e1      	adds	r1, r4, r3
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	2030      	movs	r0, #48	@ 0x30
 8005ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ffe:	4422      	add	r2, r4
 8006000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006008:	3302      	adds	r3, #2
 800600a:	e7c7      	b.n	8005f9c <_printf_common+0x58>
 800600c:	2301      	movs	r3, #1
 800600e:	4622      	mov	r2, r4
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	47c8      	blx	r9
 8006016:	3001      	adds	r0, #1
 8006018:	d0e6      	beq.n	8005fe8 <_printf_common+0xa4>
 800601a:	3601      	adds	r6, #1
 800601c:	e7d9      	b.n	8005fd2 <_printf_common+0x8e>
	...

08006020 <_printf_i>:
 8006020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	7e0f      	ldrb	r7, [r1, #24]
 8006026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006028:	2f78      	cmp	r7, #120	@ 0x78
 800602a:	4691      	mov	r9, r2
 800602c:	4680      	mov	r8, r0
 800602e:	460c      	mov	r4, r1
 8006030:	469a      	mov	sl, r3
 8006032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006036:	d807      	bhi.n	8006048 <_printf_i+0x28>
 8006038:	2f62      	cmp	r7, #98	@ 0x62
 800603a:	d80a      	bhi.n	8006052 <_printf_i+0x32>
 800603c:	2f00      	cmp	r7, #0
 800603e:	f000 80d2 	beq.w	80061e6 <_printf_i+0x1c6>
 8006042:	2f58      	cmp	r7, #88	@ 0x58
 8006044:	f000 80b9 	beq.w	80061ba <_printf_i+0x19a>
 8006048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800604c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006050:	e03a      	b.n	80060c8 <_printf_i+0xa8>
 8006052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006056:	2b15      	cmp	r3, #21
 8006058:	d8f6      	bhi.n	8006048 <_printf_i+0x28>
 800605a:	a101      	add	r1, pc, #4	@ (adr r1, 8006060 <_printf_i+0x40>)
 800605c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006060:	080060b9 	.word	0x080060b9
 8006064:	080060cd 	.word	0x080060cd
 8006068:	08006049 	.word	0x08006049
 800606c:	08006049 	.word	0x08006049
 8006070:	08006049 	.word	0x08006049
 8006074:	08006049 	.word	0x08006049
 8006078:	080060cd 	.word	0x080060cd
 800607c:	08006049 	.word	0x08006049
 8006080:	08006049 	.word	0x08006049
 8006084:	08006049 	.word	0x08006049
 8006088:	08006049 	.word	0x08006049
 800608c:	080061cd 	.word	0x080061cd
 8006090:	080060f7 	.word	0x080060f7
 8006094:	08006187 	.word	0x08006187
 8006098:	08006049 	.word	0x08006049
 800609c:	08006049 	.word	0x08006049
 80060a0:	080061ef 	.word	0x080061ef
 80060a4:	08006049 	.word	0x08006049
 80060a8:	080060f7 	.word	0x080060f7
 80060ac:	08006049 	.word	0x08006049
 80060b0:	08006049 	.word	0x08006049
 80060b4:	0800618f 	.word	0x0800618f
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	1d1a      	adds	r2, r3, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6032      	str	r2, [r6, #0]
 80060c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060c8:	2301      	movs	r3, #1
 80060ca:	e09d      	b.n	8006208 <_printf_i+0x1e8>
 80060cc:	6833      	ldr	r3, [r6, #0]
 80060ce:	6820      	ldr	r0, [r4, #0]
 80060d0:	1d19      	adds	r1, r3, #4
 80060d2:	6031      	str	r1, [r6, #0]
 80060d4:	0606      	lsls	r6, r0, #24
 80060d6:	d501      	bpl.n	80060dc <_printf_i+0xbc>
 80060d8:	681d      	ldr	r5, [r3, #0]
 80060da:	e003      	b.n	80060e4 <_printf_i+0xc4>
 80060dc:	0645      	lsls	r5, r0, #25
 80060de:	d5fb      	bpl.n	80060d8 <_printf_i+0xb8>
 80060e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	da03      	bge.n	80060f0 <_printf_i+0xd0>
 80060e8:	232d      	movs	r3, #45	@ 0x2d
 80060ea:	426d      	negs	r5, r5
 80060ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060f0:	4859      	ldr	r0, [pc, #356]	@ (8006258 <_printf_i+0x238>)
 80060f2:	230a      	movs	r3, #10
 80060f4:	e011      	b.n	800611a <_printf_i+0xfa>
 80060f6:	6821      	ldr	r1, [r4, #0]
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	0608      	lsls	r0, r1, #24
 80060fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006100:	d402      	bmi.n	8006108 <_printf_i+0xe8>
 8006102:	0649      	lsls	r1, r1, #25
 8006104:	bf48      	it	mi
 8006106:	b2ad      	uxthmi	r5, r5
 8006108:	2f6f      	cmp	r7, #111	@ 0x6f
 800610a:	4853      	ldr	r0, [pc, #332]	@ (8006258 <_printf_i+0x238>)
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	bf14      	ite	ne
 8006110:	230a      	movne	r3, #10
 8006112:	2308      	moveq	r3, #8
 8006114:	2100      	movs	r1, #0
 8006116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800611a:	6866      	ldr	r6, [r4, #4]
 800611c:	60a6      	str	r6, [r4, #8]
 800611e:	2e00      	cmp	r6, #0
 8006120:	bfa2      	ittt	ge
 8006122:	6821      	ldrge	r1, [r4, #0]
 8006124:	f021 0104 	bicge.w	r1, r1, #4
 8006128:	6021      	strge	r1, [r4, #0]
 800612a:	b90d      	cbnz	r5, 8006130 <_printf_i+0x110>
 800612c:	2e00      	cmp	r6, #0
 800612e:	d04b      	beq.n	80061c8 <_printf_i+0x1a8>
 8006130:	4616      	mov	r6, r2
 8006132:	fbb5 f1f3 	udiv	r1, r5, r3
 8006136:	fb03 5711 	mls	r7, r3, r1, r5
 800613a:	5dc7      	ldrb	r7, [r0, r7]
 800613c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006140:	462f      	mov	r7, r5
 8006142:	42bb      	cmp	r3, r7
 8006144:	460d      	mov	r5, r1
 8006146:	d9f4      	bls.n	8006132 <_printf_i+0x112>
 8006148:	2b08      	cmp	r3, #8
 800614a:	d10b      	bne.n	8006164 <_printf_i+0x144>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07df      	lsls	r7, r3, #31
 8006150:	d508      	bpl.n	8006164 <_printf_i+0x144>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	bfde      	ittt	le
 800615a:	2330      	movle	r3, #48	@ 0x30
 800615c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006164:	1b92      	subs	r2, r2, r6
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	f8cd a000 	str.w	sl, [sp]
 800616c:	464b      	mov	r3, r9
 800616e:	aa03      	add	r2, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fee6 	bl	8005f44 <_printf_common>
 8006178:	3001      	adds	r0, #1
 800617a:	d14a      	bne.n	8006212 <_printf_i+0x1f2>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f043 0320 	orr.w	r3, r3, #32
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	4833      	ldr	r0, [pc, #204]	@ (800625c <_printf_i+0x23c>)
 8006190:	2778      	movs	r7, #120	@ 0x78
 8006192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	6831      	ldr	r1, [r6, #0]
 800619a:	061f      	lsls	r7, r3, #24
 800619c:	f851 5b04 	ldr.w	r5, [r1], #4
 80061a0:	d402      	bmi.n	80061a8 <_printf_i+0x188>
 80061a2:	065f      	lsls	r7, r3, #25
 80061a4:	bf48      	it	mi
 80061a6:	b2ad      	uxthmi	r5, r5
 80061a8:	6031      	str	r1, [r6, #0]
 80061aa:	07d9      	lsls	r1, r3, #31
 80061ac:	bf44      	itt	mi
 80061ae:	f043 0320 	orrmi.w	r3, r3, #32
 80061b2:	6023      	strmi	r3, [r4, #0]
 80061b4:	b11d      	cbz	r5, 80061be <_printf_i+0x19e>
 80061b6:	2310      	movs	r3, #16
 80061b8:	e7ac      	b.n	8006114 <_printf_i+0xf4>
 80061ba:	4827      	ldr	r0, [pc, #156]	@ (8006258 <_printf_i+0x238>)
 80061bc:	e7e9      	b.n	8006192 <_printf_i+0x172>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f023 0320 	bic.w	r3, r3, #32
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	e7f6      	b.n	80061b6 <_printf_i+0x196>
 80061c8:	4616      	mov	r6, r2
 80061ca:	e7bd      	b.n	8006148 <_printf_i+0x128>
 80061cc:	6833      	ldr	r3, [r6, #0]
 80061ce:	6825      	ldr	r5, [r4, #0]
 80061d0:	6961      	ldr	r1, [r4, #20]
 80061d2:	1d18      	adds	r0, r3, #4
 80061d4:	6030      	str	r0, [r6, #0]
 80061d6:	062e      	lsls	r6, r5, #24
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	d501      	bpl.n	80061e0 <_printf_i+0x1c0>
 80061dc:	6019      	str	r1, [r3, #0]
 80061de:	e002      	b.n	80061e6 <_printf_i+0x1c6>
 80061e0:	0668      	lsls	r0, r5, #25
 80061e2:	d5fb      	bpl.n	80061dc <_printf_i+0x1bc>
 80061e4:	8019      	strh	r1, [r3, #0]
 80061e6:	2300      	movs	r3, #0
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	4616      	mov	r6, r2
 80061ec:	e7bc      	b.n	8006168 <_printf_i+0x148>
 80061ee:	6833      	ldr	r3, [r6, #0]
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	6032      	str	r2, [r6, #0]
 80061f4:	681e      	ldr	r6, [r3, #0]
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	2100      	movs	r1, #0
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7fa f838 	bl	8000270 <memchr>
 8006200:	b108      	cbz	r0, 8006206 <_printf_i+0x1e6>
 8006202:	1b80      	subs	r0, r0, r6
 8006204:	6060      	str	r0, [r4, #4]
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	2300      	movs	r3, #0
 800620c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006210:	e7aa      	b.n	8006168 <_printf_i+0x148>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	4632      	mov	r2, r6
 8006216:	4649      	mov	r1, r9
 8006218:	4640      	mov	r0, r8
 800621a:	47d0      	blx	sl
 800621c:	3001      	adds	r0, #1
 800621e:	d0ad      	beq.n	800617c <_printf_i+0x15c>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	079b      	lsls	r3, r3, #30
 8006224:	d413      	bmi.n	800624e <_printf_i+0x22e>
 8006226:	68e0      	ldr	r0, [r4, #12]
 8006228:	9b03      	ldr	r3, [sp, #12]
 800622a:	4298      	cmp	r0, r3
 800622c:	bfb8      	it	lt
 800622e:	4618      	movlt	r0, r3
 8006230:	e7a6      	b.n	8006180 <_printf_i+0x160>
 8006232:	2301      	movs	r3, #1
 8006234:	4632      	mov	r2, r6
 8006236:	4649      	mov	r1, r9
 8006238:	4640      	mov	r0, r8
 800623a:	47d0      	blx	sl
 800623c:	3001      	adds	r0, #1
 800623e:	d09d      	beq.n	800617c <_printf_i+0x15c>
 8006240:	3501      	adds	r5, #1
 8006242:	68e3      	ldr	r3, [r4, #12]
 8006244:	9903      	ldr	r1, [sp, #12]
 8006246:	1a5b      	subs	r3, r3, r1
 8006248:	42ab      	cmp	r3, r5
 800624a:	dcf2      	bgt.n	8006232 <_printf_i+0x212>
 800624c:	e7eb      	b.n	8006226 <_printf_i+0x206>
 800624e:	2500      	movs	r5, #0
 8006250:	f104 0619 	add.w	r6, r4, #25
 8006254:	e7f5      	b.n	8006242 <_printf_i+0x222>
 8006256:	bf00      	nop
 8006258:	08006499 	.word	0x08006499
 800625c:	080064aa 	.word	0x080064aa

08006260 <memmove>:
 8006260:	4288      	cmp	r0, r1
 8006262:	b510      	push	{r4, lr}
 8006264:	eb01 0402 	add.w	r4, r1, r2
 8006268:	d902      	bls.n	8006270 <memmove+0x10>
 800626a:	4284      	cmp	r4, r0
 800626c:	4623      	mov	r3, r4
 800626e:	d807      	bhi.n	8006280 <memmove+0x20>
 8006270:	1e43      	subs	r3, r0, #1
 8006272:	42a1      	cmp	r1, r4
 8006274:	d008      	beq.n	8006288 <memmove+0x28>
 8006276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800627a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800627e:	e7f8      	b.n	8006272 <memmove+0x12>
 8006280:	4402      	add	r2, r0
 8006282:	4601      	mov	r1, r0
 8006284:	428a      	cmp	r2, r1
 8006286:	d100      	bne.n	800628a <memmove+0x2a>
 8006288:	bd10      	pop	{r4, pc}
 800628a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800628e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006292:	e7f7      	b.n	8006284 <memmove+0x24>

08006294 <_sbrk_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d06      	ldr	r5, [pc, #24]	@ (80062b0 <_sbrk_r+0x1c>)
 8006298:	2300      	movs	r3, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fa fcee 	bl	8000c80 <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_sbrk_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_sbrk_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20013da8 	.word	0x20013da8

080062b4 <_realloc_r>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	4680      	mov	r8, r0
 80062ba:	4615      	mov	r5, r2
 80062bc:	460c      	mov	r4, r1
 80062be:	b921      	cbnz	r1, 80062ca <_realloc_r+0x16>
 80062c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4611      	mov	r1, r2
 80062c6:	f7ff bc59 	b.w	8005b7c <_malloc_r>
 80062ca:	b92a      	cbnz	r2, 80062d8 <_realloc_r+0x24>
 80062cc:	f7ff fbea 	bl	8005aa4 <_free_r>
 80062d0:	2400      	movs	r4, #0
 80062d2:	4620      	mov	r0, r4
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	f000 f81a 	bl	8006310 <_malloc_usable_size_r>
 80062dc:	4285      	cmp	r5, r0
 80062de:	4606      	mov	r6, r0
 80062e0:	d802      	bhi.n	80062e8 <_realloc_r+0x34>
 80062e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062e6:	d8f4      	bhi.n	80062d2 <_realloc_r+0x1e>
 80062e8:	4629      	mov	r1, r5
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7ff fc46 	bl	8005b7c <_malloc_r>
 80062f0:	4607      	mov	r7, r0
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0ec      	beq.n	80062d0 <_realloc_r+0x1c>
 80062f6:	42b5      	cmp	r5, r6
 80062f8:	462a      	mov	r2, r5
 80062fa:	4621      	mov	r1, r4
 80062fc:	bf28      	it	cs
 80062fe:	4632      	movcs	r2, r6
 8006300:	f7ff fbc2 	bl	8005a88 <memcpy>
 8006304:	4621      	mov	r1, r4
 8006306:	4640      	mov	r0, r8
 8006308:	f7ff fbcc 	bl	8005aa4 <_free_r>
 800630c:	463c      	mov	r4, r7
 800630e:	e7e0      	b.n	80062d2 <_realloc_r+0x1e>

08006310 <_malloc_usable_size_r>:
 8006310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006314:	1f18      	subs	r0, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfbc      	itt	lt
 800631a:	580b      	ldrlt	r3, [r1, r0]
 800631c:	18c0      	addlt	r0, r0, r3
 800631e:	4770      	bx	lr

08006320 <_init>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	bf00      	nop
 8006324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006326:	bc08      	pop	{r3}
 8006328:	469e      	mov	lr, r3
 800632a:	4770      	bx	lr

0800632c <_fini>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	bf00      	nop
 8006330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006332:	bc08      	pop	{r3}
 8006334:	469e      	mov	lr, r3
 8006336:	4770      	bx	lr
