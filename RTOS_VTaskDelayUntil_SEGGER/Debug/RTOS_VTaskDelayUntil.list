
RTOS_VTaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800668c  0800668c  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800668c  0800668c  0000768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006694  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00013c10  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c2c  20013c2c  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e29  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bb0  00000000  00000000  0001ae75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0001da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  0001ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024052  00000000  00000000  0001fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001487e  00000000  00000000  00043a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e806f  00000000  00000000  000582ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014035d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b20  00000000  00000000  001403a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b9  00000000  00000000  00144ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064ec 	.word	0x080064ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080064ec 	.word	0x080064ec

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e58 	.word	0x20012e58

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbb3 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f871 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8d9 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 8000566:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <main+0xd0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2e      	ldr	r2, [pc, #184]	@ (8000624 <main+0xd0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000572:	482d      	ldr	r0, [pc, #180]	@ (8000628 <main+0xd4>)
 8000574:	f003 fd16 	bl	8003fa4 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000578:	f003 fb3e 	bl	8003bf8 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	22c8      	movs	r2, #200	@ 0xc8
 800058a:	4928      	ldr	r1, [pc, #160]	@ (800062c <main+0xd8>)
 800058c:	4828      	ldr	r0, [pc, #160]	@ (8000630 <main+0xdc>)
 800058e:	f001 febc 	bl	800230a <xTaskCreate>
 8000592:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d00b      	beq.n	80005b2 <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800059a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059e:	f383 8811 	msr	BASEPRI, r3
 80005a2:	f3bf 8f6f 	isb	sy
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	@ 0xc8
 80005c0:	491c      	ldr	r1, [pc, #112]	@ (8000634 <main+0xe0>)
 80005c2:	481d      	ldr	r0, [pc, #116]	@ (8000638 <main+0xe4>)
 80005c4:	f001 fea1 	bl	800230a <xTaskCreate>
 80005c8:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00b      	beq.n	80005e8 <main+0x94>
    __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	617b      	str	r3, [r7, #20]
}
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x90>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task3_handle);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	22c8      	movs	r2, #200	@ 0xc8
 80005f4:	4911      	ldr	r1, [pc, #68]	@ (800063c <main+0xe8>)
 80005f6:	4812      	ldr	r0, [pc, #72]	@ (8000640 <main+0xec>)
 80005f8:	f001 fe87 	bl	800230a <xTaskCreate>
 80005fc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00b      	beq.n	800061c <main+0xc8>
    __asm volatile
 8000604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	613b      	str	r3, [r7, #16]
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0xc4>

  vTaskStartScheduler();
 800061c:	f002 f8c0 	bl	80027a0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0xcc>
 8000624:	e0001000 	.word	0xe0001000
 8000628:	0003d090 	.word	0x0003d090
 800062c:	08006504 	.word	0x08006504
 8000630:	080009d5 	.word	0x080009d5
 8000634:	08006514 	.word	0x08006514
 8000638:	08000a11 	.word	0x08000a11
 800063c:	08006524 	.word	0x08006524
 8000640:	08000a4d 	.word	0x08000a4d

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 ff10 	bl	8006478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	@ 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdef 	bl	80012ac <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9ea 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f850 	bl	800179c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9d3 	bl	8000aac <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	@ 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba2      	ldr	r3, [pc, #648]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4aa1      	ldr	r2, [pc, #644]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b9f      	ldr	r3, [pc, #636]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9b      	ldr	r3, [pc, #620]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a9a      	ldr	r2, [pc, #616]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b98      	ldr	r3, [pc, #608]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b94      	ldr	r3, [pc, #592]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a93      	ldr	r2, [pc, #588]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b91      	ldr	r3, [pc, #580]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8d      	ldr	r3, [pc, #564]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a8c      	ldr	r2, [pc, #560]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b8a      	ldr	r3, [pc, #552]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b86      	ldr	r3, [pc, #536]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a85      	ldr	r2, [pc, #532]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7f      	ldr	r3, [pc, #508]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a7e      	ldr	r2, [pc, #504]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b7c      	ldr	r3, [pc, #496]	@ (80009bc <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4879      	ldr	r0, [pc, #484]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80007dc:	f000 fd32 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4877      	ldr	r0, [pc, #476]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 80007e6:	f000 fd2d 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007f0:	4875      	ldr	r0, [pc, #468]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80007f2:	f000 fd27 	bl	8001244 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486c      	ldr	r0, [pc, #432]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb7d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4866      	ldr	r0, [pc, #408]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800082a:	f000 fb6f 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fb5f 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	485a      	ldr	r0, [pc, #360]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000864:	f000 fb52 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000868:	2310      	movs	r3, #16
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000878:	2306      	movs	r3, #6
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4852      	ldr	r0, [pc, #328]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fb42 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000888:	23e0      	movs	r3, #224	@ 0xe0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000898:	2305      	movs	r3, #5
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484a      	ldr	r0, [pc, #296]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fb32 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4845      	ldr	r0, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb26 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483c      	ldr	r0, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 80008de:	f000 fb15 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 80008fc:	f000 fb06 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000900:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000912:	2306      	movs	r3, #6
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4829      	ldr	r0, [pc, #164]	@ (80009c4 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 faf5 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4825      	ldr	r0, [pc, #148]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fae8 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094e:	230a      	movs	r3, #10
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_GPIO_Init+0x2b4>)
 800095a:	f000 fad7 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4815      	ldr	r0, [pc, #84]	@ (80009c8 <MX_GPIO_Init+0x2b0>)
 8000972:	f000 facb 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0x2b8>)
 8000994:	f000 faba 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 faad 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void *parameter)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	TickType_t xLastwaketime;
	xLastwaketime  = xTaskGetTickCount();
 80009dc:	f002 f854 	bl	8002a88 <xTaskGetTickCount>
 80009e0:	4603      	mov	r3, r0
 80009e2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <led_green_handler+0x34>)
 80009e6:	f005 fc99 	bl	800631c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <led_green_handler+0x38>)
 80009f0:	f000 fc41 	bl	8001276 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelayUntil(&xLastwaketime,pdMS_TO_TICKS(1000));
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fdf3 	bl	80025e8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 8000a02:	bf00      	nop
 8000a04:	e7ee      	b.n	80009e4 <led_green_handler+0x10>
 8000a06:	bf00      	nop
 8000a08:	08006534 	.word	0x08006534
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <led_red_handler>:
	}
}

static void led_red_handler(void *parameter)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	TickType_t xLastwaketime;
	xLastwaketime  = xTaskGetTickCount();
 8000a18:	f002 f836 	bl	8002a88 <xTaskGetTickCount>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000a20:	4808      	ldr	r0, [pc, #32]	@ (8000a44 <led_red_handler+0x34>)
 8000a22:	f005 fc7b 	bl	800631c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a2a:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <led_red_handler+0x38>)
 8000a2c:	f000 fc23 	bl	8001276 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelayUntil(&xLastwaketime,pdMS_TO_TICKS(1000));
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fdd5 	bl	80025e8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000a3e:	bf00      	nop
 8000a40:	e7ee      	b.n	8000a20 <led_red_handler+0x10>
 8000a42:	bf00      	nop
 8000a44:	08006548 	.word	0x08006548
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <led_blue_handler>:
	}
}

static void led_blue_handler(void *parameter)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	TickType_t xLastwaketime;
	xLastwaketime  = xTaskGetTickCount();
 8000a54:	f002 f818 	bl	8002a88 <xTaskGetTickCount>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <led_blue_handler+0x34>)
 8000a5e:	f005 fc5d 	bl	800631c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_BLUE_PIN);
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <led_blue_handler+0x38>)
 8000a68:	f000 fc05 	bl	8001276 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelayUntil(&xLastwaketime,pdMS_TO_TICKS(1000));
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fdb7 	bl	80025e8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000a7a:	bf00      	nop
 8000a7c:	e7ee      	b.n	8000a5c <led_blue_handler+0x10>
 8000a7e:	bf00      	nop
 8000a80:	0800655c 	.word	0x0800655c
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f935 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000af6:	f002 fc3d 	bl	8003374 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	@ 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a32      	ldr	r2, [pc, #200]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <HAL_InitTick+0xe4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f838 	bl	8001bb4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f81d 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b54:	e004      	b.n	8000b60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b56:	f001 f819 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <HAL_InitTick+0xe8>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	0c9b      	lsrs	r3, r3, #18
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <HAL_InitTick+0xf0>)
 8000b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b94:	4817      	ldr	r0, [pc, #92]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000b96:	f001 f83f 	bl	8001c18 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d11b      	bne.n	8000be0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba8:	4812      	ldr	r0, [pc, #72]	@ (8000bf4 <HAL_InitTick+0xec>)
 8000baa:	f001 f88f 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bbc:	2036      	movs	r0, #54	@ 0x36
 8000bbe:	f000 f997 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d808      	bhi.n	8000bda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2036      	movs	r0, #54	@ 0x36
 8000bce:	f000 f973 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_InitTick+0xf4>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e002      	b.n	8000be0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3738      	adds	r7, #56	@ 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f001 f8b5 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000038 	.word	0x20000038

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f005 fbf3 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc57 	bl	8000554 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cb4:	08006694 	.word	0x08006694
  ldr r2, =_sbss
 8000cb8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cbc:	20013c2c 	.word	0x20013c2c

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8d8 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff08 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fede 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000080 	.word	0x20000080

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000080 	.word	0x20000080

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e16b      	b.n	8001200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 815a 	bne.w	80011fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80b4 	beq.w	80011fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	4a5f      	ldr	r2, [pc, #380]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a5b      	ldr	r2, [pc, #364]	@ (800121c <HAL_GPIO_Init+0x310>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	@ (8001220 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	@ (8001224 <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x222>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	@ (8001228 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	@ (800122c <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001230 <HAL_GPIO_Init+0x324>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001234 <HAL_GPIO_Init+0x328>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x32c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <HAL_GPIO_Init+0x330>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x20a>
 8001112:	2307      	movs	r3, #7
 8001114:	e00e      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001116:	2308      	movs	r3, #8
 8001118:	e00c      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111a:	2306      	movs	r3, #6
 800111c:	e00a      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x228>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x228>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	@ (800121c <HAL_GPIO_Init+0x310>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <HAL_GPIO_Init+0x334>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a32      	ldr	r2, [pc, #200]	@ (8001240 <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <HAL_GPIO_Init+0x334>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <HAL_GPIO_Init+0x334>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f ae90 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	041a      	lsls	r2, r3, #16
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43d9      	mvns	r1, r3
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e267      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ca:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b85      	ldr	r3, [pc, #532]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b82      	ldr	r3, [pc, #520]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e242      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b76      	ldr	r3, [pc, #472]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a75      	ldr	r2, [pc, #468]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6f      	ldr	r2, [pc, #444]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6d      	ldr	r3, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6c      	ldr	r2, [pc, #432]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b69      	ldr	r3, [pc, #420]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a68      	ldr	r2, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fce4 	bl	8000d30 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fce0 	bl	8000d30 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e207      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcd0 	bl	8000d30 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fccc 	bl	8000d30 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f3      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013c2:	4b4a      	ldr	r3, [pc, #296]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c7      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4937      	ldr	r1, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc85 	bl	8000d30 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc81 	bl	8000d30 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a8      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4925      	ldr	r1, [pc, #148]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_RCC_OscConfig+0x244>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc64 	bl	8000d30 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc60 	bl	8000d30 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e187      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc44 	bl	8000d30 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc40 	bl	8000d30 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e167      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_RCC_OscConfig+0x240>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e01b      	b.n	8001504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc2d 	bl	8000d30 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00e      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc29 	bl	8000d30 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e150      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ea      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b81      	ldr	r3, [pc, #516]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b7d      	ldr	r3, [pc, #500]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a7c      	ldr	r2, [pc, #496]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b7a      	ldr	r3, [pc, #488]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b77      	ldr	r3, [pc, #476]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbe9 	bl	8000d30 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fbe5 	bl	8000d30 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e10c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x474>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ea>
 8001588:	4b64      	ldr	r3, [pc, #400]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158c:	4a63      	ldr	r2, [pc, #396]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	@ 0x70
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x30c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	4a5e      	ldr	r2, [pc, #376]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015aa:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5b      	ldr	r2, [pc, #364]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a57      	ldr	r2, [pc, #348]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	4b55      	ldr	r3, [pc, #340]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a54      	ldr	r2, [pc, #336]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbaa 	bl	8000d30 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fba6 	bl	8000d30 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0cb      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4b49      	ldr	r3, [pc, #292]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ee      	beq.n	80015e0 <HAL_RCC_OscConfig+0x334>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fb94 	bl	8000d30 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb90 	bl	8000d30 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b5      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a38      	ldr	r2, [pc, #224]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a1 	beq.w	800178c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d05c      	beq.n	8001710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d141      	bne.n	80016e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb64 	bl	8000d30 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb60 	bl	8000d30 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e087      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	491b      	ldr	r1, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb39 	bl	8000d30 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb35 	bl	8000d30 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e05c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x416>
 80016e0:	e054      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb22 	bl	8000d30 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb1e 	bl	8000d30 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e045      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
 800170e:	e03d      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e038      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000
 8001724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_RCC_OscConfig+0x4ec>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d121      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11a      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800175e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa50 	bl	8000d30 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa4c 	bl	8000d30 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f8e0 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	08006630 	.word	0x08006630
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	@ 0x50
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80e1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0db      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a0:	e0db      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b73      	ldr	r3, [pc, #460]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80019a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4621      	mov	r1, r4
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	6139      	str	r1, [r7, #16]
 80019f8:	4629      	mov	r1, r5
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a16:	4651      	mov	r1, sl
 8001a18:	018a      	lsls	r2, r1, #6
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a20:	4659      	mov	r1, fp
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	eb18 0303 	adds.w	r3, r8, r3
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	462b      	mov	r3, r5
 8001a48:	eb49 0303 	adc.w	r3, r9, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	024b      	lsls	r3, r1, #9
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a64:	4621      	mov	r1, r4
 8001a66:	024a      	lsls	r2, r1, #9
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a78:	f7fe fbf4 	bl	8000264 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8001adc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00eb      	lsls	r3, r5, #3
 8001aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aee:	00e2      	lsls	r2, r4, #3
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	464b      	mov	r3, r9
 8001afc:	eb45 0303 	adc.w	r3, r5, r3
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2c:	f7fe fb9a 	bl	8000264 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08006640 	.word	0x08006640

08001bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_RCC_GetClockConfig+0x60>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e041      	b.n	8001cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f839 	bl	8001cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 f9c0 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04e      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d01d      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d010      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40010400 	.word	0x40010400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40001800 	.word	0x40001800

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d020      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8d2 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8c4 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8d5 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ac 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89e 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8af 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d020      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f886 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f878 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f889 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0210 	mvn.w	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f860 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f852 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f863 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0201 	mvn.w	r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fdb8 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f906 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f834 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d8 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a31      	ldr	r2, [pc, #196]	@ (8002110 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a30      	ldr	r2, [pc, #192]	@ (8002114 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2e      	ldr	r2, [pc, #184]	@ (800211c <TIM_Base_SetConfig+0x140>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <TIM_Base_SetConfig+0x144>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <TIM_Base_SetConfig+0x148>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	@ (8002128 <TIM_Base_SetConfig+0x14c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <TIM_Base_SetConfig+0x150>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <TIM_Base_SetConfig+0x154>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a10      	ldr	r2, [pc, #64]	@ (8002108 <TIM_Base_SetConfig+0x12c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <TIM_Base_SetConfig+0x13c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40010400 	.word	0x40010400
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400
 8002124:	40014800 	.word	0x40014800
 8002128:	40001800 	.word	0x40001800
 800212c:	40001c00 	.word	0x40001c00
 8002130:	40002000 	.word	0x40002000

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0208 	add.w	r2, r3, #8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0208 	add.w	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002190:	f240 1019 	movw	r0, #281	@ 0x119
 8002194:	f003 fe06 	bl	8005da4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021ae:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021b2:	f003 fdf7 	bl	8005da4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d103      	bne.n	80021de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e00c      	b.n	80021f8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3308      	adds	r3, #8
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e002      	b.n	80021ec <vListInsert+0x2e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d2f6      	bcs.n	80021e6 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002224:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002228:	f003 fdbc 	bl	8005da4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6892      	ldr	r2, [r2, #8]
 800224a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6852      	ldr	r2, [r2, #4]
 8002254:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d103      	bne.n	8002268 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1e5a      	subs	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f240 101d 	movw	r0, #285	@ 0x11d
 8002282:	f003 fdcb 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002292:	b580      	push	{r7, lr}
 8002294:	b08a      	sub	sp, #40	@ 0x28
 8002296:	af04      	add	r7, sp, #16
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fa13 	bl	80036d0 <pvPortMalloc>
 80022aa:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d013      	beq.n	80022da <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022b2:	2058      	movs	r0, #88	@ 0x58
 80022b4:	f001 fa0c 	bl	80036d0 <pvPortMalloc>
 80022b8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022c0:	2258      	movs	r2, #88	@ 0x58
 80022c2:	2100      	movs	r1, #0
 80022c4:	6978      	ldr	r0, [r7, #20]
 80022c6:	f004 f8d7 	bl	8006478 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d0:	e005      	b.n	80022de <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022d2:	6938      	ldr	r0, [r7, #16]
 80022d4:	f001 fb34 	bl	8003940 <vPortFree>
 80022d8:	e001      	b.n	80022de <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022e4:	2300      	movs	r3, #0
 80022e6:	9303      	str	r3, [sp, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	9302      	str	r3, [sp, #8]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f82d 	bl	800235a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002300:	697b      	ldr	r3, [r7, #20]
    }
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800230a:	b580      	push	{r7, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ffb3 	bl	8002292 <prvCreateTask>
 800232c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f000 f8a1 	bl	800247c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800233a:	2301      	movs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e002      	b.n	8002346 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	4619      	mov	r1, r3
 800234a:	20c2      	movs	r0, #194	@ 0xc2
 800234c:	f003 fd66 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002350:	697b      	ldr	r3, [r7, #20]
    }
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b088      	sub	sp, #32
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	21a5      	movs	r1, #165	@ 0xa5
 8002374:	f004 f880 	bl	8006478 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002382:	3b01      	subs	r3, #1
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f023 0307 	bic.w	r3, r3, #7
 8002390:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	617b      	str	r3, [r7, #20]
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01e      	beq.n	80023f8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e012      	b.n	80023e6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	7819      	ldrb	r1, [r3, #0]
 80023c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	3334      	adds	r3, #52	@ 0x34
 80023d0:	460a      	mov	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	d9e9      	bls.n	80023c0 <prvInitialiseNewTask+0x66>
 80023ec:	e000      	b.n	80023f0 <prvInitialiseNewTask+0x96>
            {
                break;
 80023ee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d90b      	bls.n	8002416 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80023fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	613b      	str	r3, [r7, #16]
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	e7fd      	b.n	8002412 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	2b04      	cmp	r3, #4
 800241a:	d901      	bls.n	8002420 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800241c:	2304      	movs	r3, #4
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800242a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	3304      	adds	r3, #4
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff feb5 	bl	80021a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	3318      	adds	r3, #24
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff feb0 	bl	80021a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002444:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	f1c3 0205 	rsb	r2, r3, #5
 800244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	f000 fe0a 	bl	8003074 <pxPortInitialiseStack>
 8002460:	4602      	mov	r2, r0
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800246c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002470:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002472:	bf00      	nop
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002484:	f000 fff6 	bl	8003474 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002488:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <prvAddNewTaskToReadyList+0x150>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a4f      	ldr	r2, [pc, #316]	@ (80025cc <prvAddNewTaskToReadyList+0x150>)
 8002490:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002492:	4b4f      	ldr	r3, [pc, #316]	@ (80025d0 <prvAddNewTaskToReadyList+0x154>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800249a:	4a4d      	ldr	r2, [pc, #308]	@ (80025d0 <prvAddNewTaskToReadyList+0x154>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024a0:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <prvAddNewTaskToReadyList+0x150>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d110      	bne.n	80024ca <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024a8:	f000 fcbc 	bl	8002e24 <prvInitialiseTaskLists>
 80024ac:	e00d      	b.n	80024ca <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024ae:	4b49      	ldr	r3, [pc, #292]	@ (80025d4 <prvAddNewTaskToReadyList+0x158>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024b6:	4b46      	ldr	r3, [pc, #280]	@ (80025d0 <prvAddNewTaskToReadyList+0x154>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d802      	bhi.n	80024ca <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024c4:	4a42      	ldr	r2, [pc, #264]	@ (80025d0 <prvAddNewTaskToReadyList+0x154>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024ca:	4b43      	ldr	r3, [pc, #268]	@ (80025d8 <prvAddNewTaskToReadyList+0x15c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	4a41      	ldr	r2, [pc, #260]	@ (80025d8 <prvAddNewTaskToReadyList+0x15c>)
 80024d2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024d4:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <prvAddNewTaskToReadyList+0x15c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <prvAddNewTaskToReadyList+0x94>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fd0d 	bl	8005f04 <SEGGER_SYSVIEW_OnTaskCreate>
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	461d      	mov	r5, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461c      	mov	r4, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	1ae3      	subs	r3, r4, r3
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	462b      	mov	r3, r5
 800250c:	f001 fc16 	bl	8003d3c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fd7a 	bl	800600c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <prvAddNewTaskToReadyList+0x160>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	4a2d      	ldr	r2, [pc, #180]	@ (80025dc <prvAddNewTaskToReadyList+0x160>)
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252e:	492c      	ldr	r1, [pc, #176]	@ (80025e0 <prvAddNewTaskToReadyList+0x164>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3204      	adds	r2, #4
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <prvAddNewTaskToReadyList+0x164>)
 800256e:	441a      	add	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	615a      	str	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	4919      	ldr	r1, [pc, #100]	@ (80025e0 <prvAddNewTaskToReadyList+0x164>)
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <prvAddNewTaskToReadyList+0x164>)
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4403      	add	r3, r0
 8002598:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800259a:	f000 ff9d 	bl	80034d8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <prvAddNewTaskToReadyList+0x158>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <prvAddNewTaskToReadyList+0x154>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <prvAddNewTaskToReadyList+0x148>
 80025b4:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <prvAddNewTaskToReadyList+0x168>)
 80025b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bdb0      	pop	{r4, r5, r7, pc}
 80025cc:	2000015c 	.word	0x2000015c
 80025d0:	20000084 	.word	0x20000084
 80025d4:	20000168 	.word	0x20000168
 80025d8:	20000178 	.word	0x20000178
 80025dc:	20000164 	.word	0x20000164
 80025e0:	20000088 	.word	0x20000088
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <xTaskDelayUntil+0x2c>
    __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	617b      	str	r3, [r7, #20]
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10b      	bne.n	8002632 <xTaskDelayUntil+0x4a>
    __asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	613b      	str	r3, [r7, #16]
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	e7fd      	b.n	800262e <xTaskDelayUntil+0x46>

        vTaskSuspendAll();
 8002632:	f000 f909 	bl	8002848 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002636:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <xTaskDelayUntil+0x100>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 800263c:	4b2b      	ldr	r3, [pc, #172]	@ (80026ec <xTaskDelayUntil+0x104>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00b      	beq.n	800265c <xTaskDelayUntil+0x74>
    __asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	60fb      	str	r3, [r7, #12]
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xTaskDelayUntil+0x70>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4413      	add	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	d20b      	bcs.n	8002688 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	429a      	cmp	r2, r3
 8002678:	d211      	bcs.n	800269e <xTaskDelayUntil+0xb6>
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	429a      	cmp	r2, r3
 8002680:	d90d      	bls.n	800269e <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002682:	2301      	movs	r3, #1
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	e00a      	b.n	800269e <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	429a      	cmp	r2, r3
 8002690:	d303      	bcc.n	800269a <xTaskDelayUntil+0xb2>
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	429a      	cmp	r2, r3
 8002698:	d901      	bls.n	800269e <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800269a:	2301      	movs	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fc50 	bl	8002f58 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80026b8:	f000 f8d4 	bl	8002864 <xTaskResumeAll>
 80026bc:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <xTaskDelayUntil+0xec>
        {
            taskYIELD_WITHIN_API();
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <xTaskDelayUntil+0x108>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	4619      	mov	r1, r3
 80026d8:	20c4      	movs	r0, #196	@ 0xc4
 80026da:	f003 fb9f 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xShouldDelay;
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80026e0:	4618      	mov	r0, r3
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000160 	.word	0x20000160
 80026ec:	20000184 	.word	0x20000184
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	@ 0x28
 80026f8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e011      	b.n	800273a <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002716:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <prvCreateIdleTasks+0xa0>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4413      	add	r3, r2
 800271c:	7819      	ldrb	r1, [r3, #0]
 800271e:	1d3a      	adds	r2, r7, #4
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	460a      	mov	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002728:	1d3a      	adds	r2, r7, #4
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d9ea      	bls.n	8002716 <prvCreateIdleTasks+0x22>
 8002740:	e000      	b.n	8002744 <prvCreateIdleTasks+0x50>
        {
            break;
 8002742:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002744:	1d3a      	adds	r2, r7, #4
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4413      	add	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e015      	b.n	8002780 <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8002754:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <prvCreateIdleTasks+0xa4>)
 8002756:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <prvCreateIdleTasks+0xa8>)
 800275e:	4413      	add	r3, r2
 8002760:	1d39      	adds	r1, r7, #4
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	2282      	movs	r2, #130	@ 0x82
 800276c:	6938      	ldr	r0, [r7, #16]
 800276e:	f7ff fdcc 	bl	800230a <xTaskCreate>
 8002772:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	3301      	adds	r3, #1
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	dde6      	ble.n	8002754 <prvCreateIdleTasks+0x60>
 8002786:	e000      	b.n	800278a <prvCreateIdleTasks+0x96>
        {
            break;
 8002788:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800278a:	69fb      	ldr	r3, [r7, #28]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08006570 	.word	0x08006570
 8002798:	08002df5 	.word	0x08002df5
 800279c:	20000180 	.word	0x20000180

080027a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80027a6:	f7ff ffa5 	bl	80026f4 <prvCreateIdleTasks>
 80027aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d124      	bne.n	80027fc <vTaskStartScheduler+0x5c>
    __asm volatile
 80027b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	60bb      	str	r3, [r7, #8]
}
 80027c4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <vTaskStartScheduler+0x90>)
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <vTaskStartScheduler+0x94>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <vTaskStartScheduler+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027da:	4b18      	ldr	r3, [pc, #96]	@ (800283c <vTaskStartScheduler+0x9c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <vTaskStartScheduler+0xa0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d102      	bne.n	80027ec <vTaskStartScheduler+0x4c>
 80027e6:	f003 fb71 	bl	8005ecc <SEGGER_SYSVIEW_OnIdle>
 80027ea:	e004      	b.n	80027f6 <vTaskStartScheduler+0x56>
 80027ec:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <vTaskStartScheduler+0xa0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fbc9 	bl	8005f88 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80027f6:	f000 fccd 	bl	8003194 <xPortStartScheduler>
 80027fa:	e00f      	b.n	800281c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d10b      	bne.n	800281c <vTaskStartScheduler+0x7c>
    __asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	607b      	str	r3, [r7, #4]
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <vTaskStartScheduler+0xa4>)
 800281e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002820:	20cd      	movs	r0, #205	@ 0xcd
 8002822:	f003 fabf 	bl	8005da4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000017c 	.word	0x2000017c
 8002834:	20000168 	.word	0x20000168
 8002838:	20000160 	.word	0x20000160
 800283c:	20000180 	.word	0x20000180
 8002840:	20000084 	.word	0x20000084
 8002844:	2000000c 	.word	0x2000000c

08002848 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <vTaskSuspendAll+0x18>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	4a03      	ldr	r2, [pc, #12]	@ (8002860 <vTaskSuspendAll+0x18>)
 8002854:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002856:	20cf      	movs	r0, #207	@ 0xcf
 8002858:	f003 faa4 	bl	8005da4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000184 	.word	0x20000184

08002864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002872:	f000 fdff 	bl	8003474 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800287a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a64 <xTaskResumeAll+0x200>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <xTaskResumeAll+0x36>
    __asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	603b      	str	r3, [r7, #0]
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	e7fd      	b.n	8002896 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <xTaskResumeAll+0x200>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3b01      	subs	r3, #1
 80028a0:	4a70      	ldr	r2, [pc, #448]	@ (8002a64 <xTaskResumeAll+0x200>)
 80028a2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80028a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <xTaskResumeAll+0x200>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 80ce 	bne.w	8002a4a <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002a68 <xTaskResumeAll+0x204>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80c9 	beq.w	8002a4a <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028b8:	e092      	b.n	80029e0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028ba:	4b6c      	ldr	r3, [pc, #432]	@ (8002a6c <xTaskResumeAll+0x208>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	6a12      	ldr	r2, [r2, #32]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	69d2      	ldr	r2, [r2, #28]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3318      	adds	r3, #24
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <xTaskResumeAll+0x8c>
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2200      	movs	r2, #0
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	429a      	cmp	r2, r3
 8002924:	d103      	bne.n	800292e <xTaskResumeAll+0xca>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fb63 	bl	800600c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <xTaskResumeAll+0x20c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	4a46      	ldr	r2, [pc, #280]	@ (8002a70 <xTaskResumeAll+0x20c>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295c:	4945      	ldr	r1, [pc, #276]	@ (8002a74 <xTaskResumeAll+0x210>)
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	3204      	adds	r2, #4
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	1d1a      	adds	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4a36      	ldr	r2, [pc, #216]	@ (8002a74 <xTaskResumeAll+0x210>)
 800299c:	441a      	add	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	615a      	str	r2, [r3, #20]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a6:	4933      	ldr	r1, [pc, #204]	@ (8002a74 <xTaskResumeAll+0x210>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b8:	1c59      	adds	r1, r3, #1
 80029ba:	482e      	ldr	r0, [pc, #184]	@ (8002a74 <xTaskResumeAll+0x210>)
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4403      	add	r3, r0
 80029c6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <xTaskResumeAll+0x214>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d904      	bls.n	80029e0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80029d6:	4a29      	ldr	r2, [pc, #164]	@ (8002a7c <xTaskResumeAll+0x218>)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2101      	movs	r1, #1
 80029dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029e0:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <xTaskResumeAll+0x208>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af68 	bne.w	80028ba <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80029f0:	f000 fa96 	bl	8002f20 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <xTaskResumeAll+0x21c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002a00:	f000 f86a 	bl	8002ad8 <xTaskIncrementTick>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <xTaskResumeAll+0x218>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ef      	bne.n	8002a00 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <xTaskResumeAll+0x21c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002a26:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <xTaskResumeAll+0x218>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <xTaskResumeAll+0x214>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <xTaskResumeAll+0x220>)
 8002a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a4a:	f000 fd45 	bl	80034d8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4619      	mov	r1, r3
 8002a52:	20d0      	movs	r0, #208	@ 0xd0
 8002a54:	f003 f9e2 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002a58:	69bb      	ldr	r3, [r7, #24]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000184 	.word	0x20000184
 8002a68:	2000015c 	.word	0x2000015c
 8002a6c:	2000011c 	.word	0x2000011c
 8002a70:	20000164 	.word	0x20000164
 8002a74:	20000088 	.word	0x20000088
 8002a78:	20000084 	.word	0x20000084
 8002a7c:	20000170 	.word	0x20000170
 8002a80:	2000016c 	.word	0x2000016c
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <xTaskGetTickCount+0x20>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	20d1      	movs	r0, #209	@ 0xd1
 8002a98:	f003 f9c0 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000160 	.word	0x20000160

08002aac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ab2:	f000 fdcb 	bl	800364c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <xTaskGetTickCountFromISR+0x28>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002ac0:	6839      	ldr	r1, [r7, #0]
 8002ac2:	20d2      	movs	r0, #210	@ 0xd2
 8002ac4:	f003 f9aa 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002ac8:	683b      	ldr	r3, [r7, #0]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000160 	.word	0x20000160

08002ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	@ 0x28
 8002adc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ae2:	4b83      	ldr	r3, [pc, #524]	@ (8002cf0 <xTaskIncrementTick+0x218>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80f3 	bne.w	8002cd2 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aec:	4b81      	ldr	r3, [pc, #516]	@ (8002cf4 <xTaskIncrementTick+0x21c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002af4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf4 <xTaskIncrementTick+0x21c>)
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d121      	bne.n	8002b44 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b00:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf8 <xTaskIncrementTick+0x220>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <xTaskIncrementTick+0x46>
 8002b22:	4b75      	ldr	r3, [pc, #468]	@ (8002cf8 <xTaskIncrementTick+0x220>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	4b74      	ldr	r3, [pc, #464]	@ (8002cfc <xTaskIncrementTick+0x224>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a72      	ldr	r2, [pc, #456]	@ (8002cf8 <xTaskIncrementTick+0x220>)
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4a72      	ldr	r2, [pc, #456]	@ (8002cfc <xTaskIncrementTick+0x224>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b72      	ldr	r3, [pc, #456]	@ (8002d00 <xTaskIncrementTick+0x228>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4a70      	ldr	r2, [pc, #448]	@ (8002d00 <xTaskIncrementTick+0x228>)
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	f000 f9ee 	bl	8002f20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b44:	4b6f      	ldr	r3, [pc, #444]	@ (8002d04 <xTaskIncrementTick+0x22c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	f0c0 80ac 	bcc.w	8002ca8 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b50:	4b69      	ldr	r3, [pc, #420]	@ (8002cf8 <xTaskIncrementTick+0x220>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <xTaskIncrementTick+0x22c>)
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	601a      	str	r2, [r3, #0]
                    break;
 8002b62:	e0a1      	b.n	8002ca8 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b64:	4b64      	ldr	r3, [pc, #400]	@ (8002cf8 <xTaskIncrementTick+0x220>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d203      	bcs.n	8002b84 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b7c:	4a61      	ldr	r2, [pc, #388]	@ (8002d04 <xTaskIncrementTick+0x22c>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6013      	str	r3, [r2, #0]
                        break;
 8002b82:	e091      	b.n	8002ca8 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	6892      	ldr	r2, [r2, #8]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d103      	bne.n	8002bb2 <xTaskIncrementTick+0xda>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01e      	beq.n	8002c08 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	6a12      	ldr	r2, [r2, #32]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	69d2      	ldr	r2, [r2, #28]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	3318      	adds	r3, #24
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d103      	bne.n	8002bf8 <xTaskIncrementTick+0x120>
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f9fe 	bl	800600c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <xTaskIncrementTick+0x230>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d08 <xTaskIncrementTick+0x230>)
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c26:	4939      	ldr	r1, [pc, #228]	@ (8002d0c <xTaskIncrementTick+0x234>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3304      	adds	r3, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	3204      	adds	r2, #4
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <xTaskIncrementTick+0x234>)
 8002c66:	441a      	add	r2, r3
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c70:	4926      	ldr	r1, [pc, #152]	@ (8002d0c <xTaskIncrementTick+0x234>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	4821      	ldr	r0, [pc, #132]	@ (8002d0c <xTaskIncrementTick+0x234>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4403      	add	r3, r0
 8002c90:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <xTaskIncrementTick+0x238>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f67f af57 	bls.w	8002b50 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca6:	e753      	b.n	8002b50 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <xTaskIncrementTick+0x238>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cae:	4917      	ldr	r1, [pc, #92]	@ (8002d0c <xTaskIncrementTick+0x234>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d901      	bls.n	8002cc4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <xTaskIncrementTick+0x23c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd0:	e004      	b.n	8002cdc <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <xTaskIncrementTick+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d18 <xTaskIncrementTick+0x240>)
 8002cda:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	4619      	mov	r1, r3
 8002ce0:	20db      	movs	r0, #219	@ 0xdb
 8002ce2:	f003 f89b 	bl	8005e1c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3728      	adds	r7, #40	@ 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000184 	.word	0x20000184
 8002cf4:	20000160 	.word	0x20000160
 8002cf8:	20000114 	.word	0x20000114
 8002cfc:	20000118 	.word	0x20000118
 8002d00:	20000174 	.word	0x20000174
 8002d04:	2000017c 	.word	0x2000017c
 8002d08:	20000164 	.word	0x20000164
 8002d0c:	20000088 	.word	0x20000088
 8002d10:	20000084 	.word	0x20000084
 8002d14:	20000170 	.word	0x20000170
 8002d18:	2000016c 	.word	0x2000016c

08002d1c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002d22:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <vTaskSwitchContext+0xc0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <vTaskSwitchContext+0xc4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002d30:	e04f      	b.n	8002dd2 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <vTaskSwitchContext+0xc4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d38:	4b2a      	ldr	r3, [pc, #168]	@ (8002de4 <vTaskSwitchContext+0xc8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f1c3 031f 	rsb	r3, r3, #31
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4926      	ldr	r1, [pc, #152]	@ (8002de8 <vTaskSwitchContext+0xcc>)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <vTaskSwitchContext+0x5e>
    __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	607b      	str	r3, [r7, #4]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <vTaskSwitchContext+0x5a>
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <vTaskSwitchContext+0xcc>)
 8002d86:	4413      	add	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d103      	bne.n	8002da8 <vTaskSwitchContext+0x8c>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	@ (8002dec <vTaskSwitchContext+0xd0>)
 8002db0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <vTaskSwitchContext+0xd4>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <vTaskSwitchContext+0xd0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d102      	bne.n	8002dc4 <vTaskSwitchContext+0xa8>
 8002dbe:	f003 f885 	bl	8005ecc <SEGGER_SYSVIEW_OnIdle>
 8002dc2:	e004      	b.n	8002dce <vTaskSwitchContext+0xb2>
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <vTaskSwitchContext+0xd0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 f8dd 	bl	8005f88 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <vTaskSwitchContext+0xd0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
    }
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000184 	.word	0x20000184
 8002de0:	20000170 	.word	0x20000170
 8002de4:	20000164 	.word	0x20000164
 8002de8:	20000088 	.word	0x20000088
 8002dec:	20000084 	.word	0x20000084
 8002df0:	20000180 	.word	0x20000180

08002df4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002dfc:	f000 f852 	bl	8002ea4 <prvCheckTasksWaitingTermination>
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */

        	if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <prvIdleTask+0x28>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d9f9      	bls.n	8002dfc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <prvIdleTask+0x2c>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e18:	e7f0      	b.n	8002dfc <prvIdleTask+0x8>
 8002e1a:	bf00      	nop
 8002e1c:	20000088 	.word	0x20000088
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e00c      	b.n	8002e4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <prvInitialiseTaskLists+0x60>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f98c 	bl	800215c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d9ef      	bls.n	8002e30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e50:	480d      	ldr	r0, [pc, #52]	@ (8002e88 <prvInitialiseTaskLists+0x64>)
 8002e52:	f7ff f983 	bl	800215c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e56:	480d      	ldr	r0, [pc, #52]	@ (8002e8c <prvInitialiseTaskLists+0x68>)
 8002e58:	f7ff f980 	bl	800215c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e5c:	480c      	ldr	r0, [pc, #48]	@ (8002e90 <prvInitialiseTaskLists+0x6c>)
 8002e5e:	f7ff f97d 	bl	800215c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e62:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <prvInitialiseTaskLists+0x70>)
 8002e64:	f7ff f97a 	bl	800215c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e68:	480b      	ldr	r0, [pc, #44]	@ (8002e98 <prvInitialiseTaskLists+0x74>)
 8002e6a:	f7ff f977 	bl	800215c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <prvInitialiseTaskLists+0x78>)
 8002e70:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <prvInitialiseTaskLists+0x64>)
 8002e72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <prvInitialiseTaskLists+0x7c>)
 8002e76:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <prvInitialiseTaskLists+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000088 	.word	0x20000088
 8002e88:	200000ec 	.word	0x200000ec
 8002e8c:	20000100 	.word	0x20000100
 8002e90:	2000011c 	.word	0x2000011c
 8002e94:	20000130 	.word	0x20000130
 8002e98:	20000148 	.word	0x20000148
 8002e9c:	20000114 	.word	0x20000114
 8002ea0:	20000118 	.word	0x20000118

08002ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eaa:	e019      	b.n	8002ee0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002eac:	f000 fae2 	bl	8003474 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002eb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <prvCheckTasksWaitingTermination+0x50>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f9b9 	bl	8002234 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef8 <prvCheckTasksWaitingTermination+0x54>)
 8002eca:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ed4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002ed6:	f000 faff 	bl	80034d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f810 	bl	8002f00 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <prvCheckTasksWaitingTermination+0x58>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e1      	bne.n	8002eac <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000130 	.word	0x20000130
 8002ef8:	2000015c 	.word	0x2000015c
 8002efc:	20000144 	.word	0x20000144

08002f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd17 	bl	8003940 <vPortFree>
            vPortFree( pxTCB );
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fd14 	bl	8003940 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f36:	e005      	b.n	8002f44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <prvResetNextTaskUnblockTime+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <prvResetNextTaskUnblockTime+0x34>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000114 	.word	0x20000114
 8002f54:	2000017c 	.word	0x2000017c

08002f58 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f62:	4b3d      	ldr	r3, [pc, #244]	@ (8003058 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002f68:	4b3c      	ldr	r3, [pc, #240]	@ (800305c <prvAddCurrentTaskToDelayedList+0x104>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003060 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f95a 	bl	8002234 <uxListRemove>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <prvAddCurrentTaskToDelayedList+0x110>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	4a33      	ldr	r2, [pc, #204]	@ (8003068 <prvAddCurrentTaskToDelayedList+0x110>)
 8002f9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d124      	bne.n	8002ff0 <prvAddCurrentTaskToDelayedList+0x98>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fac:	4b2f      	ldr	r3, [pc, #188]	@ (800306c <prvAddCurrentTaskToDelayedList+0x114>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	4b27      	ldr	r3, [pc, #156]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	3204      	adds	r2, #4
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	1d1a      	adds	r2, r3, #4
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a23      	ldr	r2, [pc, #140]	@ (800306c <prvAddCurrentTaskToDelayedList+0x114>)
 8002fe0:	615a      	str	r2, [r3, #20]
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <prvAddCurrentTaskToDelayedList+0x114>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a20      	ldr	r2, [pc, #128]	@ (800306c <prvAddCurrentTaskToDelayedList+0x114>)
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002fee:	e02e      	b.n	800304e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	429a      	cmp	r2, r3
 8003006:	d20d      	bcs.n	8003024 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003008:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2104      	movs	r1, #4
 800300e:	4618      	mov	r0, r3
 8003010:	f003 f83e 	bl	8006090 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f7ff f8ce 	bl	80021be <vListInsert>
}
 8003022:	e014      	b.n	800304e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003024:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2104      	movs	r1, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f830 	bl	8006090 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003030:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	69b8      	ldr	r0, [r7, #24]
 800303a:	f7ff f8c0 	bl	80021be <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <prvAddCurrentTaskToDelayedList+0x118>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d202      	bcs.n	800304e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003048:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <prvAddCurrentTaskToDelayedList+0x118>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6013      	str	r3, [r2, #0]
}
 800304e:	bf00      	nop
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000160 	.word	0x20000160
 800305c:	20000114 	.word	0x20000114
 8003060:	20000118 	.word	0x20000118
 8003064:	20000084 	.word	0x20000084
 8003068:	20000164 	.word	0x20000164
 800306c:	20000148 	.word	0x20000148
 8003070:	2000017c 	.word	0x2000017c

08003074 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3b04      	subs	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800308c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3b04      	subs	r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b04      	subs	r3, #4
 80030a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030a4:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <pxPortInitialiseStack+0x64>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b14      	subs	r3, #20
 80030ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b04      	subs	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f06f 0202 	mvn.w	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b20      	subs	r3, #32
 80030c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	080030dd 	.word	0x080030dd

080030dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030e6:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <prvTaskExitError+0x58>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d00b      	beq.n	8003108 <prvTaskExitError+0x2c>
    __asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	60fb      	str	r3, [r7, #12]
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <prvTaskExitError+0x28>
    __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60bb      	str	r3, [r7, #8]
}
 800311a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800311c:	bf00      	nop
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0fc      	beq.n	800311e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000010 	.word	0x20000010
	...

08003140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <pxCurrentTCBConst2>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314a:	f380 8809 	msr	PSP, r0
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8811 	msr	BASEPRI, r0
 800315a:	4770      	bx	lr
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst2>:
 8003160:	20000084 	.word	0x20000084
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003168:	4808      	ldr	r0, [pc, #32]	@ (800318c <prvPortStartFirstTask+0x24>)
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	f380 8808 	msr	MSP, r0
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f380 8814 	msr	CONTROL, r0
 800317a:	b662      	cpsie	i
 800317c:	b661      	cpsie	f
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	df00      	svc	0
 8003188:	bf00      	nop
 800318a:	0000      	.short	0x0000
 800318c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop

08003194 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800319a:	4b69      	ldr	r3, [pc, #420]	@ (8003340 <xPortStartScheduler+0x1ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a69      	ldr	r2, [pc, #420]	@ (8003344 <xPortStartScheduler+0x1b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10b      	bne.n	80031bc <xPortStartScheduler+0x28>
    __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031bc:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <xPortStartScheduler+0x1ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a61      	ldr	r2, [pc, #388]	@ (8003348 <xPortStartScheduler+0x1b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10b      	bne.n	80031de <xPortStartScheduler+0x4a>
    __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	623b      	str	r3, [r7, #32]
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	e7fd      	b.n	80031da <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80031de:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <xPortStartScheduler+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	332c      	adds	r3, #44	@ 0x2c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <xPortStartScheduler+0x1bc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <xPortStartScheduler+0x74>
    __asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61fb      	str	r3, [r7, #28]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320a:	3338      	adds	r3, #56	@ 0x38
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a51      	ldr	r2, [pc, #324]	@ (8003354 <xPortStartScheduler+0x1c0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <xPortStartScheduler+0x98>
    __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61bb      	str	r3, [r7, #24]
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003230:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <xPortStartScheduler+0x1c4>)
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	22ff      	movs	r2, #255	@ 0xff
 8003240:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b41      	ldr	r3, [pc, #260]	@ (800335c <xPortStartScheduler+0x1c8>)
 8003256:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003258:	4b40      	ldr	r3, [pc, #256]	@ (800335c <xPortStartScheduler+0x1c8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <xPortStartScheduler+0xe4>
    __asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	617b      	str	r3, [r7, #20]
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003282:	2b00      	cmp	r3, #0
 8003284:	d013      	beq.n	80032ae <xPortStartScheduler+0x11a>
    __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	613b      	str	r3, [r7, #16]
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	e7fd      	b.n	800329a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d0f1      	beq.n	800329e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d103      	bne.n	80032c8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e004      	b.n	80032d2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032d0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032d2:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003360 <xPortStartScheduler+0x1cc>)
 80032e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <xPortStartScheduler+0x1d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <xPortStartScheduler+0x1d0>)
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003306:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <xPortStartScheduler+0x1d4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800330e:	f000 f96d 	bl	80035ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <xPortStartScheduler+0x1d8>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003318:	f000 f98c 	bl	8003634 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <xPortStartScheduler+0x1dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <xPortStartScheduler+0x1dc>)
 8003322:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003326:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003328:	f7ff ff1e 	bl	8003168 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800332c:	f7ff fcf6 	bl	8002d1c <vTaskSwitchContext>
    prvTaskExitError();
 8003330:	f7ff fed4 	bl	80030dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3730      	adds	r7, #48	@ 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	410fc271 	.word	0x410fc271
 8003348:	410fc270 	.word	0x410fc270
 800334c:	e000ed08 	.word	0xe000ed08
 8003350:	08003141 	.word	0x08003141
 8003354:	08003531 	.word	0x08003531
 8003358:	e000e400 	.word	0xe000e400
 800335c:	20000188 	.word	0x20000188
 8003360:	2000018c 	.word	0x2000018c
 8003364:	e000ed20 	.word	0xe000ed20
 8003368:	e000ed1c 	.word	0xe000ed1c
 800336c:	20000010 	.word	0x20000010
 8003370:	e000ef34 	.word	0xe000ef34

08003374 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800337a:	4b38      	ldr	r3, [pc, #224]	@ (800345c <vInitPrioGroupValue+0xe8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <vInitPrioGroupValue+0xec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10b      	bne.n	800339c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	613b      	str	r3, [r7, #16]
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800339c:	4b2f      	ldr	r3, [pc, #188]	@ (800345c <vInitPrioGroupValue+0xe8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <vInitPrioGroupValue+0xf0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10b      	bne.n	80033be <vInitPrioGroupValue+0x4a>
    __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60fb      	str	r3, [r7, #12]
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	e7fd      	b.n	80033ba <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <vInitPrioGroupValue+0xf4>)
 80033c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	22ff      	movs	r2, #255	@ 0xff
 80033ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b22      	ldr	r3, [pc, #136]	@ (800346c <vInitPrioGroupValue+0xf8>)
 80033e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033e6:	4b22      	ldr	r3, [pc, #136]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 80033e8:	2207      	movs	r2, #7
 80033ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ec:	e009      	b.n	8003402 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80033ee:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 80033f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b80      	cmp	r3, #128	@ 0x80
 800340c:	d0ef      	beq.n	80033ee <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800340e:	4b18      	ldr	r3, [pc, #96]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	d00b      	beq.n	8003432 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003432:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 800343a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800343c:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <vInitPrioGroupValue+0xfc>)
 8003446:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00
 8003460:	410fc271 	.word	0x410fc271
 8003464:	410fc270 	.word	0x410fc270
 8003468:	e000e400 	.word	0xe000e400
 800346c:	20000188 	.word	0x20000188
 8003470:	2000018c 	.word	0x2000018c

08003474 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
    __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	607b      	str	r3, [r7, #4]
}
 800348c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <vPortEnterCritical+0x5c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <vPortEnterCritical+0x5c>)
 8003496:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <vPortEnterCritical+0x5c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d110      	bne.n	80034c2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <vPortEnterCritical+0x60>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <vPortEnterCritical+0x4e>
    __asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	603b      	str	r3, [r7, #0]
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <vPortEnterCritical+0x4a>
    }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000010 	.word	0x20000010
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <vPortExitCritical+0x50>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <vPortExitCritical+0x26>
    __asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	607b      	str	r3, [r7, #4]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <vPortExitCritical+0x50>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <vPortExitCritical+0x50>)
 8003506:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <vPortExitCritical+0x50>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <vPortExitCritical+0x44>
 8003510:	2300      	movs	r3, #0
 8003512:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800351a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000010 	.word	0x20000010
 800352c:	00000000 	.word	0x00000000

08003530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003530:	f3ef 8009 	mrs	r0, PSP
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <pxCurrentTCBConst>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f01e 0f10 	tst.w	lr, #16
 8003540:	bf08      	it	eq
 8003542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	6010      	str	r0, [r2, #0]
 800354c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003554:	f380 8811 	msr	BASEPRI, r0
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f7ff fbdc 	bl	8002d1c <vTaskSwitchContext>
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f380 8811 	msr	BASEPRI, r0
 800356c:	bc09      	pop	{r0, r3}
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	6808      	ldr	r0, [r1, #0]
 8003572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003576:	f01e 0f10 	tst.w	lr, #16
 800357a:	bf08      	it	eq
 800357c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003580:	f380 8809 	msr	PSP, r0
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w

08003590 <pxCurrentTCBConst>:
 8003590:	20000084 	.word	0x20000084
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop

08003598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
    __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	607b      	str	r3, [r7, #4]
}
 80035b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80035b2:	f002 fb7d 	bl	8005cb0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035b6:	f7ff fa8f 	bl	8002ad8 <xTaskIncrementTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d006      	beq.n	80035ce <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80035c0:	f002 fbd4 	bl	8005d6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <SysTick_Handler+0x50>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e001      	b.n	80035d2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80035ce:	f002 fbb1 	bl	8005d34 <SEGGER_SYSVIEW_RecordExitISR>
 80035d2:	2300      	movs	r3, #0
 80035d4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f383 8811 	msr	BASEPRI, r3
}
 80035dc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <vPortSetupTimerInterrupt+0x34>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <vPortSetupTimerInterrupt+0x38>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <vPortSetupTimerInterrupt+0x3c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <vPortSetupTimerInterrupt+0x40>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	4a09      	ldr	r2, [pc, #36]	@ (8003630 <vPortSetupTimerInterrupt+0x44>)
 800360a:	3b01      	subs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <vPortSetupTimerInterrupt+0x34>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010
 8003624:	e000e018 	.word	0xe000e018
 8003628:	20000000 	.word	0x20000000
 800362c:	10624dd3 	.word	0x10624dd3
 8003630:	e000e014 	.word	0xe000e014

08003634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003644 <vPortEnableVFP+0x10>
 8003638:	6801      	ldr	r1, [r0, #0]
 800363a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800363e:	6001      	str	r1, [r0, #0]
 8003640:	4770      	bx	lr
 8003642:	0000      	.short	0x0000
 8003644:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop

0800364c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003652:	f3ef 8305 	mrs	r3, IPSR
 8003656:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d915      	bls.n	800368a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800365e:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <vPortValidateInterruptPriority+0x74>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003668:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <vPortValidateInterruptPriority+0x78>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	7afa      	ldrb	r2, [r7, #11]
 800366e:	429a      	cmp	r2, r3
 8003670:	d20b      	bcs.n	800368a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	607b      	str	r3, [r7, #4]
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800368a:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <vPortValidateInterruptPriority+0x7c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <vPortValidateInterruptPriority+0x80>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90b      	bls.n	80036b2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <vPortValidateInterruptPriority+0x62>
    }
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e3f0 	.word	0xe000e3f0
 80036c4:	20000188 	.word	0x20000188
 80036c8:	e000ed0c 	.word	0xe000ed0c
 80036cc:	2000018c 	.word	0x2000018c

080036d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	@ 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d022      	beq.n	800372c <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80036e6:	2308      	movs	r3, #8
 80036e8:	43db      	mvns	r3, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d81b      	bhi.n	8003728 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 80036f0:	2208      	movs	r2, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d014      	beq.n	800372c <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	f1c3 0308 	rsb	r3, r3, #8
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	43db      	mvns	r3, r3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d804      	bhi.n	8003722 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	4413      	add	r3, r2
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	e004      	b.n	800372c <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	e001      	b.n	800372c <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800372c:	f7ff f88c 	bl	8002848 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003730:	4b7c      	ldr	r3, [pc, #496]	@ (8003924 <pvPortMalloc+0x254>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003738:	f000 f97c 	bl	8003a34 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f2c0 80d7 	blt.w	80038f2 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80d3 	beq.w	80038f2 <pvPortMalloc+0x222>
 800374c:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <pvPortMalloc+0x258>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	f200 80cd 	bhi.w	80038f2 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003758:	4b74      	ldr	r3, [pc, #464]	@ (800392c <pvPortMalloc+0x25c>)
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800375c:	4b73      	ldr	r3, [pc, #460]	@ (800392c <pvPortMalloc+0x25c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003764:	4a72      	ldr	r2, [pc, #456]	@ (8003930 <pvPortMalloc+0x260>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d305      	bcc.n	8003776 <pvPortMalloc+0xa6>
 800376a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376c:	4a71      	ldr	r2, [pc, #452]	@ (8003934 <pvPortMalloc+0x264>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d801      	bhi.n	8003776 <pvPortMalloc+0xa6>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <pvPortMalloc+0xa8>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d129      	bne.n	80037d0 <pvPortMalloc+0x100>
    __asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	61fb      	str	r3, [r7, #28]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <pvPortMalloc+0x260>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d305      	bcc.n	80037b2 <pvPortMalloc+0xe2>
 80037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a8:	4a62      	ldr	r2, [pc, #392]	@ (8003934 <pvPortMalloc+0x264>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d801      	bhi.n	80037b2 <pvPortMalloc+0xe2>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <pvPortMalloc+0xe4>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <pvPortMalloc+0x100>
    __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61bb      	str	r3, [r7, #24]
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d903      	bls.n	80037e2 <pvPortMalloc+0x112>
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1d8      	bne.n	8003794 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037e2:	4b50      	ldr	r3, [pc, #320]	@ (8003924 <pvPortMalloc+0x254>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e8:	429a      	cmp	r2, r3
 80037ea:	f000 8082 	beq.w	80038f2 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2208      	movs	r2, #8
 80037f4:	4413      	add	r3, r2
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	4a4d      	ldr	r2, [pc, #308]	@ (8003930 <pvPortMalloc+0x260>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d305      	bcc.n	800380c <pvPortMalloc+0x13c>
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	4a4c      	ldr	r2, [pc, #304]	@ (8003934 <pvPortMalloc+0x264>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d801      	bhi.n	800380c <pvPortMalloc+0x13c>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <pvPortMalloc+0x13e>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <pvPortMalloc+0x15a>
    __asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d90b      	bls.n	8003854 <pvPortMalloc+0x184>
    __asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	613b      	str	r3, [r7, #16]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	2308      	movs	r3, #8
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	429a      	cmp	r2, r3
 8003862:	d924      	bls.n	80038ae <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <pvPortMalloc+0x1be>
    __asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60fb      	str	r3, [r7, #12]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800388e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800389a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <pvPortMalloc+0x258>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003928 <pvPortMalloc+0x258>)
 80038ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <pvPortMalloc+0x258>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <pvPortMalloc+0x268>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d203      	bcs.n	80038d0 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038c8:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <pvPortMalloc+0x258>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <pvPortMalloc+0x268>)
 80038ce:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 80038d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80038d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038e8:	4b14      	ldr	r3, [pc, #80]	@ (800393c <pvPortMalloc+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a13      	ldr	r2, [pc, #76]	@ (800393c <pvPortMalloc+0x26c>)
 80038f0:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 80038f2:	f7fe ffb7 	bl	8002864 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <pvPortMalloc+0x248>
    __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60bb      	str	r3, [r7, #8]
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <pvPortMalloc+0x244>
    return pvReturn;
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800391a:	4618      	mov	r0, r3
 800391c:	3738      	adds	r7, #56	@ 0x38
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20012d98 	.word	0x20012d98
 8003928:	20012d9c 	.word	0x20012d9c
 800392c:	20012d90 	.word	0x20012d90
 8003930:	20000190 	.word	0x20000190
 8003934:	20012d8f 	.word	0x20012d8f
 8003938:	20012da0 	.word	0x20012da0
 800393c:	20012da4 	.word	0x20012da4

08003940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d064      	beq.n	8003a1c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003952:	2308      	movs	r3, #8
 8003954:	425b      	negs	r3, r3
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4a30      	ldr	r2, [pc, #192]	@ (8003a24 <vPortFree+0xe4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d305      	bcc.n	8003974 <vPortFree+0x34>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a28 <vPortFree+0xe8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d801      	bhi.n	8003974 <vPortFree+0x34>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <vPortFree+0x36>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <vPortFree+0x52>
    __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	617b      	str	r3, [r7, #20]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <vPortFree+0x72>
    __asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	613b      	str	r3, [r7, #16]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <vPortFree+0x92>
    __asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60fb      	str	r3, [r7, #12]
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	e7fd      	b.n	80039ce <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0fdb      	lsrs	r3, r3, #31
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d118      	bne.n	8003a1c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80039f6:	f7fe ff27 	bl	8002848 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <vPortFree+0xec>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <vPortFree+0xec>)
 8003a06:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	f000 f86d 	bl	8003ae8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <vPortFree+0xf0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	4a06      	ldr	r2, [pc, #24]	@ (8003a30 <vPortFree+0xf0>)
 8003a16:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a18:	f7fe ff24 	bl	8002864 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a1c:	bf00      	nop
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000190 	.word	0x20000190
 8003a28:	20012d8f 	.word	0x20012d8f
 8003a2c:	20012d9c 	.word	0x20012d9c
 8003a30:	20012da8 	.word	0x20012da8

08003a34 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a3a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003a3e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a40:	4b24      	ldr	r3, [pc, #144]	@ (8003ad4 <prvHeapInit+0xa0>)
 8003a42:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3307      	adds	r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0307 	bic.w	r3, r3, #7
 8003a5a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <prvHeapInit+0xa0>)
 8003a64:	4413      	add	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad8 <prvHeapInit+0xa4>)
 8003a6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad8 <prvHeapInit+0xa4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4413      	add	r3, r2
 8003a7a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <prvHeapInit+0xa8>)
 8003a90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <prvHeapInit+0xa8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <prvHeapInit+0xa8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <prvHeapInit+0xa8>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <prvHeapInit+0xac>)
 8003abe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a07      	ldr	r2, [pc, #28]	@ (8003ae4 <prvHeapInit+0xb0>)
 8003ac6:	6013      	str	r3, [r2, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	20000190 	.word	0x20000190
 8003ad8:	20012d90 	.word	0x20012d90
 8003adc:	20012d98 	.word	0x20012d98
 8003ae0:	20012da0 	.word	0x20012da0
 8003ae4:	20012d9c 	.word	0x20012d9c

08003ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <prvInsertBlockIntoFreeList+0xe4>)
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e002      	b.n	8003afc <prvInsertBlockIntoFreeList+0x14>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d8f7      	bhi.n	8003af6 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <prvInsertBlockIntoFreeList+0xe4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd0 <prvInsertBlockIntoFreeList+0xe8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d305      	bcc.n	8003b22 <prvInsertBlockIntoFreeList+0x3a>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd4 <prvInsertBlockIntoFreeList+0xec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d801      	bhi.n	8003b22 <prvInsertBlockIntoFreeList+0x3a>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x3c>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60fb      	str	r3, [r7, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d108      	bne.n	8003b64 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	441a      	add	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d118      	bne.n	8003baa <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <prvInsertBlockIntoFreeList+0xf0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d00d      	beq.n	8003ba0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	441a      	add	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e008      	b.n	8003bb2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <prvInsertBlockIntoFreeList+0xf0>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e003      	b.n	8003bb2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d002      	beq.n	8003bc0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20012d90 	.word	0x20012d90
 8003bd0:	20000190 	.word	0x20000190
 8003bd4:	20012d8f 	.word	0x20012d8f
 8003bd8:	20012d98 	.word	0x20012d98

08003bdc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003be0:	4803      	ldr	r0, [pc, #12]	@ (8003bf0 <_cbSendSystemDesc+0x14>)
 8003be2:	f002 f80f 	bl	8005c04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003be6:	4803      	ldr	r0, [pc, #12]	@ (8003bf4 <_cbSendSystemDesc+0x18>)
 8003be8:	f002 f80c 	bl	8005c04 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08006578 	.word	0x08006578
 8003bf4:	080065ac 	.word	0x080065ac

08003bf8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <SEGGER_SYSVIEW_Conf+0x20>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <SEGGER_SYSVIEW_Conf+0x24>)
 8003c06:	4a06      	ldr	r2, [pc, #24]	@ (8003c20 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c08:	f001 fc80 	bl	800550c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c0c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003c10:	f001 fcc0 	bl	8005594 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	08003bdd 	.word	0x08003bdd
 8003c20:	08006648 	.word	0x08006648

08003c24 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e033      	b.n	8003c98 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c30:	491e      	ldr	r1, [pc, #120]	@ (8003cac <_cbSendTaskList+0x88>)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	491a      	ldr	r1, [pc, #104]	@ (8003cac <_cbSendTaskList+0x88>)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3304      	adds	r3, #4
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	4c16      	ldr	r4, [pc, #88]	@ (8003cac <_cbSendTaskList+0x88>)
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4423      	add	r3, r4
 8003c60:	3308      	adds	r3, #8
 8003c62:	681c      	ldr	r4, [r3, #0]
 8003c64:	4d11      	ldr	r5, [pc, #68]	@ (8003cac <_cbSendTaskList+0x88>)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	442b      	add	r3, r5
 8003c72:	330c      	adds	r3, #12
 8003c74:	681d      	ldr	r5, [r3, #0]
 8003c76:	4e0d      	ldr	r6, [pc, #52]	@ (8003cac <_cbSendTaskList+0x88>)
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4433      	add	r3, r6
 8003c84:	3310      	adds	r3, #16
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	f000 f8bd 	bl	8003e0c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3301      	adds	r3, #1
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <_cbSendTaskList+0x8c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3c6      	bcc.n	8003c30 <_cbSendTaskList+0xc>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cac:	20012dac 	.word	0x20012dac
 8003cb0:	20012e4c 	.word	0x20012e4c

08003cb4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cbc:	f7fe fef6 	bl	8002aac <xTaskGetTickCountFromISR>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	469a      	mov	sl, r3
 8003cc6:	4693      	mov	fp, r2
 8003cc8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	f04f 0a00 	mov.w	sl, #0
 8003cd8:	f04f 0b00 	mov.w	fp, #0
 8003cdc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003ce0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003ce4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003ce8:	4652      	mov	r2, sl
 8003cea:	465b      	mov	r3, fp
 8003cec:	1a14      	subs	r4, r2, r0
 8003cee:	eb63 0501 	sbc.w	r5, r3, r1
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	00ab      	lsls	r3, r5, #2
 8003cfc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003d00:	00a2      	lsls	r2, r4, #2
 8003d02:	4614      	mov	r4, r2
 8003d04:	461d      	mov	r5, r3
 8003d06:	eb14 0800 	adds.w	r8, r4, r0
 8003d0a:	eb45 0901 	adc.w	r9, r5, r1
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d22:	4690      	mov	r8, r2
 8003d24:	4699      	mov	r9, r3
 8003d26:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d3c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	492b      	ldr	r1, [pc, #172]	@ (8003dfc <SYSVIEW_AddTask+0xc0>)
 8003d4e:	68b8      	ldr	r0, [r7, #8]
 8003d50:	f002 fb82 	bl	8006458 <memcmp>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04b      	beq.n	8003df2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d5a:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b07      	cmp	r3, #7
 8003d60:	d903      	bls.n	8003d6a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d62:	4828      	ldr	r0, [pc, #160]	@ (8003e04 <SYSVIEW_AddTask+0xc8>)
 8003d64:	f002 faee 	bl	8006344 <SEGGER_SYSVIEW_Warn>
    return;
 8003d68:	e044      	b.n	8003df4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d6a:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4926      	ldr	r1, [pc, #152]	@ (8003e08 <SYSVIEW_AddTask+0xcc>)
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4921      	ldr	r1, [pc, #132]	@ (8003e08 <SYSVIEW_AddTask+0xcc>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3304      	adds	r3, #4
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	491b      	ldr	r1, [pc, #108]	@ (8003e08 <SYSVIEW_AddTask+0xcc>)
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3308      	adds	r3, #8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003daa:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4916      	ldr	r1, [pc, #88]	@ (8003e08 <SYSVIEW_AddTask+0xcc>)
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	330c      	adds	r3, #12
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4910      	ldr	r1, [pc, #64]	@ (8003e08 <SYSVIEW_AddTask+0xcc>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a08      	ldr	r2, [pc, #32]	@ (8003e00 <SYSVIEW_AddTask+0xc4>)
 8003dde:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f80e 	bl	8003e0c <SYSVIEW_SendTaskInfo>
 8003df0:	e000      	b.n	8003df4 <SYSVIEW_AddTask+0xb8>
    return;
 8003df2:	bf00      	nop

}
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	080065bc 	.word	0x080065bc
 8003e00:	20012e4c 	.word	0x20012e4c
 8003e04:	080065c4 	.word	0x080065c4
 8003e08:	20012dac 	.word	0x20012dac

08003e0c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	@ 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	2218      	movs	r2, #24
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 fb28 	bl	8006478 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fde7 	bl	8005a14 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	@ 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <__NVIC_EnableIRQ>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	db0b      	blt.n	8003e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	4907      	ldr	r1, [pc, #28]	@ (8003e88 <__NVIC_EnableIRQ+0x38>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2001      	movs	r0, #1
 8003e72:	fa00 f202 	lsl.w	r2, r0, r2
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000e100 	.word	0xe000e100

08003e8c <__NVIC_SetPriority>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	db0a      	blt.n	8003eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	490c      	ldr	r1, [pc, #48]	@ (8003ed8 <__NVIC_SetPriority+0x4c>)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	0112      	lsls	r2, r2, #4
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003eb4:	e00a      	b.n	8003ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4908      	ldr	r1, [pc, #32]	@ (8003edc <__NVIC_SetPriority+0x50>)
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	440b      	add	r3, r1
 8003eca:	761a      	strb	r2, [r3, #24]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000e100 	.word	0xe000e100
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003ee6:	f002 fa89 	bl	80063fc <SEGGER_SYSVIEW_IsStarted>
 8003eea:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003ef2:	f001 fc13 	bl	800571c <SEGGER_SYSVIEW_Start>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <_cbOnUARTRx+0x3c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d806      	bhi.n	8003f20 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <_cbOnUARTRx+0x3c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <_cbOnUARTRx+0x3c>)
 8003f1c:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003f1e:	e009      	b.n	8003f34 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003f20:	f7ff ffde 	bl	8003ee0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <_cbOnUARTRx+0x3c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f000 fb9c 	bl	800466c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003f34:	bf00      	nop
}
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000014 	.word	0x20000014

08003f40 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <_cbOnUARTTx+0x5c>)
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d80f      	bhi.n	8003f70 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003f50:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <_cbOnUARTTx+0x5c>)
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <_cbOnUARTTx+0x60>)
 8003f58:	5c9a      	ldrb	r2, [r3, r2]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <_cbOnUARTTx+0x5c>)
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <_cbOnUARTTx+0x5c>)
 8003f68:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003f6e:	e00f      	b.n	8003f90 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <_cbOnUARTTx+0x5c>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fa1b 	bl	80043b4 <SEGGER_RTT_ReadUpBufferNoLock>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da02      	bge.n	8003f8e <_cbOnUARTTx+0x4e>
    r = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e000      	b.n	8003f90 <_cbOnUARTTx+0x50>
  }
Done:
 8003f8e:	bf00      	nop
  return r;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000014 	.word	0x20000014
 8003fa0:	08006650 	.word	0x08006650

08003fa4 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003fac:	4a04      	ldr	r2, [pc, #16]	@ (8003fc0 <SEGGER_UART_init+0x1c>)
 8003fae:	4905      	ldr	r1, [pc, #20]	@ (8003fc4 <SEGGER_UART_init+0x20>)
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f863 	bl	800407c <HIF_UART_Init>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08003f01 	.word	0x08003f01
 8003fc4:	08003f41 	.word	0x08003f41

08003fc8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <USART2_IRQHandler+0x80>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <USART2_IRQHandler+0x84>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 030b 	and.w	r3, r3, #11
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003ff0:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <USART2_IRQHandler+0x88>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ff8:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <USART2_IRQHandler+0x88>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	79fa      	ldrb	r2, [r7, #7]
 8003ffe:	4610      	mov	r0, r2
 8004000:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800400c:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <USART2_IRQHandler+0x8c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004014:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <USART2_IRQHandler+0x8c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1dfa      	adds	r2, r7, #7
 800401a:	4610      	mov	r0, r2
 800401c:	4798      	blx	r3
 800401e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004026:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <USART2_IRQHandler+0x90>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a0b      	ldr	r2, [pc, #44]	@ (8004058 <USART2_IRQHandler+0x90>)
 800402c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e006      	b.n	8004042 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004034:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <USART2_IRQHandler+0x80>)
 8004036:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004038:	79fa      	ldrb	r2, [r7, #7]
 800403a:	4b04      	ldr	r3, [pc, #16]	@ (800404c <USART2_IRQHandler+0x84>)
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e000      	b.n	8004042 <USART2_IRQHandler+0x7a>
      return;
 8004040:	bf00      	nop
    }
  }
}
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40004400 	.word	0x40004400
 800404c:	40004404 	.word	0x40004404
 8004050:	20012e50 	.word	0x20012e50
 8004054:	20012e54 	.word	0x20012e54
 8004058:	4000440c 	.word	0x4000440c

0800405c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	4000440c 	.word	0x4000440c

0800407c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <HIF_UART_Init+0xc8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <HIF_UART_Init+0xc8>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004092:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <HIF_UART_Init+0xcc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2b      	ldr	r2, [pc, #172]	@ (8004148 <HIF_UART_Init+0xcc>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80040a0:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HIF_UART_Init+0xd0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ac:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80040b4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80040b6:	4a25      	ldr	r2, [pc, #148]	@ (800414c <HIF_UART_Init+0xd0>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HIF_UART_Init+0xd4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80040d0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80040d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <HIF_UART_Init+0xd4>)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80040d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HIF_UART_Init+0xd8>)
 80040da:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80040de:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80040e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <HIF_UART_Init+0xdc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80040e6:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HIF_UART_Init+0xe0>)
 80040e8:	2280      	movs	r2, #128	@ 0x80
 80040ea:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80040f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004160 <HIF_UART_Init+0xe4>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410a:	d302      	bcc.n	8004112 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800410c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004110:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	4a11      	ldr	r2, [pc, #68]	@ (8004164 <HIF_UART_Init+0xe8>)
 800411e:	b29b      	uxth	r3, r3
 8004120:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004122:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <HIF_UART_Init+0xec>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004128:	4a10      	ldr	r2, [pc, #64]	@ (800416c <HIF_UART_Init+0xf0>)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800412e:	2106      	movs	r1, #6
 8004130:	2026      	movs	r0, #38	@ 0x26
 8004132:	f7ff feab 	bl	8003e8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004136:	2026      	movs	r0, #38	@ 0x26
 8004138:	f7ff fe8a 	bl	8003e50 <__NVIC_EnableIRQ>
}
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023840 	.word	0x40023840
 8004148:	40023830 	.word	0x40023830
 800414c:	40020020 	.word	0x40020020
 8004150:	40020000 	.word	0x40020000
 8004154:	4000440c 	.word	0x4000440c
 8004158:	40004410 	.word	0x40004410
 800415c:	40004414 	.word	0x40004414
 8004160:	0501bd00 	.word	0x0501bd00
 8004164:	40004408 	.word	0x40004408
 8004168:	20012e50 	.word	0x20012e50
 800416c:	20012e54 	.word	0x20012e54

08004170 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <_DoInit+0xa0>)
 8004178:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800417a:	22a8      	movs	r2, #168	@ 0xa8
 800417c:	2100      	movs	r1, #0
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	f002 f97a 	bl	8006478 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2203      	movs	r2, #3
 8004188:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2203      	movs	r2, #3
 800418e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <_DoInit+0xa4>)
 8004194:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <_DoInit+0xa8>)
 800419a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041a2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	4a16      	ldr	r2, [pc, #88]	@ (8004214 <_DoInit+0xa4>)
 80041ba:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	@ (800421c <_DoInit+0xac>)
 80041c0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2210      	movs	r2, #16
 80041c6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80041da:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	e00c      	b.n	80041fe <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1c3 030f 	rsb	r3, r3, #15
 80041ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004220 <_DoInit+0xb0>)
 80041ec:	5cd1      	ldrb	r1, [r2, r3]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	460a      	mov	r2, r1
 80041f6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0f      	cmp	r3, #15
 8004202:	d9ef      	bls.n	80041e4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004204:	f3bf 8f5f 	dmb	sy
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20012e58 	.word	0x20012e58
 8004214:	08006614 	.word	0x08006614
 8004218:	20012f00 	.word	0x20012f00
 800421c:	20013300 	.word	0x20013300
 8004220:	08006654 	.word	0x08006654

08004224 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004230:	2300      	movs	r3, #0
 8004232:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	429a      	cmp	r2, r3
 8004246:	d905      	bls.n	8004254 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
 8004252:	e007      	b.n	8004264 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1acb      	subs	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	3b01      	subs	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426e:	4293      	cmp	r3, r2
 8004270:	bf28      	it	cs
 8004272:	4613      	movcs	r3, r2
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4293      	cmp	r3, r2
 800427c:	bf28      	it	cs
 800427e:	4613      	movcs	r3, r2
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	6978      	ldr	r0, [r7, #20]
 8004292:	f002 f91d 	bl	80064d0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	4413      	add	r3, r2
 800429c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	4413      	add	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	4413      	add	r3, r2
 80042b4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d101      	bne.n	80042c4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042c4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1b2      	bne.n	800423a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80042d4:	6a3b      	ldr	r3, [r7, #32]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3728      	adds	r7, #40	@ 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80042de:	b580      	push	{r7, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d911      	bls.n	8004326 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	6938      	ldr	r0, [r7, #16]
 8004312:	f002 f8dd 	bl	80064d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004316:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004324:	e01f      	b.n	8004366 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	6938      	ldr	r0, [r7, #16]
 800433a:	f002 f8c9 	bl	80064d0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4619      	mov	r1, r3
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f002 f8ba 	bl	80064d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800435c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	60da      	str	r2, [r3, #12]
}
 8004366:	bf00      	nop
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	429a      	cmp	r2, r3
 8004388:	d808      	bhi.n	800439c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad2      	subs	r2, r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e004      	b.n	80043a6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80043a6:	697b      	ldr	r3, [r7, #20]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	@ 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80043c0:	4b3e      	ldr	r3, [pc, #248]	@ (80044bc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b53      	cmp	r3, #83	@ 0x53
 80043cc:	d001      	beq.n	80043d2 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80043ce:	f7ff fecf 	bl	8004170 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4a37      	ldr	r2, [pc, #220]	@ (80044bc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d92b      	bls.n	8004458 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4293      	cmp	r3, r2
 8004410:	bf28      	it	cs
 8004412:	4613      	movcs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	4413      	add	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004426:	f002 f853 	bl	80064d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800442a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4413      	add	r3, r2
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004450:	429a      	cmp	r2, r3
 8004452:	d101      	bne.n	8004458 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004454:	2300      	movs	r3, #0
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4293      	cmp	r3, r2
 8004466:	bf28      	it	cs
 8004468:	4613      	movcs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d019      	beq.n	80044a6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	4413      	add	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6939      	ldr	r1, [r7, #16]
 8004480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004482:	f002 f825 	bl	80064d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800448e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800449e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3730      	adds	r7, #48	@ 0x30
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20012e58 	.word	0x20012e58

080044c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	@ 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80044cc:	4b3e      	ldr	r3, [pc, #248]	@ (80045c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b53      	cmp	r3, #83	@ 0x53
 80044d8:	d001      	beq.n	80044de <SEGGER_RTT_ReadNoLock+0x1e>
 80044da:	f7ff fe49 	bl	8004170 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4413      	add	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3360      	adds	r3, #96	@ 0x60
 80044ea:	4a37      	ldr	r2, [pc, #220]	@ (80045c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80044ec:	4413      	add	r3, r2
 80044ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004500:	2300      	movs	r3, #0
 8004502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	429a      	cmp	r2, r3
 800450a:	d92b      	bls.n	8004564 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4293      	cmp	r3, r2
 800451c:	bf28      	it	cs
 800451e:	4613      	movcs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	4413      	add	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004532:	f001 ffcd 	bl	80064d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4413      	add	r3, r2
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800454e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800455c:	429a      	cmp	r2, r3
 800455e:	d101      	bne.n	8004564 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004560:	2300      	movs	r3, #0
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4293      	cmp	r3, r2
 8004572:	bf28      	it	cs
 8004574:	4613      	movcs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d019      	beq.n	80045b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	4413      	add	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	6939      	ldr	r1, [r7, #16]
 800458c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800458e:	f001 ff9f 	bl	80064d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3730      	adds	r7, #48	@ 0x30
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20012e58 	.word	0x20012e58

080045cc <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	3360      	adds	r3, #96	@ 0x60
 80045e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004668 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80045ea:	4413      	add	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d029      	beq.n	800464a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d82e      	bhi.n	8004658 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d013      	beq.n	800462a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004602:	e029      	b.n	8004658 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004604:	6978      	ldr	r0, [r7, #20]
 8004606:	f7ff feb2 	bl	800436e <_GetAvailWriteSpace>
 800460a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d202      	bcs.n	800461a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004618:	e021      	b.n	800465e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	6978      	ldr	r0, [r7, #20]
 8004624:	f7ff fe5b 	bl	80042de <_WriteNoCheck>
    break;
 8004628:	e019      	b.n	800465e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7ff fe9f 	bl	800436e <_GetAvailWriteSpace>
 8004630:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4293      	cmp	r3, r2
 8004638:	bf28      	it	cs
 800463a:	4613      	movcs	r3, r2
 800463c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	69b9      	ldr	r1, [r7, #24]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff fe4b 	bl	80042de <_WriteNoCheck>
    break;
 8004648:	e009      	b.n	800465e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f7ff fde8 	bl	8004224 <_WriteBlocking>
 8004654:	61f8      	str	r0, [r7, #28]
    break;
 8004656:	e002      	b.n	800465e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
    break;
 800465c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800465e:	69fb      	ldr	r3, [r7, #28]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20012e58 	.word	0x20012e58

0800466c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004678:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b53      	cmp	r3, #83	@ 0x53
 8004684:	d001      	beq.n	800468a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004686:	f7ff fd73 	bl	8004170 <_DoInit>
  SEGGER_RTT_LOCK();
 800468a:	f3ef 8311 	mrs	r3, BASEPRI
 800468e:	f04f 0120 	mov.w	r1, #32
 8004692:	f381 8811 	msr	BASEPRI, r1
 8004696:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff95 	bl	80045cc <SEGGER_RTT_WriteDownBufferNoLock>
 80046a2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20012e58 	.word	0x20012e58

080046b8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80046c6:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b53      	cmp	r3, #83	@ 0x53
 80046d2:	d001      	beq.n	80046d8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80046d4:	f7ff fd4c 	bl	8004170 <_DoInit>
  SEGGER_RTT_LOCK();
 80046d8:	f3ef 8311 	mrs	r3, BASEPRI
 80046dc:	f04f 0120 	mov.w	r1, #32
 80046e0:	f381 8811 	msr	BASEPRI, r1
 80046e4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80046e6:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80046e8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	3304      	adds	r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	dbeb      	blt.n	80046ee <SEGGER_RTT_AllocUpBuffer+0x36>
 8004716:	e000      	b.n	800471a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004718:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	429a      	cmp	r2, r3
 8004722:	da3f      	bge.n	80047a4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004724:	6939      	ldr	r1, [r7, #16]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	440b      	add	r3, r1
 8004748:	3304      	adds	r3, #4
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	440b      	add	r3, r1
 800475c:	3320      	adds	r3, #32
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004762:	6939      	ldr	r1, [r7, #16]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	3328      	adds	r3, #40	@ 0x28
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	3324      	adds	r3, #36	@ 0x24
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	440b      	add	r3, r1
 8004798:	332c      	adds	r3, #44	@ 0x2c
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800479e:	f3bf 8f5f 	dmb	sy
 80047a2:	e002      	b.n	80047aa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80047b0:	69fb      	ldr	r3, [r7, #28]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20012e58 	.word	0x20012e58

080047c0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	@ 0x28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b53      	cmp	r3, #83	@ 0x53
 80047da:	d001      	beq.n	80047e0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80047dc:	f7ff fcc8 	bl	8004170 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80047e2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d82c      	bhi.n	8004844 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80047ea:	f3ef 8311 	mrs	r3, BASEPRI
 80047ee:	f04f 0120 	mov.w	r1, #32
 80047f2:	f381 8811 	msr	BASEPRI, r1
 80047f6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	3360      	adds	r3, #96	@ 0x60
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2200      	movs	r2, #0
 800482c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004832:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004834:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
 8004842:	e002      	b.n	800484a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	@ 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20012e58 	.word	0x20012e58

08004858 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	60fa      	str	r2, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e022      	b.n	80048bc <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	60fa      	str	r2, [r7, #12]
 8004880:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b80      	cmp	r3, #128	@ 0x80
 8004886:	d90a      	bls.n	800489e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 800488c:	e007      	b.n	800489e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	1c53      	adds	r3, r2, #1
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	60f9      	str	r1, [r7, #12]
 800489a:	7812      	ldrb	r2, [r2, #0]
 800489c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <_EncodeStr+0x58>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ee      	bne.n	800488e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3307      	adds	r3, #7
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048ea:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <_HandleIncomingPacket+0xd8>)
 80048ec:	7e1b      	ldrb	r3, [r3, #24]
 80048ee:	4618      	mov	r0, r3
 80048f0:	1cfb      	adds	r3, r7, #3
 80048f2:	2201      	movs	r2, #1
 80048f4:	4619      	mov	r1, r3
 80048f6:	f7ff fde3 	bl	80044c0 <SEGGER_RTT_ReadNoLock>
 80048fa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d057      	beq.n	80049b2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d031      	beq.n	800496c <_HandleIncomingPacket+0x88>
 8004908:	2b80      	cmp	r3, #128	@ 0x80
 800490a:	dc40      	bgt.n	800498e <_HandleIncomingPacket+0xaa>
 800490c:	2b07      	cmp	r3, #7
 800490e:	dc15      	bgt.n	800493c <_HandleIncomingPacket+0x58>
 8004910:	2b00      	cmp	r3, #0
 8004912:	dd3c      	ble.n	800498e <_HandleIncomingPacket+0xaa>
 8004914:	3b01      	subs	r3, #1
 8004916:	2b06      	cmp	r3, #6
 8004918:	d839      	bhi.n	800498e <_HandleIncomingPacket+0xaa>
 800491a:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <_HandleIncomingPacket+0x3c>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004943 	.word	0x08004943
 8004924:	08004949 	.word	0x08004949
 8004928:	0800494f 	.word	0x0800494f
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495b 	.word	0x0800495b
 8004934:	08004961 	.word	0x08004961
 8004938:	08004967 	.word	0x08004967
 800493c:	2b7f      	cmp	r3, #127	@ 0x7f
 800493e:	d033      	beq.n	80049a8 <_HandleIncomingPacket+0xc4>
 8004940:	e025      	b.n	800498e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004942:	f000 feeb 	bl	800571c <SEGGER_SYSVIEW_Start>
      break;
 8004946:	e034      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004948:	f000 ffa4 	bl	8005894 <SEGGER_SYSVIEW_Stop>
      break;
 800494c:	e031      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800494e:	f001 f97d 	bl	8005c4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004952:	e02e      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004954:	f001 f942 	bl	8005bdc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004958:	e02b      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800495a:	f000 ffc1 	bl	80058e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800495e:	e028      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004960:	f001 fc9e 	bl	80062a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004964:	e025      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004966:	f001 fc7d 	bl	8006264 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800496a:	e022      	b.n	80049b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800496c:	4b13      	ldr	r3, [pc, #76]	@ (80049bc <_HandleIncomingPacket+0xd8>)
 800496e:	7e1b      	ldrb	r3, [r3, #24]
 8004970:	4618      	mov	r0, r3
 8004972:	1cfb      	adds	r3, r7, #3
 8004974:	2201      	movs	r2, #1
 8004976:	4619      	mov	r1, r3
 8004978:	f7ff fda2 	bl	80044c0 <SEGGER_RTT_ReadNoLock>
 800497c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fbe2 	bl	8006150 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800498c:	e00e      	b.n	80049ac <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	b25b      	sxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	da0c      	bge.n	80049b0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004996:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <_HandleIncomingPacket+0xd8>)
 8004998:	7e1b      	ldrb	r3, [r3, #24]
 800499a:	4618      	mov	r0, r3
 800499c:	1cfb      	adds	r3, r7, #3
 800499e:	2201      	movs	r2, #1
 80049a0:	4619      	mov	r1, r3
 80049a2:	f7ff fd8d 	bl	80044c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80049a6:	e003      	b.n	80049b0 <_HandleIncomingPacket+0xcc>
      break;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <_HandleIncomingPacket+0xce>
      break;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <_HandleIncomingPacket+0xce>
      break;
 80049b0:	bf00      	nop
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20013b18 	.word	0x20013b18

080049c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	@ 0x30
 80049c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80049c6:	2301      	movs	r3, #1
 80049c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d4:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049da:	e00b      	b.n	80049f4 <_TrySendOverflowPacket+0x34>
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	09db      	lsrs	r3, r3, #7
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80049f8:	d8f0      	bhi.n	80049dc <_TrySendOverflowPacket+0x1c>
 80049fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a08:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a0a:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <_TrySendOverflowPacket+0xe4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004a10:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e00b      	b.n	8004a3c <_TrySendOverflowPacket+0x7c>
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a40:	d8f0      	bhi.n	8004a24 <_TrySendOverflowPacket+0x64>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a48:	6a3a      	ldr	r2, [r7, #32]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	4618      	mov	r0, r3
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fb fbb4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004a6c:	f7ff faf6 	bl	800405c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a76:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e004      	b.n	8004a94 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a03      	ldr	r2, [pc, #12]	@ (8004aa0 <_TrySendOverflowPacket+0xe0>)
 8004a92:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a94:	693b      	ldr	r3, [r7, #16]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	@ 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20013b18 	.word	0x20013b18
 8004aa4:	e0001004 	.word	0xe0001004

08004aa8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004ab4:	4b96      	ldr	r3, [pc, #600]	@ (8004d10 <_SendPacket+0x268>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d010      	beq.n	8004ade <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004abc:	4b94      	ldr	r3, [pc, #592]	@ (8004d10 <_SendPacket+0x268>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8130 	beq.w	8004d26 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ac6:	4b92      	ldr	r3, [pc, #584]	@ (8004d10 <_SendPacket+0x268>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d109      	bne.n	8004ae2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ace:	f7ff ff77 	bl	80049c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8004d10 <_SendPacket+0x268>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f040 8127 	bne.w	8004d2a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004adc:	e001      	b.n	8004ae2 <_SendPacket+0x3a>
    goto Send;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <_SendPacket+0x3c>
Send:
 8004ae2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b1f      	cmp	r3, #31
 8004ae8:	d809      	bhi.n	8004afe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004aea:	4b89      	ldr	r3, [pc, #548]	@ (8004d10 <_SendPacket+0x268>)
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f040 8118 	bne.w	8004d2e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b17      	cmp	r3, #23
 8004b02:	d807      	bhi.n	8004b14 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e0c4      	b.n	8004c9e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b20:	d912      	bls.n	8004b48 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	09da      	lsrs	r2, r3, #7
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e006      	b.n	8004b56 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b7e      	cmp	r3, #126	@ 0x7e
 8004b5a:	d807      	bhi.n	8004b6c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e098      	b.n	8004c9e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b72:	d212      	bcs.n	8004b9a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	09da      	lsrs	r2, r3, #7
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	60fa      	str	r2, [r7, #12]
 8004b8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e081      	b.n	8004c9e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba0:	d21d      	bcs.n	8004bde <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0b9a      	lsrs	r2, r3, #14
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	60fa      	str	r2, [r7, #12]
 8004bbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	60fa      	str	r2, [r7, #12]
 8004bd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e05f      	b.n	8004c9e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be4:	d228      	bcs.n	8004c38 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0d5a      	lsrs	r2, r3, #21
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0b9b      	lsrs	r3, r3, #14
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	60fa      	str	r2, [r7, #12]
 8004c02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	09db      	lsrs	r3, r3, #7
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	3a01      	subs	r2, #1
 8004c16:	60fa      	str	r2, [r7, #12]
 8004c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e032      	b.n	8004c9e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0f1a      	lsrs	r2, r3, #28
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0d5b      	lsrs	r3, r3, #21
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	3a01      	subs	r2, #1
 8004c52:	60fa      	str	r2, [r7, #12]
 8004c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0b9b      	lsrs	r3, r3, #14
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	3a01      	subs	r2, #1
 8004c68:	60fa      	str	r2, [r7, #12]
 8004c6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	09db      	lsrs	r3, r3, #7
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	60fa      	str	r2, [r7, #12]
 8004c80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	3a01      	subs	r2, #1
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d14 <_SendPacket+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <_SendPacket+0x268>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	e00b      	b.n	8004cd0 <_SendPacket+0x228>
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004cc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <_SendPacket+0x210>
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <_SendPacket+0x268>)
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	4618      	mov	r0, r3
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68f9      	ldr	r1, [r7, #12]
 8004cf6:	f7fb fa6b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cfa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004cfc:	f7ff f9ae 	bl	800405c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d06:	4a02      	ldr	r2, [pc, #8]	@ (8004d10 <_SendPacket+0x268>)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	60d3      	str	r3, [r2, #12]
 8004d0c:	e010      	b.n	8004d30 <_SendPacket+0x288>
 8004d0e:	bf00      	nop
 8004d10:	20013b18 	.word	0x20013b18
 8004d14:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e004      	b.n	8004d30 <_SendPacket+0x288>
    goto SendDone;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <_SendPacket+0x288>
      goto SendDone;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <_SendPacket+0x288>
      goto SendDone;
 8004d2e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d32:	7e1b      	ldrb	r3, [r3, #24]
 8004d34:	4619      	mov	r1, r3
 8004d36:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <_SendPacket+0x2dc>)
 8004d38:	460b      	mov	r3, r1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	440b      	add	r3, r1
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	336c      	adds	r3, #108	@ 0x6c
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d48:	7e1b      	ldrb	r3, [r3, #24]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	490d      	ldr	r1, [pc, #52]	@ (8004d84 <_SendPacket+0x2dc>)
 8004d4e:	4603      	mov	r3, r0
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4403      	add	r3, r0
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	440b      	add	r3, r1
 8004d58:	3370      	adds	r3, #112	@ 0x70
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d00b      	beq.n	8004d78 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d62:	789b      	ldrb	r3, [r3, #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d6e:	f7ff fdb9 	bl	80048e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d72:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <_SendPacket+0x2d8>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d78:	bf00      	nop
 8004d7a:	3728      	adds	r7, #40	@ 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20013b18 	.word	0x20013b18
 8004d84:	20012e58 	.word	0x20012e58

08004d88 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	2b80      	cmp	r3, #128	@ 0x80
 8004da0:	d80a      	bhi.n	8004db8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	1c59      	adds	r1, r3, #1
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6051      	str	r1, [r2, #4]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b80      	cmp	r3, #128	@ 0x80
 8004dbe:	d15a      	bne.n	8004e76 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	623b      	str	r3, [r7, #32]
 8004de0:	e00b      	b.n	8004dfa <_StoreChar+0x72>
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	09db      	lsrs	r3, r3, #7
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dfe:	d8f0      	bhi.n	8004de2 <_StoreChar+0x5a>
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e00b      	b.n	8004e32 <_StoreChar+0xaa>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	61f9      	str	r1, [r7, #28]
 8004e24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	09db      	lsrs	r3, r3, #7
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e36:	d8f0      	bhi.n	8004e1a <_StoreChar+0x92>
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	61fa      	str	r2, [r7, #28]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	221a      	movs	r2, #26
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fe29 	bl	8004aa8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fd35 	bl	80048ca <_PreparePacket>
 8004e60:	4602      	mov	r2, r0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
  }
}
 8004e76:	bf00      	nop
 8004e78:	3728      	adds	r7, #40	@ 0x28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004e92:	2301      	movs	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e9a:	e007      	b.n	8004eac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	623b      	str	r3, [r7, #32]
    Width++;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d2f3      	bcs.n	8004e9c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d901      	bls.n	8004ec0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d000      	beq.n	8004ecc <_PrintUnsigned+0x4c>
 8004eca:	e01f      	b.n	8004f0c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d01c      	beq.n	8004f0c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <_PrintUnsigned+0x68>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <_PrintUnsigned+0x68>
        c = '0';
 8004ee2:	2330      	movs	r3, #48	@ 0x30
 8004ee4:	76fb      	strb	r3, [r7, #27]
 8004ee6:	e001      	b.n	8004eec <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004ee8:	2320      	movs	r3, #32
 8004eea:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004eec:	e007      	b.n	8004efe <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004ef4:	7efb      	ldrb	r3, [r7, #27]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff ff45 	bl	8004d88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <_PrintUnsigned+0x8c>
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3f0      	bcc.n	8004eee <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d903      	bls.n	8004f1a <_PrintUnsigned+0x9a>
      NumDigits--;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	e009      	b.n	8004f2e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d200      	bcs.n	8004f2e <_PrintUnsigned+0xae>
        break;
 8004f2c:	e005      	b.n	8004f3a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004f38:	e7e8      	b.n	8004f0c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004f52:	4a15      	ldr	r2, [pc, #84]	@ (8004fa8 <_PrintUnsigned+0x128>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff ff13 	bl	8004d88 <_StoreChar>
    Digit /= Base;
 8004f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e3      	bne.n	8004f3a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00e      	beq.n	8004fa0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f82:	e006      	b.n	8004f92 <_PrintUnsigned+0x112>
        FieldWidth--;
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	3b01      	subs	r3, #1
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8004f8a:	2120      	movs	r1, #32
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff fefb 	bl	8004d88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <_PrintUnsigned+0x120>
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3f1      	bcc.n	8004f84 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08006674 	.word	0x08006674

08004fac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bfb8      	it	lt
 8004fc0:	425b      	neglt	r3, r3
 8004fc2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004fc8:	e007      	b.n	8004fda <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fd2:	613b      	str	r3, [r7, #16]
    Width++;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	daf3      	bge.n	8004fca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d901      	bls.n	8004fee <_PrintInt+0x42>
    Width = NumDigits;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <_PrintInt+0x5e>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	db04      	blt.n	8005004 <_PrintInt+0x58>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <_PrintInt+0x5e>
    FieldWidth--;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	3b01      	subs	r3, #1
 8005008:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <_PrintInt+0x6e>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_PrintInt+0x9c>
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d111      	bne.n	8005048 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800502a:	e006      	b.n	800503a <_PrintInt+0x8e>
        FieldWidth--;
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	3b01      	subs	r3, #1
 8005030:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005032:	2120      	movs	r1, #32
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff fea7 	bl	8004d88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <_PrintInt+0x9c>
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	429a      	cmp	r2, r3
 8005046:	d3f1      	bcc.n	800502c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	da07      	bge.n	800505e <_PrintInt+0xb2>
    v = -v;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	425b      	negs	r3, r3
 8005052:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005054:	212d      	movs	r1, #45	@ 0x2d
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fe96 	bl	8004d88 <_StoreChar>
 800505c:	e008      	b.n	8005070 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005068:	212b      	movs	r1, #43	@ 0x2b
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff fe8c 	bl	8004d88 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d019      	beq.n	80050ae <_PrintInt+0x102>
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d114      	bne.n	80050ae <_PrintInt+0x102>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d111      	bne.n	80050ae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005090:	e006      	b.n	80050a0 <_PrintInt+0xf4>
        FieldWidth--;
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	3b01      	subs	r3, #1
 8005096:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005098:	2130      	movs	r1, #48	@ 0x30
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fe74 	bl	8004d88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <_PrintInt+0x102>
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3f1      	bcc.n	8005092 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fedf 	bl	8004e80 <_PrintUnsigned>
}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b098      	sub	sp, #96	@ 0x60
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050d8:	f3ef 8311 	mrs	r3, BASEPRI
 80050dc:	f04f 0120 	mov.w	r1, #32
 80050e0:	f381 8811 	msr	BASEPRI, r1
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e6:	48b7      	ldr	r0, [pc, #732]	@ (80053c4 <_VPrintTarget+0x2f8>)
 80050e8:	f7ff fbef 	bl	80048ca <_PreparePacket>
 80050ec:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80050ee:	4bb5      	ldr	r3, [pc, #724]	@ (80053c4 <_VPrintTarget+0x2f8>)
 80050f0:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	3301      	adds	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005112:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 81a8 	beq.w	800546c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800511c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005120:	2b25      	cmp	r3, #37	@ 0x25
 8005122:	f040 8195 	bne.w	8005450 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005126:	2300      	movs	r3, #0
 8005128:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005136:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800513a:	3b23      	subs	r3, #35	@ 0x23
 800513c:	2b0d      	cmp	r3, #13
 800513e:	d83f      	bhi.n	80051c0 <_VPrintTarget+0xf4>
 8005140:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <_VPrintTarget+0x7c>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	080051b1 	.word	0x080051b1
 800514c:	080051c1 	.word	0x080051c1
 8005150:	080051c1 	.word	0x080051c1
 8005154:	080051c1 	.word	0x080051c1
 8005158:	080051c1 	.word	0x080051c1
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080051c1 	.word	0x080051c1
 8005164:	080051c1 	.word	0x080051c1
 8005168:	080051a1 	.word	0x080051a1
 800516c:	080051c1 	.word	0x080051c1
 8005170:	08005181 	.word	0x08005181
 8005174:	080051c1 	.word	0x080051c1
 8005178:	080051c1 	.word	0x080051c1
 800517c:	08005191 	.word	0x08005191
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e01a      	b.n	80051c6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e012      	b.n	80051c6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80051a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e00a      	b.n	80051c6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80051b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3301      	adds	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e002      	b.n	80051c6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80051c0:	2300      	movs	r3, #0
 80051c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c4:	bf00      	nop
        }
      } while (v);
 80051c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1b0      	bne.n	800512e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80051cc:	2300      	movs	r3, #0
 80051ce:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80051d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80051de:	d912      	bls.n	8005206 <_VPrintTarget+0x13a>
 80051e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051e4:	2b39      	cmp	r3, #57	@ 0x39
 80051e6:	d80e      	bhi.n	8005206 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80051ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	461a      	mov	r2, r3
 80051fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051fe:	4413      	add	r3, r2
 8005200:	3b30      	subs	r3, #48	@ 0x30
 8005202:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005204:	e7e4      	b.n	80051d0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005206:	2300      	movs	r3, #0
 8005208:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005212:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005216:	2b2e      	cmp	r3, #46	@ 0x2e
 8005218:	d11d      	bne.n	8005256 <_VPrintTarget+0x18a>
        sFormat++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005228:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800522c:	2b2f      	cmp	r3, #47	@ 0x2f
 800522e:	d912      	bls.n	8005256 <_VPrintTarget+0x18a>
 8005230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005234:	2b39      	cmp	r3, #57	@ 0x39
 8005236:	d80e      	bhi.n	8005256 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800523e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	461a      	mov	r2, r3
 800524a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800524e:	4413      	add	r3, r2
 8005250:	3b30      	subs	r3, #48	@ 0x30
 8005252:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005254:	e7e4      	b.n	8005220 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800525e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005262:	2b6c      	cmp	r3, #108	@ 0x6c
 8005264:	d003      	beq.n	800526e <_VPrintTarget+0x1a2>
 8005266:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800526a:	2b68      	cmp	r3, #104	@ 0x68
 800526c:	d107      	bne.n	800527e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800527c:	e7ef      	b.n	800525e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800527e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005282:	2b25      	cmp	r3, #37	@ 0x25
 8005284:	f000 80d8 	beq.w	8005438 <_VPrintTarget+0x36c>
 8005288:	2b25      	cmp	r3, #37	@ 0x25
 800528a:	f2c0 80dc 	blt.w	8005446 <_VPrintTarget+0x37a>
 800528e:	2b78      	cmp	r3, #120	@ 0x78
 8005290:	f300 80d9 	bgt.w	8005446 <_VPrintTarget+0x37a>
 8005294:	2b58      	cmp	r3, #88	@ 0x58
 8005296:	f2c0 80d6 	blt.w	8005446 <_VPrintTarget+0x37a>
 800529a:	3b58      	subs	r3, #88	@ 0x58
 800529c:	2b20      	cmp	r3, #32
 800529e:	f200 80d2 	bhi.w	8005446 <_VPrintTarget+0x37a>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <_VPrintTarget+0x1dc>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	0800539f 	.word	0x0800539f
 80052ac:	08005447 	.word	0x08005447
 80052b0:	08005447 	.word	0x08005447
 80052b4:	08005447 	.word	0x08005447
 80052b8:	08005447 	.word	0x08005447
 80052bc:	08005447 	.word	0x08005447
 80052c0:	08005447 	.word	0x08005447
 80052c4:	08005447 	.word	0x08005447
 80052c8:	08005447 	.word	0x08005447
 80052cc:	08005447 	.word	0x08005447
 80052d0:	08005447 	.word	0x08005447
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	08005353 	.word	0x08005353
 80052dc:	08005447 	.word	0x08005447
 80052e0:	08005447 	.word	0x08005447
 80052e4:	08005447 	.word	0x08005447
 80052e8:	08005447 	.word	0x08005447
 80052ec:	08005447 	.word	0x08005447
 80052f0:	08005447 	.word	0x08005447
 80052f4:	08005447 	.word	0x08005447
 80052f8:	08005447 	.word	0x08005447
 80052fc:	08005447 	.word	0x08005447
 8005300:	08005447 	.word	0x08005447
 8005304:	08005447 	.word	0x08005447
 8005308:	08005413 	.word	0x08005413
 800530c:	08005447 	.word	0x08005447
 8005310:	08005447 	.word	0x08005447
 8005314:	080053c9 	.word	0x080053c9
 8005318:	08005447 	.word	0x08005447
 800531c:	08005379 	.word	0x08005379
 8005320:	08005447 	.word	0x08005447
 8005324:	08005447 	.word	0x08005447
 8005328:	0800539f 	.word	0x0800539f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800533a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005340:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005344:	f107 0310 	add.w	r3, r7, #16
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fd1c 	bl	8004d88 <_StoreChar>
        break;
 8005350:	e07a      	b.n	8005448 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	1d19      	adds	r1, r3, #4
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6011      	str	r1, [r2, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005360:	f107 0010 	add.w	r0, r7, #16
 8005364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	220a      	movs	r2, #10
 8005370:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005372:	f7ff fe1b 	bl	8004fac <_PrintInt>
        break;
 8005376:	e067      	b.n	8005448 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1d19      	adds	r1, r3, #4
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005386:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005388:	f107 0010 	add.w	r0, r7, #16
 800538c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	220a      	movs	r2, #10
 8005398:	f7ff fd72 	bl	8004e80 <_PrintUnsigned>
        break;
 800539c:	e054      	b.n	8005448 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1d19      	adds	r1, r3, #4
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6011      	str	r1, [r2, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80053ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053ae:	f107 0010 	add.w	r0, r7, #16
 80053b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053bc:	2210      	movs	r2, #16
 80053be:	f7ff fd5f 	bl	8004e80 <_PrintUnsigned>
        break;
 80053c2:	e041      	b.n	8005448 <_VPrintTarget+0x37c>
 80053c4:	20013b48 	.word	0x20013b48
      case 's':
        s = va_arg(*pParamList, const char*);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80053d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <_VPrintTarget+0x314>
          s = "(null)";
 80053dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005508 <_VPrintTarget+0x43c>)
 80053de:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80053e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80053e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ea:	3301      	adds	r3, #1
 80053ec:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80053ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80053f6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fcc1 	bl	8004d88 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b7f      	cmp	r3, #127	@ 0x7f
 800540a:	d9e9      	bls.n	80053e0 <_VPrintTarget+0x314>
        break;
 800540c:	e01c      	b.n	8005448 <_VPrintTarget+0x37c>
            break;
 800540e:	bf00      	nop
        break;
 8005410:	e01a      	b.n	8005448 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1d19      	adds	r1, r3, #4
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6011      	str	r1, [r2, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005420:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005422:	f107 0010 	add.w	r0, r7, #16
 8005426:	2300      	movs	r3, #0
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	2308      	movs	r3, #8
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2308      	movs	r3, #8
 8005430:	2210      	movs	r2, #16
 8005432:	f7ff fd25 	bl	8004e80 <_PrintUnsigned>
        break;
 8005436:	e007      	b.n	8005448 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	2125      	movs	r1, #37	@ 0x25
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fca2 	bl	8004d88 <_StoreChar>
        break;
 8005444:	e000      	b.n	8005448 <_VPrintTarget+0x37c>
      default:
        break;
 8005446:	bf00      	nop
      }
      sFormat++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e007      	b.n	8005460 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005450:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005454:	f107 0310 	add.w	r3, r7, #16
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fc94 	bl	8004d88 <_StoreChar>
    }
  } while (*sFormat);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f47f ae4d 	bne.w	8005104 <_VPrintTarget+0x38>
 800546a:	e000      	b.n	800546e <_VPrintTarget+0x3a2>
      break;
 800546c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d041      	beq.n	80054f8 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005474:	6a3a      	ldr	r2, [r7, #32]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005484:	e00b      	b.n	800549e <_VPrintTarget+0x3d2>
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	b2da      	uxtb	r2, r3
 800548a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005490:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054a2:	d8f0      	bhi.n	8005486 <_VPrintTarget+0x3ba>
 80054a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b8:	2300      	movs	r3, #0
 80054ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80054bc:	e00b      	b.n	80054d6 <_VPrintTarget+0x40a>
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	6379      	str	r1, [r7, #52]	@ 0x34
 80054c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	09db      	lsrs	r3, r3, #7
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054da:	d8f0      	bhi.n	80054be <_VPrintTarget+0x3f2>
 80054dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80054e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ea:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	221a      	movs	r2, #26
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fad8 	bl	8004aa8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80054fe:	bf00      	nop
 8005500:	3758      	adds	r7, #88	@ 0x58
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08006620 	.word	0x08006620

0800550c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800551a:	2300      	movs	r3, #0
 800551c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005520:	4917      	ldr	r1, [pc, #92]	@ (8005580 <SEGGER_SYSVIEW_Init+0x74>)
 8005522:	4818      	ldr	r0, [pc, #96]	@ (8005584 <SEGGER_SYSVIEW_Init+0x78>)
 8005524:	f7ff f8c8 	bl	80046b8 <SEGGER_RTT_AllocUpBuffer>
 8005528:	4603      	mov	r3, r0
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b16      	ldr	r3, [pc, #88]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 800552e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005532:	785a      	ldrb	r2, [r3, #1]
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005536:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005538:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 800553a:	7e1b      	ldrb	r3, [r3, #24]
 800553c:	4618      	mov	r0, r3
 800553e:	2300      	movs	r3, #0
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	2308      	movs	r3, #8
 8005544:	4a11      	ldr	r2, [pc, #68]	@ (800558c <SEGGER_SYSVIEW_Init+0x80>)
 8005546:	490f      	ldr	r1, [pc, #60]	@ (8005584 <SEGGER_SYSVIEW_Init+0x78>)
 8005548:	f7ff f93a 	bl	80047c0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800554c:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <SEGGER_SYSVIEW_Init+0x84>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0c      	ldr	r2, [pc, #48]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005558:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800555a:	4a0b      	ldr	r2, [pc, #44]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005560:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005566:	4a08      	ldr	r2, [pc, #32]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800556c:	4a06      	ldr	r2, [pc, #24]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <SEGGER_SYSVIEW_Init+0x7c>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20013310 	.word	0x20013310
 8005584:	08006628 	.word	0x08006628
 8005588:	20013b18 	.word	0x20013b18
 800558c:	20013b10 	.word	0x20013b10
 8005590:	e0001004 	.word	0xe0001004

08005594 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800559c:	4a04      	ldr	r2, [pc, #16]	@ (80055b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6113      	str	r3, [r2, #16]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20013b18 	.word	0x20013b18

080055b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055bc:	f3ef 8311 	mrs	r3, BASEPRI
 80055c0:	f04f 0120 	mov.w	r1, #32
 80055c4:	f381 8811 	msr	BASEPRI, r1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4808      	ldr	r0, [pc, #32]	@ (80055ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80055cc:	f7ff f97d 	bl	80048ca <_PreparePacket>
 80055d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	68b8      	ldr	r0, [r7, #8]
 80055d8:	f7ff fa66 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f383 8811 	msr	BASEPRI, r3
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20013b48 	.word	0x20013b48

080055f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055fa:	f3ef 8311 	mrs	r3, BASEPRI
 80055fe:	f04f 0120 	mov.w	r1, #32
 8005602:	f381 8811 	msr	BASEPRI, r1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	4816      	ldr	r0, [pc, #88]	@ (8005664 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800560a:	f7ff f95e 	bl	80048ca <_PreparePacket>
 800560e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	e00b      	b.n	8005636 <SEGGER_SYSVIEW_RecordU32+0x46>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	1c59      	adds	r1, r3, #1
 8005626:	61f9      	str	r1, [r7, #28]
 8005628:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	09db      	lsrs	r3, r3, #7
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b7f      	cmp	r3, #127	@ 0x7f
 800563a:	d8f0      	bhi.n	800561e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	6938      	ldr	r0, [r7, #16]
 8005652:	f7ff fa29 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f383 8811 	msr	BASEPRI, r3
}
 800565c:	bf00      	nop
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20013b48 	.word	0x20013b48

08005668 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	@ 0x30
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005674:	f3ef 8311 	mrs	r3, BASEPRI
 8005678:	f04f 0120 	mov.w	r1, #32
 800567c:	f381 8811 	msr	BASEPRI, r1
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	4825      	ldr	r0, [pc, #148]	@ (8005718 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005684:	f7ff f921 	bl	80048ca <_PreparePacket>
 8005688:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005696:	e00b      	b.n	80056b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80056b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	e00b      	b.n	80056e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	1c59      	adds	r1, r3, #1
 80056d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80056da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	09db      	lsrs	r3, r3, #7
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ec:	d8f0      	bhi.n	80056d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	f7ff f9d0 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f383 8811 	msr	BASEPRI, r3
}
 800570e:	bf00      	nop
 8005710:	3730      	adds	r7, #48	@ 0x30
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20013b48 	.word	0x20013b48

0800571c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	@ 0x30
 8005720:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005722:	4b59      	ldr	r3, [pc, #356]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005728:	f3ef 8311 	mrs	r3, BASEPRI
 800572c:	f04f 0120 	mov.w	r1, #32
 8005730:	f381 8811 	msr	BASEPRI, r1
 8005734:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005736:	4b54      	ldr	r3, [pc, #336]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	220a      	movs	r2, #10
 800573c:	4953      	ldr	r1, [pc, #332]	@ (800588c <SEGGER_SYSVIEW_Start+0x170>)
 800573e:	4618      	mov	r0, r3
 8005740:	f7fa fd46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800574a:	f7fe fc87 	bl	800405c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800574e:	200a      	movs	r0, #10
 8005750:	f7ff ff30 	bl	80055b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	484b      	ldr	r0, [pc, #300]	@ (8005890 <SEGGER_SYSVIEW_Start+0x174>)
 8005764:	f7ff f8b1 	bl	80048ca <_PreparePacket>
 8005768:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005772:	4b45      	ldr	r3, [pc, #276]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005778:	e00b      	b.n	8005792 <SEGGER_SYSVIEW_Start+0x76>
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005784:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	2b7f      	cmp	r3, #127	@ 0x7f
 8005796:	d8f0      	bhi.n	800577a <SEGGER_SYSVIEW_Start+0x5e>
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	e00b      	b.n	80057cc <SEGGER_SYSVIEW_Start+0xb0>
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80057be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d0:	d8f0      	bhi.n	80057b4 <SEGGER_SYSVIEW_Start+0x98>
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e00b      	b.n	8005806 <SEGGER_SYSVIEW_Start+0xea>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	61f9      	str	r1, [r7, #28]
 80057f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	09db      	lsrs	r3, r3, #7
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b7f      	cmp	r3, #127	@ 0x7f
 800580a:	d8f0      	bhi.n	80057ee <SEGGER_SYSVIEW_Start+0xd2>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	61fa      	str	r2, [r7, #28]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e00b      	b.n	800583e <SEGGER_SYSVIEW_Start+0x122>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	6179      	str	r1, [r7, #20]
 8005830:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	09db      	lsrs	r3, r3, #7
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b7f      	cmp	r3, #127	@ 0x7f
 8005842:	d8f0      	bhi.n	8005826 <SEGGER_SYSVIEW_Start+0x10a>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	617a      	str	r2, [r7, #20]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005854:	2218      	movs	r2, #24
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff f925 	bl	8004aa8 <_SendPacket>
      RECORD_END();
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005864:	4b08      	ldr	r3, [pc, #32]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <SEGGER_SYSVIEW_Start+0x16c>)
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005872:	f000 f9eb 	bl	8005c4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005876:	f000 f9b1 	bl	8005bdc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800587a:	f000 fd11 	bl	80062a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800587e:	bf00      	nop
 8005880:	3730      	adds	r7, #48	@ 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20013b18 	.word	0x20013b18
 800588c:	08006668 	.word	0x08006668
 8005890:	20013b48 	.word	0x20013b48

08005894 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800589a:	f3ef 8311 	mrs	r3, BASEPRI
 800589e:	f04f 0120 	mov.w	r1, #32
 80058a2:	f381 8811 	msr	BASEPRI, r1
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	480b      	ldr	r0, [pc, #44]	@ (80058d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80058aa:	f7ff f80e 	bl	80048ca <_PreparePacket>
 80058ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80058b0:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <SEGGER_SYSVIEW_Stop+0x48>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80058b8:	220b      	movs	r2, #11
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6838      	ldr	r0, [r7, #0]
 80058be:	f7ff f8f3 	bl	8004aa8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80058c2:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <SEGGER_SYSVIEW_Stop+0x48>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f383 8811 	msr	BASEPRI, r3
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20013b48 	.word	0x20013b48
 80058dc:	20013b18 	.word	0x20013b18

080058e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	@ 0x30
 80058e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80058e6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ea:	f04f 0120 	mov.w	r1, #32
 80058ee:	f381 8811 	msr	BASEPRI, r1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	4845      	ldr	r0, [pc, #276]	@ (8005a0c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80058f6:	f7fe ffe8 	bl	80048ca <_PreparePacket>
 80058fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005904:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800590a:	e00b      	b.n	8005924 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	09db      	lsrs	r3, r3, #7
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	2b7f      	cmp	r3, #127	@ 0x7f
 8005928:	d8f0      	bhi.n	800590c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
 800593e:	4b34      	ldr	r3, [pc, #208]	@ (8005a10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	e00b      	b.n	800595e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005950:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b7f      	cmp	r3, #127	@ 0x7f
 8005962:	d8f0      	bhi.n	8005946 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	627a      	str	r2, [r7, #36]	@ 0x24
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	4b25      	ldr	r3, [pc, #148]	@ (8005a10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e00b      	b.n	8005998 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	61f9      	str	r1, [r7, #28]
 800598a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	09db      	lsrs	r3, r3, #7
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b7f      	cmp	r3, #127	@ 0x7f
 800599c:	d8f0      	bhi.n	8005980 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	61fa      	str	r2, [r7, #28]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6179      	str	r1, [r7, #20]
 80059c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	617a      	str	r2, [r7, #20]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80059e6:	2218      	movs	r2, #24
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	68b8      	ldr	r0, [r7, #8]
 80059ec:	f7ff f85c 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80059fe:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	4798      	blx	r3
  }
}
 8005a04:	bf00      	nop
 8005a06:	3730      	adds	r7, #48	@ 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20013b48 	.word	0x20013b48
 8005a10:	20013b18 	.word	0x20013b18

08005a14 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b092      	sub	sp, #72	@ 0x48
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	486a      	ldr	r0, [pc, #424]	@ (8005bd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a2c:	f7fe ff4d 	bl	80048ca <_PreparePacket>
 8005a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b66      	ldr	r3, [pc, #408]	@ (8005bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a46:	e00b      	b.n	8005a60 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	6479      	str	r1, [r7, #68]	@ 0x44
 8005a52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	09db      	lsrs	r3, r3, #7
 8005a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a64:	d8f0      	bhi.n	8005a48 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a80:	e00b      	b.n	8005a9a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005a8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a9e:	d8f0      	bhi.n	8005a82 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7fe fecd 	bl	8004858 <_EncodeStr>
 8005abe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ac0:	2209      	movs	r2, #9
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7fe ffef 	bl	8004aa8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b40      	ldr	r3, [pc, #256]	@ (8005bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ade:	e00b      	b.n	8005af8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	6379      	str	r1, [r7, #52]	@ 0x34
 8005aea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	09db      	lsrs	r3, r3, #7
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005afc:	d8f0      	bhi.n	8005ae0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b18:	e00b      	b.n	8005b32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	09db      	lsrs	r3, r3, #7
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b36:	d8f0      	bhi.n	8005b1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e00b      	b.n	8005b6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b70:	d8f0      	bhi.n	8005b54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e00b      	b.n	8005ba6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	61f9      	str	r1, [r7, #28]
 8005b98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005baa:	d8f0      	bhi.n	8005b8e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005bbc:	2215      	movs	r2, #21
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	6938      	ldr	r0, [r7, #16]
 8005bc2:	f7fe ff71 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f383 8811 	msr	BASEPRI, r3
}
 8005bcc:	bf00      	nop
 8005bce:	3748      	adds	r7, #72	@ 0x48
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20013b48 	.word	0x20013b48
 8005bd8:	20013b18 	.word	0x20013b18

08005bdc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005be0:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005bf2:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4798      	blx	r3
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20013b18 	.word	0x20013b18

08005c04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c10:	f04f 0120 	mov.w	r1, #32
 8005c14:	f381 8811 	msr	BASEPRI, r1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	480b      	ldr	r0, [pc, #44]	@ (8005c48 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c1c:	f7fe fe55 	bl	80048ca <_PreparePacket>
 8005c20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c22:	2280      	movs	r2, #128	@ 0x80
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	6938      	ldr	r0, [r7, #16]
 8005c28:	f7fe fe16 	bl	8004858 <_EncodeStr>
 8005c2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c2e:	220e      	movs	r2, #14
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7fe ff38 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f383 8811 	msr	BASEPRI, r3
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20013b48 	.word	0x20013b48

08005c4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c52:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005c5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ca8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d015      	beq.n	8005c90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005c64:	4b10      	ldr	r3, [pc, #64]	@ (8005ca8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4798      	blx	r3
 8005c6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	000a      	movs	r2, r1
 8005c80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005c82:	4613      	mov	r3, r2
 8005c84:	461a      	mov	r2, r3
 8005c86:	4621      	mov	r1, r4
 8005c88:	200d      	movs	r0, #13
 8005c8a:	f7ff fced 	bl	8005668 <SEGGER_SYSVIEW_RecordU32x2>
 8005c8e:	e006      	b.n	8005c9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005c90:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4619      	mov	r1, r3
 8005c96:	200c      	movs	r0, #12
 8005c98:	f7ff fcaa 	bl	80055f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd90      	pop	{r4, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20013b18 	.word	0x20013b18
 8005cac:	e0001004 	.word	0xe0001004

08005cb0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cba:	f04f 0120 	mov.w	r1, #32
 8005cbe:	f381 8811 	msr	BASEPRI, r1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	4819      	ldr	r0, [pc, #100]	@ (8005d2c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005cc6:	f7fe fe00 	bl	80048ca <_PreparePacket>
 8005cca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005cd0:	4b17      	ldr	r3, [pc, #92]	@ (8005d30 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e00b      	b.n	8005cfc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	6179      	str	r1, [r7, #20]
 8005cee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	09db      	lsrs	r3, r3, #7
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d00:	d8f0      	bhi.n	8005ce4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	617a      	str	r2, [r7, #20]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d12:	2202      	movs	r2, #2
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	68b8      	ldr	r0, [r7, #8]
 8005d18:	f7fe fec6 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f383 8811 	msr	BASEPRI, r3
}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20013b48 	.word	0x20013b48
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3e:	f04f 0120 	mov.w	r1, #32
 8005d42:	f381 8811 	msr	BASEPRI, r1
 8005d46:	607b      	str	r3, [r7, #4]
 8005d48:	4807      	ldr	r0, [pc, #28]	@ (8005d68 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d4a:	f7fe fdbe 	bl	80048ca <_PreparePacket>
 8005d4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d50:	2203      	movs	r2, #3
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6838      	ldr	r0, [r7, #0]
 8005d56:	f7fe fea7 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f383 8811 	msr	BASEPRI, r3
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20013b48 	.word	0x20013b48

08005d6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d72:	f3ef 8311 	mrs	r3, BASEPRI
 8005d76:	f04f 0120 	mov.w	r1, #32
 8005d7a:	f381 8811 	msr	BASEPRI, r1
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	4807      	ldr	r0, [pc, #28]	@ (8005da0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005d82:	f7fe fda2 	bl	80048ca <_PreparePacket>
 8005d86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005d88:	2212      	movs	r2, #18
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f7fe fe8b 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f383 8811 	msr	BASEPRI, r3
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20013b48 	.word	0x20013b48

08005da4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dac:	f3ef 8311 	mrs	r3, BASEPRI
 8005db0:	f04f 0120 	mov.w	r1, #32
 8005db4:	f381 8811 	msr	BASEPRI, r1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	4817      	ldr	r0, [pc, #92]	@ (8005e18 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005dbc:	f7fe fd85 	bl	80048ca <_PreparePacket>
 8005dc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	e00b      	b.n	8005de8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	61f9      	str	r1, [r7, #28]
 8005dda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	09db      	lsrs	r3, r3, #7
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dec:	d8f0      	bhi.n	8005dd0 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	61fa      	str	r2, [r7, #28]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005dfe:	221c      	movs	r2, #28
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	6938      	ldr	r0, [r7, #16]
 8005e04:	f7fe fe50 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f383 8811 	msr	BASEPRI, r3
}
 8005e0e:	bf00      	nop
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20013b48 	.word	0x20013b48

08005e1c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	@ 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e26:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2a:	f04f 0120 	mov.w	r1, #32
 8005e2e:	f381 8811 	msr	BASEPRI, r1
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	4824      	ldr	r0, [pc, #144]	@ (8005ec8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005e36:	f7fe fd48 	bl	80048ca <_PreparePacket>
 8005e3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	e00b      	b.n	8005e62 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	623b      	str	r3, [r7, #32]
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e66:	d8f0      	bhi.n	8005e4a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e00b      	b.n	8005e9a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	61f9      	str	r1, [r7, #28]
 8005e8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	09db      	lsrs	r3, r3, #7
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e9e:	d8f0      	bhi.n	8005e82 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005eb0:	221c      	movs	r2, #28
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	6938      	ldr	r0, [r7, #16]
 8005eb6:	f7fe fdf7 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f383 8811 	msr	BASEPRI, r3
}
 8005ec0:	bf00      	nop
 8005ec2:	3728      	adds	r7, #40	@ 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20013b48 	.word	0x20013b48

08005ecc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed6:	f04f 0120 	mov.w	r1, #32
 8005eda:	f381 8811 	msr	BASEPRI, r1
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	4807      	ldr	r0, [pc, #28]	@ (8005f00 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005ee2:	f7fe fcf2 	bl	80048ca <_PreparePacket>
 8005ee6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ee8:	2211      	movs	r2, #17
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f7fe fddb 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f383 8811 	msr	BASEPRI, r3
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20013b48 	.word	0x20013b48

08005f04 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	f04f 0120 	mov.w	r1, #32
 8005f14:	f381 8811 	msr	BASEPRI, r1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	4819      	ldr	r0, [pc, #100]	@ (8005f80 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f1c:	f7fe fcd5 	bl	80048ca <_PreparePacket>
 8005f20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f26:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e00b      	b.n	8005f52 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	1c59      	adds	r1, r3, #1
 8005f42:	61f9      	str	r1, [r7, #28]
 8005f44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	09db      	lsrs	r3, r3, #7
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f56:	d8f0      	bhi.n	8005f3a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	61fa      	str	r2, [r7, #28]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f68:	2208      	movs	r2, #8
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	6938      	ldr	r0, [r7, #16]
 8005f6e:	f7fe fd9b 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f383 8811 	msr	BASEPRI, r3
}
 8005f78:	bf00      	nop
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20013b48 	.word	0x20013b48
 8005f84:	20013b18 	.word	0x20013b18

08005f88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f90:	f3ef 8311 	mrs	r3, BASEPRI
 8005f94:	f04f 0120 	mov.w	r1, #32
 8005f98:	f381 8811 	msr	BASEPRI, r1
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	4819      	ldr	r0, [pc, #100]	@ (8006004 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005fa0:	f7fe fc93 	bl	80048ca <_PreparePacket>
 8005fa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005faa:	4b17      	ldr	r3, [pc, #92]	@ (8006008 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	e00b      	b.n	8005fd6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	61f9      	str	r1, [r7, #28]
 8005fc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	09db      	lsrs	r3, r3, #7
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fda:	d8f0      	bhi.n	8005fbe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	61fa      	str	r2, [r7, #28]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005fec:	2204      	movs	r2, #4
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	6938      	ldr	r0, [r7, #16]
 8005ff2:	f7fe fd59 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f383 8811 	msr	BASEPRI, r3
}
 8005ffc:	bf00      	nop
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20013b48 	.word	0x20013b48
 8006008:	20013b18 	.word	0x20013b18

0800600c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006014:	f3ef 8311 	mrs	r3, BASEPRI
 8006018:	f04f 0120 	mov.w	r1, #32
 800601c:	f381 8811 	msr	BASEPRI, r1
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	4819      	ldr	r0, [pc, #100]	@ (8006088 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006024:	f7fe fc51 	bl	80048ca <_PreparePacket>
 8006028:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800602e:	4b17      	ldr	r3, [pc, #92]	@ (800608c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	e00b      	b.n	800605a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	1c59      	adds	r1, r3, #1
 800604a:	61f9      	str	r1, [r7, #28]
 800604c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	09db      	lsrs	r3, r3, #7
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b7f      	cmp	r3, #127	@ 0x7f
 800605e:	d8f0      	bhi.n	8006042 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	61fa      	str	r2, [r7, #28]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006070:	2206      	movs	r2, #6
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	6938      	ldr	r0, [r7, #16]
 8006076:	f7fe fd17 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f383 8811 	msr	BASEPRI, r3
}
 8006080:	bf00      	nop
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20013b48 	.word	0x20013b48
 800608c:	20013b18 	.word	0x20013b18

08006090 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	@ 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800609a:	f3ef 8311 	mrs	r3, BASEPRI
 800609e:	f04f 0120 	mov.w	r1, #32
 80060a2:	f381 8811 	msr	BASEPRI, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	4827      	ldr	r0, [pc, #156]	@ (8006148 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80060aa:	f7fe fc0e 	bl	80048ca <_PreparePacket>
 80060ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	e00b      	b.n	80060e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80060d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e00b      	b.n	8006118 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	61f9      	str	r1, [r7, #28]
 800610a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b7f      	cmp	r3, #127	@ 0x7f
 800611c:	d8f0      	bhi.n	8006100 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	61fa      	str	r2, [r7, #28]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800612e:	2207      	movs	r2, #7
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	6938      	ldr	r0, [r7, #16]
 8006134:	f7fe fcb8 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
 8006140:	3728      	adds	r7, #40	@ 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20013b48 	.word	0x20013b48
 800614c:	20013b18 	.word	0x20013b18

08006150 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	@ 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800615a:	4b40      	ldr	r3, [pc, #256]	@ (800625c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d077      	beq.n	8006252 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006162:	4b3e      	ldr	r3, [pc, #248]	@ (800625c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006168:	2300      	movs	r3, #0
 800616a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800616c:	e008      	b.n	8006180 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	3301      	adds	r3, #1
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006184:	429a      	cmp	r2, r3
 8006186:	d3f2      	bcc.n	800616e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006188:	e000      	b.n	800618c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800618a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d055      	beq.n	800623e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006192:	f3ef 8311 	mrs	r3, BASEPRI
 8006196:	f04f 0120 	mov.w	r1, #32
 800619a:	f381 8811 	msr	BASEPRI, r1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	482f      	ldr	r0, [pc, #188]	@ (8006260 <SEGGER_SYSVIEW_SendModule+0x110>)
 80061a2:	f7fe fb92 	bl	80048ca <_PreparePacket>
 80061a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	6279      	str	r1, [r7, #36]	@ 0x24
 80061c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e00b      	b.n	8006208 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	61f9      	str	r1, [r7, #28]
 80061fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	09db      	lsrs	r3, r3, #7
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b7f      	cmp	r3, #127	@ 0x7f
 800620c:	d8f0      	bhi.n	80061f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61fa      	str	r2, [r7, #28]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2280      	movs	r2, #128	@ 0x80
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7fe fb16 	bl	8004858 <_EncodeStr>
 800622c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800622e:	2216      	movs	r2, #22
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	6938      	ldr	r0, [r7, #16]
 8006234:	f7fe fc38 	bl	8004aa8 <_SendPacket>
      RECORD_END();
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d006      	beq.n	8006252 <SEGGER_SYSVIEW_SendModule+0x102>
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4798      	blx	r3
    }
  }
}
 8006252:	bf00      	nop
 8006254:	3730      	adds	r7, #48	@ 0x30
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20013b40 	.word	0x20013b40
 8006260:	20013b48 	.word	0x20013b48

08006264 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800626a:	4b0c      	ldr	r3, [pc, #48]	@ (800629c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00f      	beq.n	8006292 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006272:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f2      	bne.n	8006278 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20013b40 	.word	0x20013b40

080062a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80062a6:	f3ef 8311 	mrs	r3, BASEPRI
 80062aa:	f04f 0120 	mov.w	r1, #32
 80062ae:	f381 8811 	msr	BASEPRI, r1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	4817      	ldr	r0, [pc, #92]	@ (8006314 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80062b6:	f7fe fb08 	bl	80048ca <_PreparePacket>
 80062ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	4b14      	ldr	r3, [pc, #80]	@ (8006318 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	e00b      	b.n	80062e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	6179      	str	r1, [r7, #20]
 80062d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	09db      	lsrs	r3, r3, #7
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e8:	d8f0      	bhi.n	80062cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	617a      	str	r2, [r7, #20]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80062fa:	221b      	movs	r2, #27
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	68b8      	ldr	r0, [r7, #8]
 8006300:	f7fe fbd2 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f383 8811 	msr	BASEPRI, r3
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20013b48 	.word	0x20013b48
 8006318:	20013b44 	.word	0x20013b44

0800631c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800631c:	b40f      	push	{r0, r1, r2, r3}
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	461a      	mov	r2, r3
 800632e:	2100      	movs	r1, #0
 8006330:	6938      	ldr	r0, [r7, #16]
 8006332:	f7fe fecb 	bl	80050cc <_VPrintTarget>
  va_end(ParamList);
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr

08006344 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800634c:	f3ef 8311 	mrs	r3, BASEPRI
 8006350:	f04f 0120 	mov.w	r1, #32
 8006354:	f381 8811 	msr	BASEPRI, r1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	4827      	ldr	r0, [pc, #156]	@ (80063f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800635c:	f7fe fab5 	bl	80048ca <_PreparePacket>
 8006360:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006362:	2280      	movs	r2, #128	@ 0x80
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f7fe fa76 	bl	8004858 <_EncodeStr>
 800636c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
 8006372:	2301      	movs	r3, #1
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	e00b      	b.n	8006390 <SEGGER_SYSVIEW_Warn+0x4c>
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	6279      	str	r1, [r7, #36]	@ 0x24
 8006382:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	09db      	lsrs	r3, r3, #7
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2b7f      	cmp	r3, #127	@ 0x7f
 8006394:	d8f0      	bhi.n	8006378 <SEGGER_SYSVIEW_Warn+0x34>
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	627a      	str	r2, [r7, #36]	@ 0x24
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	2300      	movs	r3, #0
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e00b      	b.n	80063c8 <SEGGER_SYSVIEW_Warn+0x84>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	61f9      	str	r1, [r7, #28]
 80063ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	09db      	lsrs	r3, r3, #7
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80063cc:	d8f0      	bhi.n	80063b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	61fa      	str	r2, [r7, #28]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063de:	221a      	movs	r2, #26
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	6938      	ldr	r0, [r7, #16]
 80063e4:	f7fe fb60 	bl	8004aa8 <_SendPacket>
  RECORD_END();
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f383 8811 	msr	BASEPRI, r3
}
 80063ee:	bf00      	nop
 80063f0:	3728      	adds	r7, #40	@ 0x28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20013b48 	.word	0x20013b48

080063fc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006400:	4b13      	ldr	r3, [pc, #76]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006402:	7e1b      	ldrb	r3, [r3, #24]
 8006404:	4619      	mov	r1, r3
 8006406:	4a13      	ldr	r2, [pc, #76]	@ (8006454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006408:	460b      	mov	r3, r1
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	440b      	add	r3, r1
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	336c      	adds	r3, #108	@ 0x6c
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006418:	7e1b      	ldrb	r3, [r3, #24]
 800641a:	4618      	mov	r0, r3
 800641c:	490d      	ldr	r1, [pc, #52]	@ (8006454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800641e:	4603      	mov	r3, r0
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	4403      	add	r3, r0
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	440b      	add	r3, r1
 8006428:	3370      	adds	r3, #112	@ 0x70
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d00b      	beq.n	8006448 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006430:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006432:	789b      	ldrb	r3, [r3, #2]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d107      	bne.n	8006448 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800643a:	2201      	movs	r2, #1
 800643c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800643e:	f7fe fa51 	bl	80048e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006442:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006444:	2200      	movs	r2, #0
 8006446:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006448:	4b01      	ldr	r3, [pc, #4]	@ (8006450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800644a:	781b      	ldrb	r3, [r3, #0]
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20013b18 	.word	0x20013b18
 8006454:	20012e58 	.word	0x20012e58

08006458 <memcmp>:
 8006458:	b510      	push	{r4, lr}
 800645a:	3901      	subs	r1, #1
 800645c:	4402      	add	r2, r0
 800645e:	4290      	cmp	r0, r2
 8006460:	d101      	bne.n	8006466 <memcmp+0xe>
 8006462:	2000      	movs	r0, #0
 8006464:	e005      	b.n	8006472 <memcmp+0x1a>
 8006466:	7803      	ldrb	r3, [r0, #0]
 8006468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800646c:	42a3      	cmp	r3, r4
 800646e:	d001      	beq.n	8006474 <memcmp+0x1c>
 8006470:	1b18      	subs	r0, r3, r4
 8006472:	bd10      	pop	{r4, pc}
 8006474:	3001      	adds	r0, #1
 8006476:	e7f2      	b.n	800645e <memcmp+0x6>

08006478 <memset>:
 8006478:	4402      	add	r2, r0
 800647a:	4603      	mov	r3, r0
 800647c:	4293      	cmp	r3, r2
 800647e:	d100      	bne.n	8006482 <memset+0xa>
 8006480:	4770      	bx	lr
 8006482:	f803 1b01 	strb.w	r1, [r3], #1
 8006486:	e7f9      	b.n	800647c <memset+0x4>

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	@ (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	@ (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	@ (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	@ (80064cc <__libc_init_array+0x44>)
 800649c:	f000 f826 	bl	80064ec <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	0800668c 	.word	0x0800668c
 80064c4:	0800668c 	.word	0x0800668c
 80064c8:	0800668c 	.word	0x0800668c
 80064cc:	08006690 	.word	0x08006690

080064d0 <memcpy>:
 80064d0:	440a      	add	r2, r1
 80064d2:	4291      	cmp	r1, r2
 80064d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d8:	d100      	bne.n	80064dc <memcpy+0xc>
 80064da:	4770      	bx	lr
 80064dc:	b510      	push	{r4, lr}
 80064de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e6:	4291      	cmp	r1, r2
 80064e8:	d1f9      	bne.n	80064de <memcpy+0xe>
 80064ea:	bd10      	pop	{r4, pc}

080064ec <_init>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr

080064f8 <_fini>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr
