
Del_and_suspend_task_with_segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006b44  08006b44  00007b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cec  08006cec  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cec  08006cec  00007cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf4  08006cf4  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf4  08006cf4  00007cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cf8  08006cf8  00007cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006cfc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00013c28  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013c44  20013c44  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f81  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bdb  00000000  00000000  0001afcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  0001dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dec  00000000  00000000  0001edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024052  00000000  00000000  0001fbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148d8  00000000  00000000  00043bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e80c6  00000000  00000000  000584d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014059c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b40  00000000  00000000  001405e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b9  00000000  00000000  00145120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b2c 	.word	0x08006b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006b2c 	.word	0x08006b2c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e70 	.word	0x20012e70

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc69 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f89b 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f903 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 8000566:	4b3d      	ldr	r3, [pc, #244]	@ (800065c <main+0x108>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a3c      	ldr	r2, [pc, #240]	@ (800065c <main+0x108>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000572:	483b      	ldr	r0, [pc, #236]	@ (8000660 <main+0x10c>)
 8000574:	f004 f836 	bl	80045e4 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000578:	f003 fe5e 	bl	8004238 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task_green_handle);
 800057c:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <main+0x110>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	4937      	ldr	r1, [pc, #220]	@ (8000668 <main+0x114>)
 800058a:	4838      	ldr	r0, [pc, #224]	@ (800066c <main+0x118>)
 800058c:	f001 ffb1 	bl	80024f2 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

  next_task_handle = task_green_handle;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000664 <main+0x110>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000670 <main+0x11c>)
 80005b6:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task_red_handle);
 80005b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000674 <main+0x120>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	492c      	ldr	r1, [pc, #176]	@ (8000678 <main+0x124>)
 80005c6:	482d      	ldr	r0, [pc, #180]	@ (800067c <main+0x128>)
 80005c8:	f001 ff93 	bl	80024f2 <xTaskCreate>
 80005cc:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x98>
    __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	60fb      	str	r3, [r7, #12]
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task_blue_handle);
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <main+0x12c>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4922      	ldr	r1, [pc, #136]	@ (8000684 <main+0x130>)
 80005fa:	4823      	ldr	r0, [pc, #140]	@ (8000688 <main+0x134>)
 80005fc:	f001 ff79 	bl	80024f2 <xTaskCreate>
 8000600:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00b      	beq.n	8000620 <main+0xcc>
    __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	60bb      	str	r3, [r7, #8]
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0xc8>

  status = xTaskCreate(button_handler, "button_task", 200, NULL, 2, &task_button_handle);
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <main+0x138>)
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2302      	movs	r3, #2
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	22c8      	movs	r2, #200	@ 0xc8
 800062c:	4918      	ldr	r1, [pc, #96]	@ (8000690 <main+0x13c>)
 800062e:	4819      	ldr	r0, [pc, #100]	@ (8000694 <main+0x140>)
 8000630:	f001 ff5f 	bl	80024f2 <xTaskCreate>
 8000634:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d00b      	beq.n	8000654 <main+0x100>
    __asm volatile
 800063c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000640:	f383 8811 	msr	BASEPRI, r3
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	f3bf 8f4f 	dsb	sy
 800064c:	607b      	str	r3, [r7, #4]
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0xfc>

  vTaskStartScheduler();
 8000654:	f002 f9fe 	bl	8002a54 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x104>
 800065c:	e0001000 	.word	0xe0001000
 8000660:	0003d090 	.word	0x0003d090
 8000664:	20000038 	.word	0x20000038
 8000668:	08006b44 	.word	0x08006b44
 800066c:	08000a29 	.word	0x08000a29
 8000670:	20000048 	.word	0x20000048
 8000674:	2000003c 	.word	0x2000003c
 8000678:	08006b54 	.word	0x08006b54
 800067c:	08000a9d 	.word	0x08000a9d
 8000680:	20000040 	.word	0x20000040
 8000684:	08006b64 	.word	0x08006b64
 8000688:	08000b09 	.word	0x08000b09
 800068c:	20000044 	.word	0x20000044
 8000690:	08006b74 	.word	0x08006b74
 8000694:	08000b7d 	.word	0x08000b7d

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fa06 	bl	8006ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	@ 0xa8
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe93 	bl	8001448 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa76 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f8f4 	bl	8001938 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fa5f 	bl	8000c18 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	@ 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fdd6 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fdd1 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fdcb 	bl	80013e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fc09 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fbfb 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fbeb 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fbde 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fbce 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	@ 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fbbe 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fbb2 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fba1 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fb92 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fb81 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb74 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fb63 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fb57 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fb46 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 fb39 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void *parameter)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <led_green_handler+0x5c>)
 8000a32:	f005 ff93 	bl	800695c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3a:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <led_green_handler+0x60>)
 8000a3c:	f000 fce9 	bl	8001412 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));             //wait for the notification
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 fbcb 	bl	80031e8 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a5a:	f002 f84f 	bl	8002afc <vTaskSuspendAll>
			next_task_handle = task_red_handle;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <led_green_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <led_green_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a66:	f002 f857 	bl	8002b18 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <led_green_handler+0x6c>)
 8000a72:	f000 fcb5 	bl	80013e0 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling_deleted");
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <led_green_handler+0x70>)
 8000a78:	f005 ff70 	bl	800695c <SEGGER_SYSVIEW_PrintfTarget>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f001 fedf 	bl	8002840 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Led_Green_Toggling");
 8000a82:	e7d5      	b.n	8000a30 <led_green_handler+0x8>
 8000a84:	08006b80 	.word	0x08006b80
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	2000003c 	.word	0x2000003c
 8000a90:	20000048 	.word	0x20000048
 8000a94:	40020000 	.word	0x40020000
 8000a98:	08006b94 	.word	0x08006b94

08000a9c <led_red_handler>:
		}
	}
}

static void led_red_handler(void *parameter)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000aa4:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <led_red_handler+0x58>)
 8000aa6:	f005 ff59 	bl	800695c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000aaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aae:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <led_red_handler+0x5c>)
 8000ab0:	f000 fcaf 	bl	8001412 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));             //wait for the notification
 8000ab4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f002 fb91 	bl	80031e8 <xTaskGenericNotifyWait>
 8000ac6:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d1ea      	bne.n	8000aa4 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000ace:	f002 f815 	bl	8002afc <vTaskSuspendAll>
			next_task_handle = task_blue_handle;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <led_red_handler+0x60>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <led_red_handler+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ada:	f002 f81d 	bl	8002b18 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_RED_PIN, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <led_red_handler+0x68>)
 8000ae6:	f000 fc7b 	bl	80013e0 <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Led_red_Toggling_deleted");
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f001 fea8 	bl	8002840 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Led_Red_Toggling");
 8000af0:	e7d8      	b.n	8000aa4 <led_red_handler+0x8>
 8000af2:	bf00      	nop
 8000af4:	08006bb0 	.word	0x08006bb0
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20000040 	.word	0x20000040
 8000b00:	20000048 	.word	0x20000048
 8000b04:	40020000 	.word	0x40020000

08000b08 <led_blue_handler>:
	}

}

static void led_blue_handler(void *parameter)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000b10:	4814      	ldr	r0, [pc, #80]	@ (8000b64 <led_blue_handler+0x5c>)
 8000b12:	f005 ff23 	bl	800695c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_BLUE_PIN);
 8000b16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <led_blue_handler+0x60>)
 8000b1c:	f000 fc79 	bl	8001412 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));             //wait for the notification
 8000b20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f002 fb5b 	bl	80031e8 <xTaskGenericNotifyWait>
 8000b32:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ea      	bne.n	8000b10 <led_blue_handler+0x8>
		{
			vTaskSuspendAll();
 8000b3a:	f001 ffdf 	bl	8002afc <vTaskSuspendAll>
			next_task_handle = task_green_handle;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <led_blue_handler+0x64>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <led_blue_handler+0x68>)
 8000b44:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b46:	f001 ffe7 	bl	8002b18 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, LED_BLUE_PIN, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <led_blue_handler+0x6c>)
 8000b52:	f000 fc45 	bl	80013e0 <HAL_GPIO_WritePin>
			//SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling_deleted");
			//vTaskDelete(task_button_handle);
			//vTaskDelete(NULL);
			all_tasks_suspended = 1;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <led_blue_handler+0x70>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(NULL);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 fe6f 	bl	8002840 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Led_blue_Toggling");
 8000b62:	e7d5      	b.n	8000b10 <led_blue_handler+0x8>
 8000b64:	08006bc4 	.word	0x08006bc4
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	20000038 	.word	0x20000038
 8000b70:	20000048 	.word	0x20000048
 8000b74:	40020000 	.word	0x40020000
 8000b78:	2000004c 	.word	0x2000004c

08000b7c <button_handler>:

	}
}

static void button_handler(void *parameter)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	6078      	str	r0, [r7, #4]
	uint8_t but_read = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73bb      	strb	r3, [r7, #14]
	uint8_t pre_read = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
	while(1){
		but_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <button_handler+0x68>)
 8000b90:	f000 fc0e 	bl	80013b0 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73bb      	strb	r3, [r7, #14]
		if (but_read){
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d01a      	beq.n	8000bd4 <button_handler+0x58>
			if(!pre_read){
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d117      	bne.n	8000bd4 <button_handler+0x58>
				if (all_tasks_suspended)
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <button_handler+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d009      	beq.n	8000bc2 <button_handler+0x46>

					// Resume all LED tasks
//					vTaskResume(task_green_handle);
//					vTaskResume(task_red_handle);
//					vTaskResume(task_blue_handle);
					xTaskResumeAll();
 8000bae:	f001 ffb3 	bl	8002b18 <xTaskResumeAll>


					next_task_handle = task_green_handle;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <button_handler+0x70>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <button_handler+0x74>)
 8000bb8:	6013      	str	r3, [r2, #0]
					all_tasks_suspended = 0;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <button_handler+0x6c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e008      	b.n	8000bd4 <button_handler+0x58>
				}
				else
				{
					// Notify the next task to suspend itself
					xTaskNotify(next_task_handle, 0, eNoAction);
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <button_handler+0x74>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f002 fbac 	bl	800332c <xTaskGenericNotify>
				}
			}
		}
		pre_read = but_read;
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f001 fdf8 	bl	80027d0 <vTaskDelay>
		but_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000be0:	e7d4      	b.n	8000b8c <button_handler+0x10>
 8000be2:	bf00      	nop
 8000be4:	40020000 	.word	0x40020000
 8000be8:	2000004c 	.word	0x2000004c
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	20000048 	.word	0x20000048

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 f935 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40001000 	.word	0x40001000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c62:	f002 fea7 	bl	80039b4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	@ 0x38
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <HAL_InitTick+0xe4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <HAL_InitTick+0xe4>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c94:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <HAL_InitTick+0xe4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 f850 	bl	8001d50 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cba:	f001 f835 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000cbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cc0:	e004      	b.n	8000ccc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc2:	f001 f831 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cce:	4a23      	ldr	r2, [pc, #140]	@ (8000d5c <HAL_InitTick+0xe8>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	0c9b      	lsrs	r3, r3, #18
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <HAL_InitTick+0xec>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <HAL_InitTick+0xf0>)
 8000cde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <HAL_InitTick+0xec>)
 8000ce2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d60 <HAL_InitTick+0xec>)
 8000cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_InitTick+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_InitTick+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_InitTick+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d00:	4817      	ldr	r0, [pc, #92]	@ (8000d60 <HAL_InitTick+0xec>)
 8000d02:	f001 f857 	bl	8001db4 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11b      	bne.n	8000d4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d14:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <HAL_InitTick+0xec>)
 8000d16:	f001 f8a7 	bl	8001e68 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d111      	bne.n	8000d4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d28:	2036      	movs	r0, #54	@ 0x36
 8000d2a:	f000 f997 	bl	800105c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d808      	bhi.n	8000d46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2036      	movs	r0, #54	@ 0x36
 8000d3a:	f000 f973 	bl	8001024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_InitTick+0xf4>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e002      	b.n	8000d4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3738      	adds	r7, #56	@ 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	20000050 	.word	0x20000050
 8000d64:	40001000 	.word	0x40001000
 8000d68:	20000004 	.word	0x20000004

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <TIM6_DAC_IRQHandler+0x10>)
 8000daa:	f001 f8cd 	bl	8001f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000050 	.word	0x20000050

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f005 fe5d 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fba1 	bl	8000554 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e20:	08006cfc 	.word	0x08006cfc
  ldr r2, =_sbss
 8000e24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e28:	20013c44 	.word	0x20013c44

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f8d8 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff08 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fede 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000098 	.word	0x20000098

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000098 	.word	0x20000098

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e16b      	b.n	800136c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 815a 	bne.w	8001366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80b4 	beq.w	8001366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b60      	ldr	r3, [pc, #384]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a5f      	ldr	r2, [pc, #380]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b5d      	ldr	r3, [pc, #372]	@ (8001384 <HAL_GPIO_Init+0x30c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a5b      	ldr	r2, [pc, #364]	@ (8001388 <HAL_GPIO_Init+0x310>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	@ (8001390 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	@ (8001394 <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4e      	ldr	r2, [pc, #312]	@ (800139c <HAL_GPIO_Init+0x324>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4d      	ldr	r2, [pc, #308]	@ (80013a0 <HAL_GPIO_Init+0x328>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4c      	ldr	r2, [pc, #304]	@ (80013a4 <HAL_GPIO_Init+0x32c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4b      	ldr	r2, [pc, #300]	@ (80013a8 <HAL_GPIO_Init+0x330>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20a>
 800127e:	2307      	movs	r3, #7
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001282:	2308      	movs	r3, #8
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	@ (8001388 <HAL_GPIO_Init+0x310>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a32      	ldr	r2, [pc, #200]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <HAL_GPIO_Init+0x334>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_GPIO_Init+0x334>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae90 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	041a      	lsls	r2, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43d9      	mvns	r1, r3
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	400b      	ands	r3, r1
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e267      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d075      	beq.n	8001552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001466:	4b88      	ldr	r3, [pc, #544]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d00c      	beq.n	800148c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800147a:	2b08      	cmp	r3, #8
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147e:	4b82      	ldr	r3, [pc, #520]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800148a:	d10b      	bne.n	80014a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d05b      	beq.n	8001550 <HAL_RCC_OscConfig+0x108>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d157      	bne.n	8001550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e242      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x74>
 80014ae:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a75      	ldr	r2, [pc, #468]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e01d      	b.n	80014f8 <HAL_RCC_OscConfig+0xb0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x98>
 80014c6:	4b70      	ldr	r3, [pc, #448]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xb0>
 80014e0:	4b69      	ldr	r3, [pc, #420]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a68      	ldr	r2, [pc, #416]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a65      	ldr	r2, [pc, #404]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fccc 	bl	8000e9c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fcc8 	bl	8000e9c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e207      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b5b      	ldr	r3, [pc, #364]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0xc0>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fcb8 	bl	8000e9c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fcb4 	bl	8000e9c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1f3      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b51      	ldr	r3, [pc, #324]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0xe8>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800155e:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001572:	2b08      	cmp	r3, #8
 8001574:	d11c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b44      	ldr	r3, [pc, #272]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x152>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1c7      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4937      	ldr	r1, [pc, #220]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e03a      	b.n	8001626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_RCC_OscConfig+0x244>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fc6d 	bl	8000e9c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc69 	bl	8000e9c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1a8      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4925      	ldr	r1, [pc, #148]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_OscConfig+0x244>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fc4c 	bl	8000e9c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fc48 	bl	8000e9c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e187      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d036      	beq.n	80016a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d016      	beq.n	8001668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_RCC_OscConfig+0x248>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fc2c 	bl	8000e9c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fc28 	bl	8000e9c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e167      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_RCC_OscConfig+0x240>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x200>
 8001666:	e01b      	b.n	80016a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_RCC_OscConfig+0x248>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fc15 	bl	8000e9c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	e00e      	b.n	8001694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fc11 	bl	8000e9c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d907      	bls.n	8001694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e150      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
 8001688:	40023800 	.word	0x40023800
 800168c:	42470000 	.word	0x42470000
 8001690:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b88      	ldr	r3, [pc, #544]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ea      	bne.n	8001676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8097 	beq.w	80017dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b81      	ldr	r3, [pc, #516]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b7d      	ldr	r3, [pc, #500]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a7c      	ldr	r2, [pc, #496]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b7a      	ldr	r3, [pc, #488]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b77      	ldr	r3, [pc, #476]	@ (80018bc <HAL_RCC_OscConfig+0x474>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b74      	ldr	r3, [pc, #464]	@ (80018bc <HAL_RCC_OscConfig+0x474>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a73      	ldr	r2, [pc, #460]	@ (80018bc <HAL_RCC_OscConfig+0x474>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fbd1 	bl	8000e9c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fbcd 	bl	8000e9c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e10c      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <HAL_RCC_OscConfig+0x474>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x2ea>
 8001724:	4b64      	ldr	r3, [pc, #400]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001728:	4a63      	ldr	r2, [pc, #396]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001730:	e01c      	b.n	800176c <HAL_RCC_OscConfig+0x324>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b05      	cmp	r3, #5
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x30c>
 800173a:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	4a5e      	ldr	r2, [pc, #376]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	@ 0x70
 8001746:	4b5c      	ldr	r3, [pc, #368]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	4a5b      	ldr	r2, [pc, #364]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6713      	str	r3, [r2, #112]	@ 0x70
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0x324>
 8001754:	4b58      	ldr	r3, [pc, #352]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a57      	ldr	r2, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001760:	4b55      	ldr	r3, [pc, #340]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001764:	4a54      	ldr	r2, [pc, #336]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 0304 	bic.w	r3, r3, #4
 800176a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d015      	beq.n	80017a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fb92 	bl	8000e9c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb8e 	bl	8000e9c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0cb      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0ee      	beq.n	800177c <HAL_RCC_OscConfig+0x334>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a0:	f7ff fb7c 	bl	8000e9c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fb78 	bl	8000e9c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0b5      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ee      	bne.n	80017a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b39      	ldr	r3, [pc, #228]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a38      	ldr	r2, [pc, #224]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a1 	beq.w	8001928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e6:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d05c      	beq.n	80018ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d141      	bne.n	800187e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <HAL_RCC_OscConfig+0x478>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb4c 	bl	8000e9c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb48 	bl	8000e9c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e087      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	041b      	lsls	r3, r3, #16
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	491b      	ldr	r1, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x478>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fb21 	bl	8000e9c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fb1d 	bl	8000e9c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e05c      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x416>
 800187c:	e054      	b.n	8001928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fb0a 	bl	8000e9c <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fb06 	bl	8000e9c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e045      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x444>
 80018aa:	e03d      	b.n	8001928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e038      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x4ec>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d028      	beq.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d121      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11a      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d111      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	085b      	lsrs	r3, r3, #1
 800190c:	3b01      	subs	r3, #1
 800190e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0cc      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b68      	ldr	r3, [pc, #416]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d90c      	bls.n	8001974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b65      	ldr	r3, [pc, #404]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b63      	ldr	r3, [pc, #396]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0b8      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a58      	ldr	r2, [pc, #352]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a4:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a52      	ldr	r2, [pc, #328]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	494d      	ldr	r1, [pc, #308]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d044      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d119      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d003      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f6:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e067      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4934      	ldr	r1, [pc, #208]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a28:	f7ff fa38 	bl	8000e9c <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff fa34 	bl	8000e9c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a58:	4b25      	ldr	r3, [pc, #148]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d20c      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e032      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4916      	ldr	r1, [pc, #88]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490e      	ldr	r1, [pc, #56]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f821 	bl	8001b04 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	490a      	ldr	r1, [pc, #40]	@ (8001af8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8c8 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08006c98 	.word	0x08006c98
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b094      	sub	sp, #80	@ 0x50
 8001b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1c:	4b79      	ldr	r3, [pc, #484]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d00d      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x40>
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	f200 80e1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x34>
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b36:	e0db      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b73      	ldr	r3, [pc, #460]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3c:	e0db      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3e:	4b73      	ldr	r3, [pc, #460]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b42:	e0d8      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4b6f      	ldr	r3, [pc, #444]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	2200      	movs	r2, #0
 8001b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b76:	4622      	mov	r2, r4
 8001b78:	462b      	mov	r3, r5
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4621      	mov	r1, r4
 8001b90:	1a51      	subs	r1, r2, r1
 8001b92:	6139      	str	r1, [r7, #16]
 8001b94:	4629      	mov	r1, r5
 8001b96:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ba8:	4659      	mov	r1, fp
 8001baa:	018b      	lsls	r3, r1, #6
 8001bac:	4651      	mov	r1, sl
 8001bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	018a      	lsls	r2, r1, #6
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	4699      	mov	r9, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	eb18 0303 	adds.w	r3, r8, r3
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	462b      	mov	r3, r5
 8001be4:	eb49 0303 	adc.w	r3, r9, r3
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	024b      	lsls	r3, r1, #9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c00:	4621      	mov	r1, r4
 8001c02:	024a      	lsls	r2, r1, #9
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c14:	f7fe fb26 	bl	8000264 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c20:	e058      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	464b      	mov	r3, r9
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	f04f 0100 	mov.w	r1, #0
 8001c48:	0159      	lsls	r1, r3, #5
 8001c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4e:	0150      	lsls	r0, r2, #5
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4641      	mov	r1, r8
 8001c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c74:	ebb2 040a 	subs.w	r4, r2, sl
 8001c78:	eb63 050b 	sbc.w	r5, r3, fp
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	00eb      	lsls	r3, r5, #3
 8001c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8a:	00e2      	lsls	r2, r4, #3
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	461d      	mov	r5, r3
 8001c90:	4643      	mov	r3, r8
 8001c92:	18e3      	adds	r3, r4, r3
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	464b      	mov	r3, r9
 8001c98:	eb45 0303 	adc.w	r3, r5, r3
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc8:	f7fe facc 	bl	8000264 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ce4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3750      	adds	r7, #80	@ 0x50
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08006ca8 	.word	0x08006ca8

08001d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_RCC_GetClockConfig+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0207 	and.w	r2, r3, #7
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40023c00 	.word	0x40023c00

08001db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e041      	b.n	8001e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f839 	bl	8001e52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f000 f9c0 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d001      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e04e      	b.n	8001f1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d022      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1e      	ldr	r2, [pc, #120]	@ (8001f34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a18      	ldr	r2, [pc, #96]	@ (8001f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d010      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	e007      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40010400 	.word	0x40010400
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40001800 	.word	0x40001800

08001f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0202 	mvn.w	r2, #2
 8001f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8d2 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8c4 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8d5 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d020      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01b      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0204 	mvn.w	r2, #4
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8ac 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f89e 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f8af 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d020      	beq.n	8002044 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0208 	mvn.w	r2, #8
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f886 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f878 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f889 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d020      	beq.n	8002090 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f860 	bl	800213c <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f852 	bl	8002128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f863 	bl	8002150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0201 	mvn.w	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fda0 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f906 	bl	80022e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f834 	bl	8002164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0220 	mvn.w	r2, #32
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8d8 	bl	80022d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a46      	ldr	r2, [pc, #280]	@ (80022a4 <TIM_Base_SetConfig+0x12c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a43      	ldr	r2, [pc, #268]	@ (80022a8 <TIM_Base_SetConfig+0x130>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a42      	ldr	r2, [pc, #264]	@ (80022ac <TIM_Base_SetConfig+0x134>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a41      	ldr	r2, [pc, #260]	@ (80022b0 <TIM_Base_SetConfig+0x138>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a40      	ldr	r2, [pc, #256]	@ (80022b4 <TIM_Base_SetConfig+0x13c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a35      	ldr	r2, [pc, #212]	@ (80022a4 <TIM_Base_SetConfig+0x12c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d8:	d027      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a32      	ldr	r2, [pc, #200]	@ (80022a8 <TIM_Base_SetConfig+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d023      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a31      	ldr	r2, [pc, #196]	@ (80022ac <TIM_Base_SetConfig+0x134>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a30      	ldr	r2, [pc, #192]	@ (80022b0 <TIM_Base_SetConfig+0x138>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2f      	ldr	r2, [pc, #188]	@ (80022b4 <TIM_Base_SetConfig+0x13c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2e      	ldr	r2, [pc, #184]	@ (80022b8 <TIM_Base_SetConfig+0x140>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <TIM_Base_SetConfig+0x144>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2c      	ldr	r2, [pc, #176]	@ (80022c0 <TIM_Base_SetConfig+0x148>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <TIM_Base_SetConfig+0x14c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	@ (80022c8 <TIM_Base_SetConfig+0x150>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <TIM_Base_SetConfig+0x154>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <TIM_Base_SetConfig+0x12c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0xf8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <TIM_Base_SetConfig+0x13c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
  }
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40010400 	.word	0x40010400
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800
 80022c4:	40001800 	.word	0x40001800
 80022c8:	40001c00 	.word	0x40001c00
 80022cc:	40002000 	.word	0x40002000

080022d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 0208 	add.w	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f103 0208 	add.w	r2, r3, #8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f103 0208 	add.w	r2, r3, #8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800232c:	f240 1019 	movw	r0, #281	@ 0x119
 8002330:	f004 f858 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800234a:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800234e:	f004 f849 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8002396:	f240 101b 	movw	r0, #283	@ 0x11b
 800239a:	f004 f823 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d103      	bne.n	80023c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e00c      	b.n	80023e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3308      	adds	r3, #8
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e002      	b.n	80023d4 <vListInsert+0x2e>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d2f6      	bcs.n	80023ce <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800240c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002410:	f003 ffe8 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6852      	ldr	r2, [r2, #4]
 800243c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d103      	bne.n	8002450 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f240 101d 	movw	r0, #285	@ 0x11d
 800246a:	f003 fff7 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800247a:	b580      	push	{r7, lr}
 800247c:	b08a      	sub	sp, #40	@ 0x28
 800247e:	af04      	add	r7, sp, #16
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fc3f 	bl	8003d10 <pvPortMalloc>
 8002492:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800249a:	2058      	movs	r0, #88	@ 0x58
 800249c:	f001 fc38 	bl	8003d10 <pvPortMalloc>
 80024a0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80024a8:	2258      	movs	r2, #88	@ 0x58
 80024aa:	2100      	movs	r1, #0
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f004 fb03 	bl	8006ab8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b8:	e005      	b.n	80024c6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80024ba:	6938      	ldr	r0, [r7, #16]
 80024bc:	f001 fd60 	bl	8003f80 <vPortFree>
 80024c0:	e001      	b.n	80024c6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024cc:	2300      	movs	r3, #0
 80024ce:	9303      	str	r3, [sp, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f82d 	bl	8002542 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80024e8:	697b      	ldr	r3, [r7, #20]
    }
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b088      	sub	sp, #32
 80024f6:	af02      	add	r7, sp, #8
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ffb3 	bl	800247a <prvCreateTask>
 8002514:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800251c:	6938      	ldr	r0, [r7, #16]
 800251e:	f000 f8a1 	bl	8002664 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e002      	b.n	800252e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4619      	mov	r1, r3
 8002532:	20c2      	movs	r0, #194	@ 0xc2
 8002534:	f003 ff92 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002538:	697b      	ldr	r3, [r7, #20]
    }
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b088      	sub	sp, #32
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	461a      	mov	r2, r3
 800255a:	21a5      	movs	r1, #165	@ 0xa5
 800255c:	f004 faac 	bl	8006ab8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800256a:	3b01      	subs	r3, #1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f023 0307 	bic.w	r3, r3, #7
 8002578:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	617b      	str	r3, [r7, #20]
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01e      	beq.n	80025e0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e012      	b.n	80025ce <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	7819      	ldrb	r1, [r3, #0]
 80025b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	3334      	adds	r3, #52	@ 0x34
 80025b8:	460a      	mov	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	d9e9      	bls.n	80025a8 <prvInitialiseNewTask+0x66>
 80025d4:	e000      	b.n	80025d8 <prvInitialiseNewTask+0x96>
            {
                break;
 80025d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d90b      	bls.n	80025fe <prvInitialiseNewTask+0xbc>
    __asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	613b      	str	r3, [r7, #16]
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	e7fd      	b.n	80025fa <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	2b04      	cmp	r3, #4
 8002602:	d901      	bls.n	8002608 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002604:	2304      	movs	r3, #4
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800260c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002612:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	3304      	adds	r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe8f 	bl	800233c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800261e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002620:	3318      	adds	r3, #24
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe8a 	bl	800233c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800262c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	f1c3 0205 	rsb	r2, r3, #5
 8002634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002636:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	69b8      	ldr	r0, [r7, #24]
 8002644:	f001 f834 	bl	80036b0 <pxPortInitialiseStack>
 8002648:	4602      	mov	r2, r0
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002658:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002664:	b5b0      	push	{r4, r5, r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800266c:	f001 fa22 	bl	8003ab4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <prvAddNewTaskToReadyList+0x150>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	4a4f      	ldr	r2, [pc, #316]	@ (80027b4 <prvAddNewTaskToReadyList+0x150>)
 8002678:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800267a:	4b4f      	ldr	r3, [pc, #316]	@ (80027b8 <prvAddNewTaskToReadyList+0x154>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002682:	4a4d      	ldr	r2, [pc, #308]	@ (80027b8 <prvAddNewTaskToReadyList+0x154>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002688:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <prvAddNewTaskToReadyList+0x150>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d110      	bne.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002690:	f000 fd10 	bl	80030b4 <prvInitialiseTaskLists>
 8002694:	e00d      	b.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002696:	4b49      	ldr	r3, [pc, #292]	@ (80027bc <prvAddNewTaskToReadyList+0x158>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800269e:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <prvAddNewTaskToReadyList+0x154>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d802      	bhi.n	80026b2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80026ac:	4a42      	ldr	r2, [pc, #264]	@ (80027b8 <prvAddNewTaskToReadyList+0x154>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80026b2:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <prvAddNewTaskToReadyList+0x15c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	4a41      	ldr	r2, [pc, #260]	@ (80027c0 <prvAddNewTaskToReadyList+0x15c>)
 80026ba:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026bc:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <prvAddNewTaskToReadyList+0x15c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <prvAddNewTaskToReadyList+0x94>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 ff39 	bl	8006544 <SEGGER_SYSVIEW_OnTaskCreate>
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	461d      	mov	r5, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461c      	mov	r4, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	1ae3      	subs	r3, r4, r3
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	462b      	mov	r3, r5
 80026f4:	f001 fe42 	bl	800437c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 ffa6 	bl	800664c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <prvAddNewTaskToReadyList+0x160>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <prvAddNewTaskToReadyList+0x160>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002716:	492c      	ldr	r1, [pc, #176]	@ (80027c8 <prvAddNewTaskToReadyList+0x164>)
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3304      	adds	r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	3204      	adds	r2, #4
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <prvAddNewTaskToReadyList+0x164>)
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002760:	4919      	ldr	r1, [pc, #100]	@ (80027c8 <prvAddNewTaskToReadyList+0x164>)
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002772:	1c59      	adds	r1, r3, #1
 8002774:	4814      	ldr	r0, [pc, #80]	@ (80027c8 <prvAddNewTaskToReadyList+0x164>)
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4403      	add	r3, r0
 8002780:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002782:	f001 f9c9 	bl	8003b18 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <prvAddNewTaskToReadyList+0x158>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00e      	beq.n	80027ac <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <prvAddNewTaskToReadyList+0x154>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <prvAddNewTaskToReadyList+0x148>
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <prvAddNewTaskToReadyList+0x168>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}
 80027b4:	20000174 	.word	0x20000174
 80027b8:	2000009c 	.word	0x2000009c
 80027bc:	20000180 	.word	0x20000180
 80027c0:	20000190 	.word	0x20000190
 80027c4:	2000017c 	.word	0x2000017c
 80027c8:	200000a0 	.word	0x200000a0
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d018      	beq.n	8002814 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80027e2:	f000 f98b 	bl	8002afc <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <vTaskDelay+0x68>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00b      	beq.n	8002806 <vTaskDelay+0x36>
    __asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	60bb      	str	r3, [r7, #8]
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002806:	2100      	movs	r1, #0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fec3 	bl	8003594 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800280e:	f000 f983 	bl	8002b18 <xTaskResumeAll>
 8002812:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800281a:	4b08      	ldr	r3, [pc, #32]	@ (800283c <vTaskDelay+0x6c>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800282a:	20c5      	movs	r0, #197	@ 0xc5
 800282c:	f003 fdda 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	2000019c 	.word	0x2000019c
 800283c:	e000ed04 	.word	0xe000ed04

08002840 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 8002848:	f001 f934 	bl	8003ab4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <vTaskSuspend+0x18>
 8002852:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <vTaskSuspend+0x148>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <vTaskSuspend+0x1a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <vTaskSuspend+0x3a>
    __asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	613b      	str	r3, [r7, #16]
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	e7fd      	b.n	8002876 <vTaskSuspend+0x36>

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3304      	adds	r3, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fdcc 	bl	800241c <uxListRemove>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <vTaskSuspend+0x76>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	493f      	ldr	r1, [pc, #252]	@ (800298c <vTaskSuspend+0x14c>)
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <vTaskSuspend+0x76>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	2201      	movs	r2, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	4b38      	ldr	r3, [pc, #224]	@ (8002990 <vTaskSuspend+0x150>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4013      	ands	r3, r2
 80028b2:	4a37      	ldr	r2, [pc, #220]	@ (8002990 <vTaskSuspend+0x150>)
 80028b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <vTaskSuspend+0x88>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3318      	adds	r3, #24
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fdaa 	bl	800241c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4831      	ldr	r0, [pc, #196]	@ (8002994 <vTaskSuspend+0x154>)
 80028d0:	f7ff fd43 	bl	800235a <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	e010      	b.n	80028fc <vTaskSuspend+0xbc>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	3354      	adds	r3, #84	@ 0x54
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <vTaskSuspend+0xb6>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	3354      	adds	r3, #84	@ 0x54
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	ddeb      	ble.n	80028da <vTaskSuspend+0x9a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 8002902:	f001 f909 	bl	8003b18 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 8002906:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <vTaskSuspend+0x158>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <vTaskSuspend+0xda>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 800290e:	f001 f8d1 	bl	8003ab4 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 8002912:	f000 fc4d 	bl	80031b0 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 8002916:	f001 f8ff 	bl	8003b18 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 800291a:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <vTaskSuspend+0x148>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d12a      	bne.n	800297a <vTaskSuspend+0x13a>
            {
                if( xSchedulerRunning != pdFALSE )
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <vTaskSuspend+0x158>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <vTaskSuspend+0x11e>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <vTaskSuspend+0x15c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <vTaskSuspend+0x10c>
    __asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	60fb      	str	r3, [r7, #12]
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <vTaskSuspend+0x108>
                    portYIELD_WITHIN_API();
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <vTaskSuspend+0x160>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	e00d      	b.n	800297a <vTaskSuspend+0x13a>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <vTaskSuspend+0x154>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <vTaskSuspend+0x164>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	429a      	cmp	r2, r3
 800296c:	d103      	bne.n	8002976 <vTaskSuspend+0x136>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <vTaskSuspend+0x148>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e001      	b.n	800297a <vTaskSuspend+0x13a>
                    }
                    else
                    {
                        vTaskSwitchContext();
 8002976:	f000 fb19 	bl	8002fac <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 800297a:	20ca      	movs	r0, #202	@ 0xca
 800297c:	f003 fd32 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000009c 	.word	0x2000009c
 800298c:	200000a0 	.word	0x200000a0
 8002990:	2000017c 	.word	0x2000017c
 8002994:	20000160 	.word	0x20000160
 8002998:	20000180 	.word	0x20000180
 800299c:	2000019c 	.word	0x2000019c
 80029a0:	e000ed04 	.word	0xe000ed04
 80029a4:	20000174 	.word	0x20000174

080029a8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e011      	b.n	80029ee <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80029ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <prvCreateIdleTasks+0xa0>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4413      	add	r3, r2
 80029d0:	7819      	ldrb	r1, [r3, #0]
 80029d2:	1d3a      	adds	r2, r7, #4
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80029dc:	1d3a      	adds	r2, r7, #4
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	4413      	add	r3, r2
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d9ea      	bls.n	80029ca <prvCreateIdleTasks+0x22>
 80029f4:	e000      	b.n	80029f8 <prvCreateIdleTasks+0x50>
        {
            break;
 80029f6:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4413      	add	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e015      	b.n	8002a34 <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <prvCreateIdleTasks+0xa4>)
 8002a0a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4a0f      	ldr	r2, [pc, #60]	@ (8002a50 <prvCreateIdleTasks+0xa8>)
 8002a12:	4413      	add	r3, r2
 8002a14:	1d39      	adds	r1, r7, #4
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2282      	movs	r2, #130	@ 0x82
 8002a20:	6938      	ldr	r0, [r7, #16]
 8002a22:	f7ff fd66 	bl	80024f2 <xTaskCreate>
 8002a26:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d106      	bne.n	8002a3c <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	dde6      	ble.n	8002a08 <prvCreateIdleTasks+0x60>
 8002a3a:	e000      	b.n	8002a3e <prvCreateIdleTasks+0x96>
        {
            break;
 8002a3c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	08006bd8 	.word	0x08006bd8
 8002a4c:	08003085 	.word	0x08003085
 8002a50:	20000198 	.word	0x20000198

08002a54 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002a5a:	f7ff ffa5 	bl	80029a8 <prvCreateIdleTasks>
 8002a5e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d124      	bne.n	8002ab0 <vTaskStartScheduler+0x5c>
    __asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	60bb      	str	r3, [r7, #8]
}
 8002a78:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <vTaskStartScheduler+0x90>)
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a82:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <vTaskStartScheduler+0x94>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a88:	4b18      	ldr	r3, [pc, #96]	@ (8002aec <vTaskStartScheduler+0x98>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a8e:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <vTaskStartScheduler+0x9c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <vTaskStartScheduler+0xa0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d102      	bne.n	8002aa0 <vTaskStartScheduler+0x4c>
 8002a9a:	f003 fd37 	bl	800650c <SEGGER_SYSVIEW_OnIdle>
 8002a9e:	e004      	b.n	8002aaa <vTaskStartScheduler+0x56>
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <vTaskStartScheduler+0xa0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fd8f 	bl	80065c8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002aaa:	f000 fe93 	bl	80037d4 <xPortStartScheduler>
 8002aae:	e00f      	b.n	8002ad0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d10b      	bne.n	8002ad0 <vTaskStartScheduler+0x7c>
    __asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	607b      	str	r3, [r7, #4]
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <vTaskStartScheduler+0xa4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002ad4:	20cd      	movs	r0, #205	@ 0xcd
 8002ad6:	f003 fc85 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000194 	.word	0x20000194
 8002ae8:	20000180 	.word	0x20000180
 8002aec:	20000178 	.word	0x20000178
 8002af0:	20000198 	.word	0x20000198
 8002af4:	2000009c 	.word	0x2000009c
 8002af8:	2000000c 	.word	0x2000000c

08002afc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <vTaskSuspendAll+0x18>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a03      	ldr	r2, [pc, #12]	@ (8002b14 <vTaskSuspendAll+0x18>)
 8002b08:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002b0a:	20cf      	movs	r0, #207	@ 0xcf
 8002b0c:	f003 fc6a 	bl	80063e4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000019c 	.word	0x2000019c

08002b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002b26:	f000 ffc5 	bl	8003ab4 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d18 <xTaskResumeAll+0x200>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <xTaskResumeAll+0x36>
    __asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	603b      	str	r3, [r7, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	e7fd      	b.n	8002b4a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002b4e:	4b72      	ldr	r3, [pc, #456]	@ (8002d18 <xTaskResumeAll+0x200>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	4a70      	ldr	r2, [pc, #448]	@ (8002d18 <xTaskResumeAll+0x200>)
 8002b56:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b58:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <xTaskResumeAll+0x200>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 80ce 	bne.w	8002cfe <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b62:	4b6e      	ldr	r3, [pc, #440]	@ (8002d1c <xTaskResumeAll+0x204>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80c9 	beq.w	8002cfe <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b6c:	e092      	b.n	8002c94 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d20 <xTaskResumeAll+0x208>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	6a12      	ldr	r2, [r2, #32]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	69d2      	ldr	r2, [r2, #28]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3318      	adds	r3, #24
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d103      	bne.n	8002ba4 <xTaskResumeAll+0x8c>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d103      	bne.n	8002be2 <xTaskResumeAll+0xca>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fd29 	bl	800664c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	409a      	lsls	r2, r3
 8002c02:	4b48      	ldr	r3, [pc, #288]	@ (8002d24 <xTaskResumeAll+0x20c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	4a46      	ldr	r2, [pc, #280]	@ (8002d24 <xTaskResumeAll+0x20c>)
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c10:	4945      	ldr	r1, [pc, #276]	@ (8002d28 <xTaskResumeAll+0x210>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	3204      	adds	r2, #4
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4a36      	ldr	r2, [pc, #216]	@ (8002d28 <xTaskResumeAll+0x210>)
 8002c50:	441a      	add	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	615a      	str	r2, [r3, #20]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5a:	4933      	ldr	r1, [pc, #204]	@ (8002d28 <xTaskResumeAll+0x210>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	482e      	ldr	r0, [pc, #184]	@ (8002d28 <xTaskResumeAll+0x210>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c80:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <xTaskResumeAll+0x214>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d904      	bls.n	8002c94 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002c8a:	4a29      	ldr	r2, [pc, #164]	@ (8002d30 <xTaskResumeAll+0x218>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c94:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <xTaskResumeAll+0x208>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f af68 	bne.w	8002b6e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002ca4:	f000 fa84 	bl	80031b0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <xTaskResumeAll+0x21c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002cb4:	f000 f858 	bl	8002d68 <xTaskIncrementTick>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <xTaskResumeAll+0x218>)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ef      	bne.n	8002cb4 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	@ (8002d34 <xTaskResumeAll+0x21c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002cda:	4a15      	ldr	r2, [pc, #84]	@ (8002d30 <xTaskResumeAll+0x218>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <xTaskResumeAll+0x214>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <xTaskResumeAll+0x220>)
 8002cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002cfe:	f000 ff0b 	bl	8003b18 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4619      	mov	r1, r3
 8002d06:	20d0      	movs	r0, #208	@ 0xd0
 8002d08:	f003 fba8 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000019c 	.word	0x2000019c
 8002d1c:	20000174 	.word	0x20000174
 8002d20:	20000134 	.word	0x20000134
 8002d24:	2000017c 	.word	0x2000017c
 8002d28:	200000a0 	.word	0x200000a0
 8002d2c:	2000009c 	.word	0x2000009c
 8002d30:	20000188 	.word	0x20000188
 8002d34:	20000184 	.word	0x20000184
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f000 ffa3 	bl	8003c8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <xTaskGetTickCountFromISR+0x28>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	20d2      	movs	r0, #210	@ 0xd2
 8002d54:	f003 fb82 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002d58:	683b      	ldr	r3, [r7, #0]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000178 	.word	0x20000178

08002d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d72:	4b83      	ldr	r3, [pc, #524]	@ (8002f80 <xTaskIncrementTick+0x218>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80f3 	bne.w	8002f62 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d7c:	4b81      	ldr	r3, [pc, #516]	@ (8002f84 <xTaskIncrementTick+0x21c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d84:	4a7f      	ldr	r2, [pc, #508]	@ (8002f84 <xTaskIncrementTick+0x21c>)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d121      	bne.n	8002dd4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d90:	4b7d      	ldr	r3, [pc, #500]	@ (8002f88 <xTaskIncrementTick+0x220>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	607b      	str	r3, [r7, #4]
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <xTaskIncrementTick+0x46>
 8002db2:	4b75      	ldr	r3, [pc, #468]	@ (8002f88 <xTaskIncrementTick+0x220>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	4b74      	ldr	r3, [pc, #464]	@ (8002f8c <xTaskIncrementTick+0x224>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a72      	ldr	r2, [pc, #456]	@ (8002f88 <xTaskIncrementTick+0x220>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4a72      	ldr	r2, [pc, #456]	@ (8002f8c <xTaskIncrementTick+0x224>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <xTaskIncrementTick+0x228>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a70      	ldr	r2, [pc, #448]	@ (8002f90 <xTaskIncrementTick+0x228>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	f000 f9ee 	bl	80031b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f94 <xTaskIncrementTick+0x22c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a3a      	ldr	r2, [r7, #32]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	f0c0 80ac 	bcc.w	8002f38 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de0:	4b69      	ldr	r3, [pc, #420]	@ (8002f88 <xTaskIncrementTick+0x220>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002dea:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <xTaskIncrementTick+0x22c>)
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	601a      	str	r2, [r3, #0]
                    break;
 8002df2:	e0a1      	b.n	8002f38 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002df4:	4b64      	ldr	r3, [pc, #400]	@ (8002f88 <xTaskIncrementTick+0x220>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d203      	bcs.n	8002e14 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e0c:	4a61      	ldr	r2, [pc, #388]	@ (8002f94 <xTaskIncrementTick+0x22c>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6013      	str	r3, [r2, #0]
                        break;
 8002e12:	e091      	b.n	8002f38 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	3304      	adds	r3, #4
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d103      	bne.n	8002e42 <xTaskIncrementTick+0xda>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01e      	beq.n	8002e98 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	6a12      	ldr	r2, [r2, #32]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	69d2      	ldr	r2, [r2, #28]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d103      	bne.n	8002e88 <xTaskIncrementTick+0x120>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fbd6 	bl	800664c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <xTaskIncrementTick+0x230>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	4a3a      	ldr	r2, [pc, #232]	@ (8002f98 <xTaskIncrementTick+0x230>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	4939      	ldr	r1, [pc, #228]	@ (8002f9c <xTaskIncrementTick+0x234>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	3204      	adds	r2, #4
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1d1a      	adds	r2, r3, #4
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4a29      	ldr	r2, [pc, #164]	@ (8002f9c <xTaskIncrementTick+0x234>)
 8002ef6:	441a      	add	r2, r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f00:	4926      	ldr	r1, [pc, #152]	@ (8002f9c <xTaskIncrementTick+0x234>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	4821      	ldr	r0, [pc, #132]	@ (8002f9c <xTaskIncrementTick+0x234>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4403      	add	r3, r0
 8002f20:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <xTaskIncrementTick+0x238>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f67f af57 	bls.w	8002de0 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f36:	e753      	b.n	8002de0 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <xTaskIncrementTick+0x238>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3e:	4917      	ldr	r1, [pc, #92]	@ (8002f9c <xTaskIncrementTick+0x234>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d901      	bls.n	8002f54 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002f54:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <xTaskIncrementTick+0x23c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e004      	b.n	8002f6c <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <xTaskIncrementTick+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa8 <xTaskIncrementTick+0x240>)
 8002f6a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	20db      	movs	r0, #219	@ 0xdb
 8002f72:	f003 fa73 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	@ 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	2000019c 	.word	0x2000019c
 8002f84:	20000178 	.word	0x20000178
 8002f88:	2000012c 	.word	0x2000012c
 8002f8c:	20000130 	.word	0x20000130
 8002f90:	2000018c 	.word	0x2000018c
 8002f94:	20000194 	.word	0x20000194
 8002f98:	2000017c 	.word	0x2000017c
 8002f9c:	200000a0 	.word	0x200000a0
 8002fa0:	2000009c 	.word	0x2000009c
 8002fa4:	20000188 	.word	0x20000188
 8002fa8:	20000184 	.word	0x20000184

08002fac <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <vTaskSwitchContext+0xc0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002fba:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <vTaskSwitchContext+0xc4>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002fc0:	e04f      	b.n	8003062 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <vTaskSwitchContext+0xc4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <vTaskSwitchContext+0xc8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f1c3 031f 	rsb	r3, r3, #31
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	4926      	ldr	r1, [pc, #152]	@ (8003078 <vTaskSwitchContext+0xcc>)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10b      	bne.n	800300a <vTaskSwitchContext+0x5e>
    __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <vTaskSwitchContext+0x5a>
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <vTaskSwitchContext+0xcc>)
 8003016:	4413      	add	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3308      	adds	r3, #8
 800302c:	429a      	cmp	r2, r3
 800302e:	d103      	bne.n	8003038 <vTaskSwitchContext+0x8c>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a0f      	ldr	r2, [pc, #60]	@ (800307c <vTaskSwitchContext+0xd0>)
 8003040:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <vTaskSwitchContext+0xd4>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <vTaskSwitchContext+0xd0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d102      	bne.n	8003054 <vTaskSwitchContext+0xa8>
 800304e:	f003 fa5d 	bl	800650c <SEGGER_SYSVIEW_OnIdle>
 8003052:	e004      	b.n	800305e <vTaskSwitchContext+0xb2>
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <vTaskSwitchContext+0xd0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fab5 	bl	80065c8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <vTaskSwitchContext+0xd0>)
 8003060:	681b      	ldr	r3, [r3, #0]
    }
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000019c 	.word	0x2000019c
 8003070:	20000188 	.word	0x20000188
 8003074:	2000017c 	.word	0x2000017c
 8003078:	200000a0 	.word	0x200000a0
 800307c:	2000009c 	.word	0x2000009c
 8003080:	20000198 	.word	0x20000198

08003084 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800308c:	f000 f852 	bl	8003134 <prvCheckTasksWaitingTermination>
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */

        	if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <prvIdleTask+0x28>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d9f9      	bls.n	800308c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <prvIdleTask+0x2c>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030a8:	e7f0      	b.n	800308c <prvIdleTask+0x8>
 80030aa:	bf00      	nop
 80030ac:	200000a0 	.word	0x200000a0
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	e00c      	b.n	80030da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <prvInitialiseTaskLists+0x60>)
 80030cc:	4413      	add	r3, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f912 	bl	80022f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3301      	adds	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d9ef      	bls.n	80030c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030e0:	480d      	ldr	r0, [pc, #52]	@ (8003118 <prvInitialiseTaskLists+0x64>)
 80030e2:	f7ff f909 	bl	80022f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030e6:	480d      	ldr	r0, [pc, #52]	@ (800311c <prvInitialiseTaskLists+0x68>)
 80030e8:	f7ff f906 	bl	80022f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030ec:	480c      	ldr	r0, [pc, #48]	@ (8003120 <prvInitialiseTaskLists+0x6c>)
 80030ee:	f7ff f903 	bl	80022f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80030f2:	480c      	ldr	r0, [pc, #48]	@ (8003124 <prvInitialiseTaskLists+0x70>)
 80030f4:	f7ff f900 	bl	80022f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80030f8:	480b      	ldr	r0, [pc, #44]	@ (8003128 <prvInitialiseTaskLists+0x74>)
 80030fa:	f7ff f8fd 	bl	80022f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <prvInitialiseTaskLists+0x78>)
 8003100:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <prvInitialiseTaskLists+0x64>)
 8003102:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003104:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <prvInitialiseTaskLists+0x7c>)
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <prvInitialiseTaskLists+0x68>)
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200000a0 	.word	0x200000a0
 8003118:	20000104 	.word	0x20000104
 800311c:	20000118 	.word	0x20000118
 8003120:	20000134 	.word	0x20000134
 8003124:	20000148 	.word	0x20000148
 8003128:	20000160 	.word	0x20000160
 800312c:	2000012c 	.word	0x2000012c
 8003130:	20000130 	.word	0x20000130

08003134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800313a:	e019      	b.n	8003170 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800313c:	f000 fcba 	bl	8003ab4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <prvCheckTasksWaitingTermination+0x50>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f965 	bl	800241c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003152:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <prvCheckTasksWaitingTermination+0x54>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	4a0b      	ldr	r2, [pc, #44]	@ (8003188 <prvCheckTasksWaitingTermination+0x54>)
 800315a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <prvCheckTasksWaitingTermination+0x58>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <prvCheckTasksWaitingTermination+0x58>)
 8003164:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003166:	f000 fcd7 	bl	8003b18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f810 	bl	8003190 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <prvCheckTasksWaitingTermination+0x58>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e1      	bne.n	800313c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000148 	.word	0x20000148
 8003188:	20000174 	.word	0x20000174
 800318c:	2000015c 	.word	0x2000015c

08003190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	4618      	mov	r0, r3
 800319e:	f000 feef 	bl	8003f80 <vPortFree>
            vPortFree( pxTCB );
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 feec 	bl	8003f80 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <prvResetNextTaskUnblockTime+0x30>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <prvResetNextTaskUnblockTime+0x34>)
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031c6:	e005      	b.n	80031d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <prvResetNextTaskUnblockTime+0x30>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <prvResetNextTaskUnblockTime+0x34>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000012c 	.word	0x2000012c
 80031e4:	20000194 	.word	0x20000194

080031e8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <xTaskGenericNotifyWait+0x2c>

        /* If the task hasn't received a notification, and if we are willing to wait
         * for it, then block the task and wait. */
        if( ( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED ) && ( xTicksToWait > ( TickType_t ) 0 ) )
 8003218:	4b42      	ldr	r3, [pc, #264]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	3354      	adds	r3, #84	@ 0x54
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d03f      	beq.n	80032aa <xTaskGenericNotifyWait+0xc2>
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03c      	beq.n	80032aa <xTaskGenericNotifyWait+0xc2>
        {
            /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
             * non-deterministic operation. */
            vTaskSuspendAll();
 8003230:	f7ff fc64 	bl	8002afc <vTaskSuspendAll>
            {
                /* We MUST enter a critical section to atomically check and update the
                 * task notification value. If we do not do so, a notification from
                 * an ISR will get lost. */
                taskENTER_CRITICAL();
 8003234:	f000 fc3e 	bl	8003ab4 <vPortEnterCritical>
                {
                    /* Only block if a notification is not already pending. */
                    if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003238:	4b3a      	ldr	r3, [pc, #232]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	3354      	adds	r3, #84	@ 0x54
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d015      	beq.n	8003276 <xTaskGenericNotifyWait+0x8e>
                    {
                        /* Clear bits in the task's notification value as bits may get
                         * set by the notifying task or interrupt. This can be used
                         * to clear the value to zero. */
                        pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800324a:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	3214      	adds	r2, #20
 8003252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	43d2      	mvns	r2, r2
 800325a:	4011      	ands	r1, r2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	3214      	adds	r2, #20
 8003260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        /* Mark this task as waiting for a notification. */
                        pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003264:	4b2f      	ldr	r3, [pc, #188]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	3354      	adds	r3, #84	@ 0x54
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]

                        /* Arrange to wait for a notification. */
                        xShouldBlock = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	61bb      	str	r3, [r7, #24]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 8003276:	f000 fc4f 	bl	8003b18 <vPortExitCritical>

                /* We are now out of the critical section but the scheduler is still
                 * suspended, so we are safe to do non-deterministic operations such
                 * as prvAddCurrentTaskToDelayedList. */
                if( xShouldBlock == pdTRUE )
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d103      	bne.n	8003288 <xTaskGenericNotifyWait+0xa0>
                {
                    traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003280:	2101      	movs	r1, #1
 8003282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003284:	f000 f986 	bl	8003594 <prvAddCurrentTaskToDelayedList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            xAlreadyYielded = xTaskResumeAll();
 8003288:	f7ff fc46 	bl	8002b18 <xTaskResumeAll>
 800328c:	6178      	str	r0, [r7, #20]

            /* Force a reschedule if xTaskResumeAll has not already done so. */
            if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d10a      	bne.n	80032aa <xTaskGenericNotifyWait+0xc2>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d107      	bne.n	80032aa <xTaskGenericNotifyWait+0xc2>
            {
                taskYIELD_WITHIN_API();
 800329a:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <xTaskGenericNotifyWait+0x140>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	f3bf 8f6f 	isb	sy
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        taskENTER_CRITICAL();
 80032aa:	f000 fc03 	bl	8003ab4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <xTaskGenericNotifyWait+0xdc>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80032b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	3214      	adds	r2, #20
 80032bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	3354      	adds	r3, #84	@ 0x54
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d002      	beq.n	80032dc <xTaskGenericNotifyWait+0xf4>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	e00e      	b.n	80032fa <xTaskGenericNotifyWait+0x112>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	3214      	adds	r2, #20
 80032e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	43d2      	mvns	r2, r2
 80032ec:	4011      	ands	r1, r2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	3214      	adds	r2, #20
 80032f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <xTaskGenericNotifyWait+0x13c>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	3354      	adds	r3, #84	@ 0x54
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003308:	f000 fc06 	bl	8003b18 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4619      	mov	r1, r3
 8003310:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003314:	f003 f8a2 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003318:	69fb      	ldr	r3, [r7, #28]
    }
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000009c 	.word	0x2000009c
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	@ 0x38
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800333a:	2301      	movs	r3, #1
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <xTaskGenericNotify+0x30>
    __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	623b      	str	r3, [r7, #32]
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <xTaskGenericNotify+0x4e>
    __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61fb      	str	r3, [r7, #28]
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	e7fd      	b.n	8003376 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800337e:	f000 fb99 	bl	8003ab4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	3214      	adds	r2, #20
 800338e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003394:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4413      	add	r3, r2
 800339c:	3354      	adds	r3, #84	@ 0x54
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80033a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	3354      	adds	r3, #84	@ 0x54
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d83b      	bhi.n	800342e <xTaskGenericNotify+0x102>
 80033b6:	a201      	add	r2, pc, #4	@ (adr r2, 80033bc <xTaskGenericNotify+0x90>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	0800344f 	.word	0x0800344f
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	08003405 	.word	0x08003405
 80033cc:	08003413 	.word	0x08003413
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	3214      	adds	r2, #20
 80033d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	ea42 0103 	orr.w	r1, r2, r3
 80033e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	3214      	adds	r2, #20
 80033e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033ea:	e033      	b.n	8003454 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	3214      	adds	r2, #20
 80033f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	3214      	adds	r2, #20
 80033fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003402:	e027      	b.n	8003454 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	3214      	adds	r2, #20
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003410:	e020      	b.n	8003454 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003416:	2b02      	cmp	r3, #2
 8003418:	d006      	beq.n	8003428 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	3214      	adds	r2, #20
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003426:	e015      	b.n	8003454 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8003428:	2300      	movs	r3, #0
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800342c:	e012      	b.n	8003454 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800342e:	4b54      	ldr	r3, [pc, #336]	@ (8003580 <xTaskGenericNotify+0x254>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <xTaskGenericNotify+0x126>
    __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	61bb      	str	r3, [r7, #24]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <xTaskGenericNotify+0x11e>
                    break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <xTaskGenericNotify+0x128>

                    break;
 8003452:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8083 	bne.w	8003564 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346a:	68d2      	ldr	r2, [r2, #12]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	3304      	adds	r3, #4
 8003480:	429a      	cmp	r2, r3
 8003482:	d103      	bne.n	800348c <xTaskGenericNotify+0x160>
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 f8d4 	bl	800664c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	4b35      	ldr	r3, [pc, #212]	@ (8003584 <xTaskGenericNotify+0x258>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	4a34      	ldr	r2, [pc, #208]	@ (8003584 <xTaskGenericNotify+0x258>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	4933      	ldr	r1, [pc, #204]	@ (8003588 <xTaskGenericNotify+0x25c>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3304      	adds	r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e0:	3204      	adds	r2, #4
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	1d1a      	adds	r2, r3, #4
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <xTaskGenericNotify+0x25c>)
 80034fa:	441a      	add	r2, r3
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	615a      	str	r2, [r3, #20]
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	4920      	ldr	r1, [pc, #128]	@ (8003588 <xTaskGenericNotify+0x25c>)
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003514:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	481b      	ldr	r0, [pc, #108]	@ (8003588 <xTaskGenericNotify+0x25c>)
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <xTaskGenericNotify+0x21a>
    __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	617b      	str	r3, [r7, #20]
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	e7fd      	b.n	8003542 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <xTaskGenericNotify+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <xTaskGenericNotify+0x238>
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <xTaskGenericNotify+0x264>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003564:	f000 fad8 	bl	8003b18 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	4619      	mov	r1, r3
 800356c:	f240 1001 	movw	r0, #257	@ 0x101
 8003570:	f002 ff74 	bl	800645c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003576:	4618      	mov	r0, r3
 8003578:	3738      	adds	r7, #56	@ 0x38
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000178 	.word	0x20000178
 8003584:	2000017c 	.word	0x2000017c
 8003588:	200000a0 	.word	0x200000a0
 800358c:	2000009c 	.word	0x2000009c
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <prvAddCurrentTaskToDelayedList+0x100>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80035a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <prvAddCurrentTaskToDelayedList+0x104>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80035aa:	4b3c      	ldr	r3, [pc, #240]	@ (800369c <prvAddCurrentTaskToDelayedList+0x108>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b0:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe ff30 	bl	800241c <uxListRemove>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035c2:	4b37      	ldr	r3, [pc, #220]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	2201      	movs	r2, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	4b34      	ldr	r3, [pc, #208]	@ (80036a4 <prvAddCurrentTaskToDelayedList+0x110>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4013      	ands	r3, r2
 80035d6:	4a33      	ldr	r2, [pc, #204]	@ (80036a4 <prvAddCurrentTaskToDelayedList+0x110>)
 80035d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d124      	bne.n	800362c <prvAddCurrentTaskToDelayedList+0x98>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d021      	beq.n	800362c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e8:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0x114>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	4b2c      	ldr	r3, [pc, #176]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	6892      	ldr	r2, [r2, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	3204      	adds	r2, #4
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a23      	ldr	r2, [pc, #140]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0x114>)
 800361c:	615a      	str	r2, [r3, #20]
 800361e:	4b22      	ldr	r3, [pc, #136]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0x114>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a20      	ldr	r2, [pc, #128]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0x114>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800362a:	e02e      	b.n	800368a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003634:	4b1a      	ldr	r3, [pc, #104]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d20d      	bcs.n	8003660 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003644:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2104      	movs	r1, #4
 800364a:	4618      	mov	r0, r3
 800364c:	f003 f840 	bl	80066d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f7fe fea4 	bl	80023a6 <vListInsert>
}
 800365e:	e014      	b.n	800368a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2104      	movs	r1, #4
 8003666:	4618      	mov	r0, r3
 8003668:	f003 f832 	bl	80066d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800366c:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3304      	adds	r3, #4
 8003672:	4619      	mov	r1, r3
 8003674:	69b8      	ldr	r0, [r7, #24]
 8003676:	f7fe fe96 	bl	80023a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <prvAddCurrentTaskToDelayedList+0x118>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d202      	bcs.n	800368a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003684:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <prvAddCurrentTaskToDelayedList+0x118>)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6013      	str	r3, [r2, #0]
}
 800368a:	bf00      	nop
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000178 	.word	0x20000178
 8003698:	2000012c 	.word	0x2000012c
 800369c:	20000130 	.word	0x20000130
 80036a0:	2000009c 	.word	0x2000009c
 80036a4:	2000017c 	.word	0x2000017c
 80036a8:	20000160 	.word	0x20000160
 80036ac:	20000194 	.word	0x20000194

080036b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b04      	subs	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b04      	subs	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 0201 	bic.w	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3b04      	subs	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80036e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003714 <pxPortInitialiseStack+0x64>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b14      	subs	r3, #20
 80036ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b04      	subs	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f06f 0202 	mvn.w	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b20      	subs	r3, #32
 8003704:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	08003719 	.word	0x08003719

08003718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <prvTaskExitError+0x58>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d00b      	beq.n	8003744 <prvTaskExitError+0x2c>
    __asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	60fb      	str	r3, [r7, #12]
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <prvTaskExitError+0x28>
    __asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	60bb      	str	r3, [r7, #8]
}
 8003756:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003758:	bf00      	nop
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0fc      	beq.n	800375a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000010 	.word	0x20000010
	...

08003780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003780:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <pxCurrentTCBConst2>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	6808      	ldr	r0, [r1, #0]
 8003786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	f380 8809 	msr	PSP, r0
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	4770      	bx	lr
 800379c:	f3af 8000 	nop.w

080037a0 <pxCurrentTCBConst2>:
 80037a0:	2000009c 	.word	0x2000009c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop

080037a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80037a8:	4808      	ldr	r0, [pc, #32]	@ (80037cc <prvPortStartFirstTask+0x24>)
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	6800      	ldr	r0, [r0, #0]
 80037ae:	f380 8808 	msr	MSP, r0
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8814 	msr	CONTROL, r0
 80037ba:	b662      	cpsie	i
 80037bc:	b661      	cpsie	f
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	df00      	svc	0
 80037c8:	bf00      	nop
 80037ca:	0000      	.short	0x0000
 80037cc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop

080037d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037da:	4b69      	ldr	r3, [pc, #420]	@ (8003980 <xPortStartScheduler+0x1ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a69      	ldr	r2, [pc, #420]	@ (8003984 <xPortStartScheduler+0x1b0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10b      	bne.n	80037fc <xPortStartScheduler+0x28>
    __asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037fc:	4b60      	ldr	r3, [pc, #384]	@ (8003980 <xPortStartScheduler+0x1ac>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a61      	ldr	r2, [pc, #388]	@ (8003988 <xPortStartScheduler+0x1b4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10b      	bne.n	800381e <xPortStartScheduler+0x4a>
    __asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	623b      	str	r3, [r7, #32]
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800381e:	4b5b      	ldr	r3, [pc, #364]	@ (800398c <xPortStartScheduler+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	332c      	adds	r3, #44	@ 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a59      	ldr	r2, [pc, #356]	@ (8003990 <xPortStartScheduler+0x1bc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00b      	beq.n	8003848 <xPortStartScheduler+0x74>
    __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	61fb      	str	r3, [r7, #28]
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384a:	3338      	adds	r3, #56	@ 0x38
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a51      	ldr	r2, [pc, #324]	@ (8003994 <xPortStartScheduler+0x1c0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00b      	beq.n	800386c <xPortStartScheduler+0x98>
    __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003870:	4b49      	ldr	r3, [pc, #292]	@ (8003998 <xPortStartScheduler+0x1c4>)
 8003872:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	22ff      	movs	r2, #255	@ 0xff
 8003880:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b41      	ldr	r3, [pc, #260]	@ (800399c <xPortStartScheduler+0x1c8>)
 8003896:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003898:	4b40      	ldr	r3, [pc, #256]	@ (800399c <xPortStartScheduler+0x1c8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <xPortStartScheduler+0xe4>
    __asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	617b      	str	r3, [r7, #20]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <xPortStartScheduler+0x11a>
    __asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	613b      	str	r3, [r7, #16]
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	e7fd      	b.n	80038da <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f6:	2b80      	cmp	r3, #128	@ 0x80
 80038f8:	d0f1      	beq.n	80038de <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d103      	bne.n	8003908 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003900:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e004      	b.n	8003912 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	4a24      	ldr	r2, [pc, #144]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 8003910:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003912:	4b23      	ldr	r3, [pc, #140]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 800391a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800391c:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003924:	4a1e      	ldr	r2, [pc, #120]	@ (80039a0 <xPortStartScheduler+0x1cc>)
 8003926:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003930:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <xPortStartScheduler+0x1d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <xPortStartScheduler+0x1d0>)
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800393a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <xPortStartScheduler+0x1d0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a18      	ldr	r2, [pc, #96]	@ (80039a4 <xPortStartScheduler+0x1d0>)
 8003942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003946:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <xPortStartScheduler+0x1d4>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800394e:	f000 f96d 	bl	8003c2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003952:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <xPortStartScheduler+0x1d8>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003958:	f000 f98c 	bl	8003c74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800395c:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <xPortStartScheduler+0x1dc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <xPortStartScheduler+0x1dc>)
 8003962:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003968:	f7ff ff1e 	bl	80037a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800396c:	f7ff fb1e 	bl	8002fac <vTaskSwitchContext>
    prvTaskExitError();
 8003970:	f7ff fed2 	bl	8003718 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3730      	adds	r7, #48	@ 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00
 8003984:	410fc271 	.word	0x410fc271
 8003988:	410fc270 	.word	0x410fc270
 800398c:	e000ed08 	.word	0xe000ed08
 8003990:	08003781 	.word	0x08003781
 8003994:	08003b71 	.word	0x08003b71
 8003998:	e000e400 	.word	0xe000e400
 800399c:	200001a0 	.word	0x200001a0
 80039a0:	200001a4 	.word	0x200001a4
 80039a4:	e000ed20 	.word	0xe000ed20
 80039a8:	e000ed1c 	.word	0xe000ed1c
 80039ac:	20000010 	.word	0x20000010
 80039b0:	e000ef34 	.word	0xe000ef34

080039b4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039ba:	4b38      	ldr	r3, [pc, #224]	@ (8003a9c <vInitPrioGroupValue+0xe8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a38      	ldr	r2, [pc, #224]	@ (8003aa0 <vInitPrioGroupValue+0xec>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10b      	bne.n	80039dc <vInitPrioGroupValue+0x28>
    __asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	613b      	str	r3, [r7, #16]
}
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
 80039da:	e7fd      	b.n	80039d8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039dc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a9c <vInitPrioGroupValue+0xe8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	@ (8003aa4 <vInitPrioGroupValue+0xf0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10b      	bne.n	80039fe <vInitPrioGroupValue+0x4a>
    __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60fb      	str	r3, [r7, #12]
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	e7fd      	b.n	80039fa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039fe:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa8 <vInitPrioGroupValue+0xf4>)
 8003a00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	22ff      	movs	r2, #255	@ 0xff
 8003a0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <vInitPrioGroupValue+0xf8>)
 8003a24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a26:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a2c:	e009      	b.n	8003a42 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003a2e:	4b20      	ldr	r3, [pc, #128]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4a:	2b80      	cmp	r3, #128	@ 0x80
 8003a4c:	d0ef      	beq.n	8003a2e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a4e:	4b18      	ldr	r3, [pc, #96]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00b      	beq.n	8003a72 <vInitPrioGroupValue+0xbe>
    __asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60bb      	str	r3, [r7, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	e7fd      	b.n	8003a6e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a72:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a7a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a84:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <vInitPrioGroupValue+0xfc>)
 8003a86:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	410fc271 	.word	0x410fc271
 8003aa4:	410fc270 	.word	0x410fc270
 8003aa8:	e000e400 	.word	0xe000e400
 8003aac:	200001a0 	.word	0x200001a0
 8003ab0:	200001a4 	.word	0x200001a4

08003ab4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
    __asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <vPortEnterCritical+0x5c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8003b10 <vPortEnterCritical+0x5c>)
 8003ad6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <vPortEnterCritical+0x5c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d110      	bne.n	8003b02 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <vPortEnterCritical+0x60>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <vPortEnterCritical+0x4e>
    __asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <vPortEnterCritical+0x4a>
    }
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000010 	.word	0x20000010
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b1e:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <vPortExitCritical+0x50>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <vPortExitCritical+0x26>
    __asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	607b      	str	r3, [r7, #4]
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	e7fd      	b.n	8003b3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <vPortExitCritical+0x50>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	4a08      	ldr	r2, [pc, #32]	@ (8003b68 <vPortExitCritical+0x50>)
 8003b46:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <vPortExitCritical+0x50>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <vPortExitCritical+0x44>
 8003b50:	2300      	movs	r3, #0
 8003b52:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003b5a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20000010 	.word	0x20000010
 8003b6c:	00000000 	.word	0x00000000

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff fa04 	bl	8002fac <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	2000009c 	.word	0x2000009c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
    __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003bf2:	f002 fb7d 	bl	80062f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003bf6:	f7ff f8b7 	bl	8002d68 <xTaskIncrementTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003c00:	f002 fbd4 	bl	80063ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <SysTick_Handler+0x50>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e001      	b.n	8003c12 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8003c0e:	f002 fbb1 	bl	8006374 <SEGGER_SYSVIEW_RecordExitISR>
 8003c12:	2300      	movs	r3, #0
 8003c14:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f383 8811 	msr	BASEPRI, r3
}
 8003c1c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <vPortSetupTimerInterrupt+0x34>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <vPortSetupTimerInterrupt+0x38>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <vPortSetupTimerInterrupt+0x3c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	@ (8003c6c <vPortSetupTimerInterrupt+0x40>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <vPortSetupTimerInterrupt+0x44>)
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c4e:	4b04      	ldr	r3, [pc, #16]	@ (8003c60 <vPortSetupTimerInterrupt+0x34>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e010 	.word	0xe000e010
 8003c64:	e000e018 	.word	0xe000e018
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	10624dd3 	.word	0x10624dd3
 8003c70:	e000e014 	.word	0xe000e014

08003c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c84 <vPortEnableVFP+0x10>
 8003c78:	6801      	ldr	r1, [r0, #0]
 8003c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c7e:	6001      	str	r1, [r0, #0]
 8003c80:	4770      	bx	lr
 8003c82:	0000      	.short	0x0000
 8003c84:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop

08003c8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003c92:	f3ef 8305 	mrs	r3, IPSR
 8003c96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	d915      	bls.n	8003cca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c9e:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <vPortValidateInterruptPriority+0x74>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ca8:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <vPortValidateInterruptPriority+0x78>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	7afa      	ldrb	r2, [r7, #11]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d20b      	bcs.n	8003cca <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	607b      	str	r3, [r7, #4]
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <vPortValidateInterruptPriority+0x7c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <vPortValidateInterruptPriority+0x80>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d90b      	bls.n	8003cf2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	603b      	str	r3, [r7, #0]
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <vPortValidateInterruptPriority+0x62>
    }
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e3f0 	.word	0xe000e3f0
 8003d04:	200001a0 	.word	0x200001a0
 8003d08:	e000ed0c 	.word	0xe000ed0c
 8003d0c:	200001a4 	.word	0x200001a4

08003d10 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08e      	sub	sp, #56	@ 0x38
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d022      	beq.n	8003d6c <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003d26:	2308      	movs	r3, #8
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d81b      	bhi.n	8003d68 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003d30:	2208      	movs	r2, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	f1c3 0308 	rsb	r3, r3, #8
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	43db      	mvns	r3, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d804      	bhi.n	8003d62 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	4413      	add	r3, r2
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	e004      	b.n	8003d6c <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	e001      	b.n	8003d6c <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003d6c:	f7fe fec6 	bl	8002afc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d70:	4b7c      	ldr	r3, [pc, #496]	@ (8003f64 <pvPortMalloc+0x254>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8003d78:	f000 f97c 	bl	8004074 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f2c0 80d7 	blt.w	8003f32 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80d3 	beq.w	8003f32 <pvPortMalloc+0x222>
 8003d8c:	4b76      	ldr	r3, [pc, #472]	@ (8003f68 <pvPortMalloc+0x258>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	f200 80cd 	bhi.w	8003f32 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d98:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <pvPortMalloc+0x25c>)
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003d9c:	4b73      	ldr	r3, [pc, #460]	@ (8003f6c <pvPortMalloc+0x25c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da4:	4a72      	ldr	r2, [pc, #456]	@ (8003f70 <pvPortMalloc+0x260>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d305      	bcc.n	8003db6 <pvPortMalloc+0xa6>
 8003daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dac:	4a71      	ldr	r2, [pc, #452]	@ (8003f74 <pvPortMalloc+0x264>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d801      	bhi.n	8003db6 <pvPortMalloc+0xa6>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <pvPortMalloc+0xa8>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d129      	bne.n	8003e10 <pvPortMalloc+0x100>
    __asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	61fb      	str	r3, [r7, #28]
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	e7fd      	b.n	8003dd0 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	4a63      	ldr	r2, [pc, #396]	@ (8003f70 <pvPortMalloc+0x260>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d305      	bcc.n	8003df2 <pvPortMalloc+0xe2>
 8003de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de8:	4a62      	ldr	r2, [pc, #392]	@ (8003f74 <pvPortMalloc+0x264>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d801      	bhi.n	8003df2 <pvPortMalloc+0xe2>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <pvPortMalloc+0xe4>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <pvPortMalloc+0x100>
    __asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	61bb      	str	r3, [r7, #24]
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d903      	bls.n	8003e22 <pvPortMalloc+0x112>
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1d8      	bne.n	8003dd4 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e22:	4b50      	ldr	r3, [pc, #320]	@ (8003f64 <pvPortMalloc+0x254>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f000 8082 	beq.w	8003f32 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2208      	movs	r2, #8
 8003e34:	4413      	add	r3, r2
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f70 <pvPortMalloc+0x260>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d305      	bcc.n	8003e4c <pvPortMalloc+0x13c>
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	4a4c      	ldr	r2, [pc, #304]	@ (8003f74 <pvPortMalloc+0x264>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d801      	bhi.n	8003e4c <pvPortMalloc+0x13c>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <pvPortMalloc+0x13e>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <pvPortMalloc+0x15a>
    __asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	617b      	str	r3, [r7, #20]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d90b      	bls.n	8003e94 <pvPortMalloc+0x184>
    __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	613b      	str	r3, [r7, #16]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d924      	bls.n	8003eee <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <pvPortMalloc+0x1be>
    __asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	1ad2      	subs	r2, r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003eee:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <pvPortMalloc+0x258>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <pvPortMalloc+0x258>)
 8003efa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <pvPortMalloc+0x258>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <pvPortMalloc+0x268>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d203      	bcs.n	8003f10 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <pvPortMalloc+0x258>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f78 <pvPortMalloc+0x268>)
 8003f0e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f20:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f28:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <pvPortMalloc+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <pvPortMalloc+0x26c>)
 8003f30:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8003f32:	f7fe fdf1 	bl	8002b18 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <pvPortMalloc+0x248>
    __asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60bb      	str	r3, [r7, #8]
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <pvPortMalloc+0x244>
    return pvReturn;
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3738      	adds	r7, #56	@ 0x38
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20012db0 	.word	0x20012db0
 8003f68:	20012db4 	.word	0x20012db4
 8003f6c:	20012da8 	.word	0x20012da8
 8003f70:	200001a8 	.word	0x200001a8
 8003f74:	20012da7 	.word	0x20012da7
 8003f78:	20012db8 	.word	0x20012db8
 8003f7c:	20012dbc 	.word	0x20012dbc

08003f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d064      	beq.n	800405c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003f92:	2308      	movs	r3, #8
 8003f94:	425b      	negs	r3, r3
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	4a30      	ldr	r2, [pc, #192]	@ (8004064 <vPortFree+0xe4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d305      	bcc.n	8003fb4 <vPortFree+0x34>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	@ (8004068 <vPortFree+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d801      	bhi.n	8003fb4 <vPortFree+0x34>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <vPortFree+0x36>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <vPortFree+0x52>
    __asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	617b      	str	r3, [r7, #20]
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	e7fd      	b.n	8003fce <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db0b      	blt.n	8003ff2 <vPortFree+0x72>
    __asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	613b      	str	r3, [r7, #16]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <vPortFree+0x92>
    __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	0fdb      	lsrs	r3, r3, #31
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01c      	beq.n	800405c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d118      	bne.n	800405c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004036:	f7fe fd61 	bl	8002afc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <vPortFree+0xec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4413      	add	r3, r2
 8004044:	4a09      	ldr	r2, [pc, #36]	@ (800406c <vPortFree+0xec>)
 8004046:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004048:	69b8      	ldr	r0, [r7, #24]
 800404a:	f000 f86d 	bl	8004128 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800404e:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <vPortFree+0xf0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a06      	ldr	r2, [pc, #24]	@ (8004070 <vPortFree+0xf0>)
 8004056:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004058:	f7fe fd5e 	bl	8002b18 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200001a8 	.word	0x200001a8
 8004068:	20012da7 	.word	0x20012da7
 800406c:	20012db4 	.word	0x20012db4
 8004070:	20012dc0 	.word	0x20012dc0

08004074 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800407a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800407e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004080:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <prvHeapInit+0xa0>)
 8004082:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3307      	adds	r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004114 <prvHeapInit+0xa0>)
 80040a4:	4413      	add	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <prvHeapInit+0xa4>)
 80040ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80040ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <prvHeapInit+0xa4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80040bc:	2208      	movs	r2, #8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <prvHeapInit+0xa8>)
 80040d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <prvHeapInit+0xa8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80040da:	4b10      	ldr	r3, [pc, #64]	@ (800411c <prvHeapInit+0xa8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvHeapInit+0xa8>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <prvHeapInit+0xac>)
 80040fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <prvHeapInit+0xb0>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	200001a8 	.word	0x200001a8
 8004118:	20012da8 	.word	0x20012da8
 800411c:	20012db0 	.word	0x20012db0
 8004120:	20012db8 	.word	0x20012db8
 8004124:	20012db4 	.word	0x20012db4

08004128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004130:	4b36      	ldr	r3, [pc, #216]	@ (800420c <prvInsertBlockIntoFreeList+0xe4>)
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e002      	b.n	800413c <prvInsertBlockIntoFreeList+0x14>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d8f7      	bhi.n	8004136 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4a30      	ldr	r2, [pc, #192]	@ (800420c <prvInsertBlockIntoFreeList+0xe4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <prvInsertBlockIntoFreeList+0xe8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d305      	bcc.n	8004162 <prvInsertBlockIntoFreeList+0x3a>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <prvInsertBlockIntoFreeList+0xec>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d801      	bhi.n	8004162 <prvInsertBlockIntoFreeList+0x3a>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <prvInsertBlockIntoFreeList+0x3c>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60fb      	str	r3, [r7, #12]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d108      	bne.n	80041a4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	441a      	add	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	441a      	add	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d118      	bne.n	80041ea <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b16      	ldr	r3, [pc, #88]	@ (8004218 <prvInsertBlockIntoFreeList+0xf0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d00d      	beq.n	80041e0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	441a      	add	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e008      	b.n	80041f2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80041e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <prvInsertBlockIntoFreeList+0xf0>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e003      	b.n	80041f2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d002      	beq.n	8004200 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20012da8 	.word	0x20012da8
 8004210:	200001a8 	.word	0x200001a8
 8004214:	20012da7 	.word	0x20012da7
 8004218:	20012db0 	.word	0x20012db0

0800421c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004220:	4803      	ldr	r0, [pc, #12]	@ (8004230 <_cbSendSystemDesc+0x14>)
 8004222:	f002 f80f 	bl	8006244 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004226:	4803      	ldr	r0, [pc, #12]	@ (8004234 <_cbSendSystemDesc+0x18>)
 8004228:	f002 f80c 	bl	8006244 <SEGGER_SYSVIEW_SendSysDesc>
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08006be0 	.word	0x08006be0
 8004234:	08006c14 	.word	0x08006c14

08004238 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <SEGGER_SYSVIEW_Conf+0x20>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <SEGGER_SYSVIEW_Conf+0x20>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <SEGGER_SYSVIEW_Conf+0x24>)
 8004246:	4a06      	ldr	r2, [pc, #24]	@ (8004260 <SEGGER_SYSVIEW_Conf+0x28>)
 8004248:	f001 fc80 	bl	8005b4c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800424c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004250:	f001 fcc0 	bl	8005bd4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000000 	.word	0x20000000
 800425c:	0800421d 	.word	0x0800421d
 8004260:	08006cb0 	.word	0x08006cb0

08004264 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	b085      	sub	sp, #20
 8004268:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	e033      	b.n	80042d8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004270:	491e      	ldr	r1, [pc, #120]	@ (80042ec <_cbSendTaskList+0x88>)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	491a      	ldr	r1, [pc, #104]	@ (80042ec <_cbSendTaskList+0x88>)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	3304      	adds	r3, #4
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	4c16      	ldr	r4, [pc, #88]	@ (80042ec <_cbSendTaskList+0x88>)
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4423      	add	r3, r4
 80042a0:	3308      	adds	r3, #8
 80042a2:	681c      	ldr	r4, [r3, #0]
 80042a4:	4d11      	ldr	r5, [pc, #68]	@ (80042ec <_cbSendTaskList+0x88>)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	442b      	add	r3, r5
 80042b2:	330c      	adds	r3, #12
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	4e0d      	ldr	r6, [pc, #52]	@ (80042ec <_cbSendTaskList+0x88>)
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4433      	add	r3, r6
 80042c4:	3310      	adds	r3, #16
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	462b      	mov	r3, r5
 80042cc:	4622      	mov	r2, r4
 80042ce:	f000 f8bd 	bl	800444c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3301      	adds	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <_cbSendTaskList+0x8c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3c6      	bcc.n	8004270 <_cbSendTaskList+0xc>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ec:	20012dc4 	.word	0x20012dc4
 80042f0:	20012e64 	.word	0x20012e64

080042f4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80042fc:	f7fe fd1e 	bl	8002d3c <xTaskGetTickCountFromISR>
 8004300:	4603      	mov	r3, r0
 8004302:	2200      	movs	r2, #0
 8004304:	469a      	mov	sl, r3
 8004306:	4693      	mov	fp, r2
 8004308:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800430c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	f04f 0a00 	mov.w	sl, #0
 8004318:	f04f 0b00 	mov.w	fp, #0
 800431c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004320:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004324:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004328:	4652      	mov	r2, sl
 800432a:	465b      	mov	r3, fp
 800432c:	1a14      	subs	r4, r2, r0
 800432e:	eb63 0501 	sbc.w	r5, r3, r1
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	00ab      	lsls	r3, r5, #2
 800433c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004340:	00a2      	lsls	r2, r4, #2
 8004342:	4614      	mov	r4, r2
 8004344:	461d      	mov	r5, r3
 8004346:	eb14 0800 	adds.w	r8, r4, r0
 800434a:	eb45 0901 	adc.w	r9, r5, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800435e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004362:	4690      	mov	r8, r2
 8004364:	4699      	mov	r9, r3
 8004366:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800436a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800437c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800438a:	2205      	movs	r2, #5
 800438c:	492b      	ldr	r1, [pc, #172]	@ (800443c <SYSVIEW_AddTask+0xc0>)
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f002 fb82 	bl	8006a98 <memcmp>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04b      	beq.n	8004432 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800439a:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b07      	cmp	r3, #7
 80043a0:	d903      	bls.n	80043aa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80043a2:	4828      	ldr	r0, [pc, #160]	@ (8004444 <SYSVIEW_AddTask+0xc8>)
 80043a4:	f002 faee 	bl	8006984 <SEGGER_SYSVIEW_Warn>
    return;
 80043a8:	e044      	b.n	8004434 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80043aa:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4926      	ldr	r1, [pc, #152]	@ (8004448 <SYSVIEW_AddTask+0xcc>)
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80043be:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4921      	ldr	r1, [pc, #132]	@ (8004448 <SYSVIEW_AddTask+0xcc>)
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3304      	adds	r3, #4
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80043d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	491b      	ldr	r1, [pc, #108]	@ (8004448 <SYSVIEW_AddTask+0xcc>)
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3308      	adds	r3, #8
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4916      	ldr	r1, [pc, #88]	@ (8004448 <SYSVIEW_AddTask+0xcc>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	330c      	adds	r3, #12
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004400:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4910      	ldr	r1, [pc, #64]	@ (8004448 <SYSVIEW_AddTask+0xcc>)
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3310      	adds	r3, #16
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a08      	ldr	r2, [pc, #32]	@ (8004440 <SYSVIEW_AddTask+0xc4>)
 800441e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f80e 	bl	800444c <SYSVIEW_SendTaskInfo>
 8004430:	e000      	b.n	8004434 <SYSVIEW_AddTask+0xb8>
    return;
 8004432:	bf00      	nop

}
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	08006c24 	.word	0x08006c24
 8004440:	20012e64 	.word	0x20012e64
 8004444:	08006c2c 	.word	0x08006c2c
 8004448:	20012dc4 	.word	0x20012dc4

0800444c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	@ 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	2218      	movs	r2, #24
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f002 fb28 	bl	8006ab8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fde7 	bl	8006054 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004486:	bf00      	nop
 8004488:	3728      	adds	r7, #40	@ 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <__NVIC_EnableIRQ>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db0b      	blt.n	80044ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4907      	ldr	r1, [pc, #28]	@ (80044c8 <__NVIC_EnableIRQ+0x38>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2001      	movs	r0, #1
 80044b2:	fa00 f202 	lsl.w	r2, r0, r2
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e100 	.word	0xe000e100

080044cc <__NVIC_SetPriority>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db0a      	blt.n	80044f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	490c      	ldr	r1, [pc, #48]	@ (8004518 <__NVIC_SetPriority+0x4c>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044f4:	e00a      	b.n	800450c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4908      	ldr	r1, [pc, #32]	@ (800451c <__NVIC_SetPriority+0x50>)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3b04      	subs	r3, #4
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	440b      	add	r3, r1
 800450a:	761a      	strb	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004526:	f002 fa89 	bl	8006a3c <SEGGER_SYSVIEW_IsStarted>
 800452a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004532:	f001 fc13 	bl	8005d5c <SEGGER_SYSVIEW_Start>
  }
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <_cbOnUARTRx+0x3c>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d806      	bhi.n	8004560 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <_cbOnUARTRx+0x3c>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b08      	ldr	r3, [pc, #32]	@ (800457c <_cbOnUARTRx+0x3c>)
 800455c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800455e:	e009      	b.n	8004574 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004560:	f7ff ffde 	bl	8004520 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <_cbOnUARTRx+0x3c>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	2201      	movs	r2, #1
 800456e:	4619      	mov	r1, r3
 8004570:	f000 fb9c 	bl	8004cac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004574:	bf00      	nop
}
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000014 	.word	0x20000014

08004580 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004588:	4b14      	ldr	r3, [pc, #80]	@ (80045dc <_cbOnUARTTx+0x5c>)
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d80f      	bhi.n	80045b0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004590:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <_cbOnUARTTx+0x5c>)
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	461a      	mov	r2, r3
 8004596:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <_cbOnUARTTx+0x60>)
 8004598:	5c9a      	ldrb	r2, [r3, r2]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800459e:	4b0f      	ldr	r3, [pc, #60]	@ (80045dc <_cbOnUARTTx+0x5c>)
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <_cbOnUARTTx+0x5c>)
 80045a8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
    goto Done;
 80045ae:	e00f      	b.n	80045d0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80045b0:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <_cbOnUARTTx+0x5c>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fa1b 	bl	80049f4 <SEGGER_RTT_ReadUpBufferNoLock>
 80045be:	4603      	mov	r3, r0
 80045c0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da02      	bge.n	80045ce <_cbOnUARTTx+0x4e>
    r = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e000      	b.n	80045d0 <_cbOnUARTTx+0x50>
  }
Done:
 80045ce:	bf00      	nop
  return r;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000014 	.word	0x20000014
 80045e0:	08006cb8 	.word	0x08006cb8

080045e4 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80045ec:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <SEGGER_UART_init+0x1c>)
 80045ee:	4905      	ldr	r1, [pc, #20]	@ (8004604 <SEGGER_UART_init+0x20>)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f863 	bl	80046bc <HIF_UART_Init>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	08004541 	.word	0x08004541
 8004604:	08004581 	.word	0x08004581

08004608 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <USART2_IRQHandler+0x80>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800461e:	4b1b      	ldr	r3, [pc, #108]	@ (800468c <USART2_IRQHandler+0x84>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 030b 	and.w	r3, r3, #11
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004630:	4b17      	ldr	r3, [pc, #92]	@ (8004690 <USART2_IRQHandler+0x88>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004638:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <USART2_IRQHandler+0x88>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	79fa      	ldrb	r2, [r7, #7]
 800463e:	4610      	mov	r0, r2
 8004640:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01a      	beq.n	8004682 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800464c:	4b11      	ldr	r3, [pc, #68]	@ (8004694 <USART2_IRQHandler+0x8c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004654:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <USART2_IRQHandler+0x8c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1dfa      	adds	r2, r7, #7
 800465a:	4610      	mov	r0, r2
 800465c:	4798      	blx	r3
 800465e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004666:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <USART2_IRQHandler+0x90>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a0b      	ldr	r2, [pc, #44]	@ (8004698 <USART2_IRQHandler+0x90>)
 800466c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e006      	b.n	8004682 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004674:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <USART2_IRQHandler+0x80>)
 8004676:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004678:	79fa      	ldrb	r2, [r7, #7]
 800467a:	4b04      	ldr	r3, [pc, #16]	@ (800468c <USART2_IRQHandler+0x84>)
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e000      	b.n	8004682 <USART2_IRQHandler+0x7a>
      return;
 8004680:	bf00      	nop
    }
  }
}
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40004400 	.word	0x40004400
 800468c:	40004404 	.word	0x40004404
 8004690:	20012e68 	.word	0x20012e68
 8004694:	20012e6c 	.word	0x20012e6c
 8004698:	4000440c 	.word	0x4000440c

0800469c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a04      	ldr	r2, [pc, #16]	@ (80046b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80046a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	4000440c 	.word	0x4000440c

080046bc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80046c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <HIF_UART_Init+0xc8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <HIF_UART_Init+0xc8>)
 80046ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80046d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <HIF_UART_Init+0xcc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <HIF_UART_Init+0xcc>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80046e0:	4b2a      	ldr	r3, [pc, #168]	@ (800478c <HIF_UART_Init+0xd0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ec:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80046f4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80046f6:	4a25      	ldr	r2, [pc, #148]	@ (800478c <HIF_UART_Init+0xd0>)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80046fc:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HIF_UART_Init+0xd4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004708:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004710:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004712:	4a1f      	ldr	r2, [pc, #124]	@ (8004790 <HIF_UART_Init+0xd4>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HIF_UART_Init+0xd8>)
 800471a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800471e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004720:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HIF_UART_Init+0xdc>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004726:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HIF_UART_Init+0xe0>)
 8004728:	2280      	movs	r2, #128	@ 0x80
 800472a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HIF_UART_Init+0xe4>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	3301      	adds	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474a:	d302      	bcc.n	8004752 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800474c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004750:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4a11      	ldr	r2, [pc, #68]	@ (80047a4 <HIF_UART_Init+0xe8>)
 800475e:	b29b      	uxth	r3, r3
 8004760:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004762:	4a11      	ldr	r2, [pc, #68]	@ (80047a8 <HIF_UART_Init+0xec>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004768:	4a10      	ldr	r2, [pc, #64]	@ (80047ac <HIF_UART_Init+0xf0>)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800476e:	2106      	movs	r1, #6
 8004770:	2026      	movs	r0, #38	@ 0x26
 8004772:	f7ff feab 	bl	80044cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004776:	2026      	movs	r0, #38	@ 0x26
 8004778:	f7ff fe8a 	bl	8004490 <__NVIC_EnableIRQ>
}
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023840 	.word	0x40023840
 8004788:	40023830 	.word	0x40023830
 800478c:	40020020 	.word	0x40020020
 8004790:	40020000 	.word	0x40020000
 8004794:	4000440c 	.word	0x4000440c
 8004798:	40004410 	.word	0x40004410
 800479c:	40004414 	.word	0x40004414
 80047a0:	0501bd00 	.word	0x0501bd00
 80047a4:	40004408 	.word	0x40004408
 80047a8:	20012e68 	.word	0x20012e68
 80047ac:	20012e6c 	.word	0x20012e6c

080047b0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80047b6:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <_DoInit+0xa0>)
 80047b8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80047ba:	22a8      	movs	r2, #168	@ 0xa8
 80047bc:	2100      	movs	r1, #0
 80047be:	6838      	ldr	r0, [r7, #0]
 80047c0:	f002 f97a 	bl	8006ab8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2203      	movs	r2, #3
 80047c8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2203      	movs	r2, #3
 80047ce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4a20      	ldr	r2, [pc, #128]	@ (8004854 <_DoInit+0xa4>)
 80047d4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <_DoInit+0xa8>)
 80047da:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047e2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <_DoInit+0xa4>)
 80047fa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	@ (800485c <_DoInit+0xac>)
 8004800:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2210      	movs	r2, #16
 8004806:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800481a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	e00c      	b.n	800483e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1c3 030f 	rsb	r3, r3, #15
 800482a:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <_DoInit+0xb0>)
 800482c:	5cd1      	ldrb	r1, [r2, r3]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	460a      	mov	r2, r1
 8004836:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3301      	adds	r3, #1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b0f      	cmp	r3, #15
 8004842:	d9ef      	bls.n	8004824 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004844:	f3bf 8f5f 	dmb	sy
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20012e70 	.word	0x20012e70
 8004854:	08006c7c 	.word	0x08006c7c
 8004858:	20012f18 	.word	0x20012f18
 800485c:	20013318 	.word	0x20013318
 8004860:	08006cbc 	.word	0x08006cbc

08004864 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	@ 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d905      	bls.n	8004894 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	e007      	b.n	80048a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	4413      	add	r3, r2
 80048a0:	3b01      	subs	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bf28      	it	cs
 80048b2:	4613      	movcs	r3, r2
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80048b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4293      	cmp	r3, r2
 80048bc:	bf28      	it	cs
 80048be:	4613      	movcs	r3, r2
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80048cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	6978      	ldr	r0, [r7, #20]
 80048d2:	f002 f91d 	bl	8006b10 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	4413      	add	r3, r2
 80048dc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	4413      	add	r3, r2
 80048e4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	4413      	add	r3, r2
 80048f4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d101      	bne.n	8004904 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004904:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1b2      	bne.n	800487a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004914:	6a3b      	ldr	r3, [r7, #32]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3728      	adds	r7, #40	@ 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d911      	bls.n	8004966 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	6938      	ldr	r0, [r7, #16]
 8004952:	f002 f8dd 	bl	8006b10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004956:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004964:	e01f      	b.n	80049a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6938      	ldr	r0, [r7, #16]
 800497a:	f002 f8c9 	bl	8006b10 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4413      	add	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4619      	mov	r1, r3
 8004996:	6938      	ldr	r0, [r7, #16]
 8004998:	f002 f8ba 	bl	8006b10 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800499c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	60da      	str	r2, [r3, #12]
}
 80049a6:	bf00      	nop
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d808      	bhi.n	80049dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	3b01      	subs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e004      	b.n	80049e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80049e6:	697b      	ldr	r3, [r7, #20]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004a00:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b53      	cmp	r3, #83	@ 0x53
 8004a0c:	d001      	beq.n	8004a12 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004a0e:	f7ff fecf 	bl	80047b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4a37      	ldr	r2, [pc, #220]	@ (8004afc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d92b      	bls.n	8004a98 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf28      	it	cs
 8004a52:	4613      	movcs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	4413      	add	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	6939      	ldr	r1, [r7, #16]
 8004a64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a66:	f002 f853 	bl	8006b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4413      	add	r3, r2
 8004a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	4413      	add	r3, r2
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4413      	add	r3, r2
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d101      	bne.n	8004a98 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf28      	it	cs
 8004aa8:	4613      	movcs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d019      	beq.n	8004ae6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	4413      	add	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6939      	ldr	r1, [r7, #16]
 8004ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ac2:	f002 f825 	bl	8006b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4413      	add	r3, r2
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3730      	adds	r7, #48	@ 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20012e70 	.word	0x20012e70

08004b00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	@ 0x30
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c08 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b53      	cmp	r3, #83	@ 0x53
 8004b18:	d001      	beq.n	8004b1e <SEGGER_RTT_ReadNoLock+0x1e>
 8004b1a:	f7ff fe49 	bl	80047b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	3360      	adds	r3, #96	@ 0x60
 8004b2a:	4a37      	ldr	r2, [pc, #220]	@ (8004c08 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004b40:	2300      	movs	r3, #0
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d92b      	bls.n	8004ba4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	bf28      	it	cs
 8004b5e:	4613      	movcs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	4413      	add	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b72:	f001 ffcd 	bl	8006b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4413      	add	r3, r2
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d101      	bne.n	8004ba4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bf28      	it	cs
 8004bb4:	4613      	movcs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d019      	beq.n	8004bf2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	4413      	add	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bce:	f001 ff9f 	bl	8006b10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bfc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3730      	adds	r7, #48	@ 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20012e70 	.word	0x20012e70

08004c0c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	3360      	adds	r3, #96	@ 0x60
 8004c28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d029      	beq.n	8004c8a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d82e      	bhi.n	8004c98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d013      	beq.n	8004c6a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004c42:	e029      	b.n	8004c98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7ff feb2 	bl	80049ae <_GetAvailWriteSpace>
 8004c4a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d202      	bcs.n	8004c5a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004c58:	e021      	b.n	8004c9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff fe5b 	bl	800491e <_WriteNoCheck>
    break;
 8004c68:	e019      	b.n	8004c9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7ff fe9f 	bl	80049ae <_GetAvailWriteSpace>
 8004c70:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bf28      	it	cs
 8004c7a:	4613      	movcs	r3, r2
 8004c7c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	6978      	ldr	r0, [r7, #20]
 8004c84:	f7ff fe4b 	bl	800491e <_WriteNoCheck>
    break;
 8004c88:	e009      	b.n	8004c9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff fde8 	bl	8004864 <_WriteBlocking>
 8004c94:	61f8      	str	r0, [r7, #28]
    break;
 8004c96:	e002      	b.n	8004c9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
    break;
 8004c9c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20012e70 	.word	0x20012e70

08004cac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b53      	cmp	r3, #83	@ 0x53
 8004cc4:	d001      	beq.n	8004cca <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004cc6:	f7ff fd73 	bl	80047b0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004cca:	f3ef 8311 	mrs	r3, BASEPRI
 8004cce:	f04f 0120 	mov.w	r1, #32
 8004cd2:	f381 8811 	msr	BASEPRI, r1
 8004cd6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff ff95 	bl	8004c0c <SEGGER_RTT_WriteDownBufferNoLock>
 8004ce2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004cea:	697b      	ldr	r3, [r7, #20]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20012e70 	.word	0x20012e70

08004cf8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d06:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b53      	cmp	r3, #83	@ 0x53
 8004d12:	d001      	beq.n	8004d18 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d14:	f7ff fd4c 	bl	80047b0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d18:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1c:	f04f 0120 	mov.w	r1, #32
 8004d20:	f381 8811 	msr	BASEPRI, r1
 8004d24:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d26:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d28:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	4613      	mov	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3304      	adds	r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	dbeb      	blt.n	8004d2e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004d56:	e000      	b.n	8004d5a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004d58:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	da3f      	bge.n	8004de4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004d64:	6939      	ldr	r1, [r7, #16]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	440b      	add	r3, r1
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004d78:	6939      	ldr	r1, [r7, #16]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	440b      	add	r3, r1
 8004d88:	3304      	adds	r3, #4
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3320      	adds	r3, #32
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004da2:	6939      	ldr	r1, [r7, #16]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	3328      	adds	r3, #40	@ 0x28
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004db6:	6939      	ldr	r1, [r7, #16]
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3324      	adds	r3, #36	@ 0x24
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004dca:	6939      	ldr	r1, [r7, #16]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	440b      	add	r3, r1
 8004dd8:	332c      	adds	r3, #44	@ 0x2c
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dde:	f3bf 8f5f 	dmb	sy
 8004de2:	e002      	b.n	8004dea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004df0:	69fb      	ldr	r3, [r7, #28]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20012e70 	.word	0x20012e70

08004e00 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	@ 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004e0e:	4b21      	ldr	r3, [pc, #132]	@ (8004e94 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b53      	cmp	r3, #83	@ 0x53
 8004e1a:	d001      	beq.n	8004e20 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e1c:	f7ff fcc8 	bl	80047b0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e20:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e22:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d82c      	bhi.n	8004e84 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2e:	f04f 0120 	mov.w	r1, #32
 8004e32:	f381 8811 	msr	BASEPRI, r1
 8004e36:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	3360      	adds	r3, #96	@ 0x60
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e72:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e74:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e82:	e002      	b.n	8004e8a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	@ 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20012e70 	.word	0x20012e70

08004e98 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	60fa      	str	r2, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e022      	b.n	8004efc <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	60fa      	str	r2, [r7, #12]
 8004ec0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b80      	cmp	r3, #128	@ 0x80
 8004ec6:	d90a      	bls.n	8004ede <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004ecc:	e007      	b.n	8004ede <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	1c53      	adds	r3, r2, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	60f9      	str	r1, [r7, #12]
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <_EncodeStr+0x58>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ee      	bne.n	8004ece <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3307      	adds	r3, #7
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f2a:	4b34      	ldr	r3, [pc, #208]	@ (8004ffc <_HandleIncomingPacket+0xd8>)
 8004f2c:	7e1b      	ldrb	r3, [r3, #24]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	1cfb      	adds	r3, r7, #3
 8004f32:	2201      	movs	r2, #1
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7ff fde3 	bl	8004b00 <SEGGER_RTT_ReadNoLock>
 8004f3a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d057      	beq.n	8004ff2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d031      	beq.n	8004fac <_HandleIncomingPacket+0x88>
 8004f48:	2b80      	cmp	r3, #128	@ 0x80
 8004f4a:	dc40      	bgt.n	8004fce <_HandleIncomingPacket+0xaa>
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	dc15      	bgt.n	8004f7c <_HandleIncomingPacket+0x58>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dd3c      	ble.n	8004fce <_HandleIncomingPacket+0xaa>
 8004f54:	3b01      	subs	r3, #1
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d839      	bhi.n	8004fce <_HandleIncomingPacket+0xaa>
 8004f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <_HandleIncomingPacket+0x3c>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004f8f 	.word	0x08004f8f
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fa7 	.word	0x08004fa7
 8004f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7e:	d033      	beq.n	8004fe8 <_HandleIncomingPacket+0xc4>
 8004f80:	e025      	b.n	8004fce <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004f82:	f000 feeb 	bl	8005d5c <SEGGER_SYSVIEW_Start>
      break;
 8004f86:	e034      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004f88:	f000 ffa4 	bl	8005ed4 <SEGGER_SYSVIEW_Stop>
      break;
 8004f8c:	e031      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004f8e:	f001 f97d 	bl	800628c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004f92:	e02e      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004f94:	f001 f942 	bl	800621c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004f98:	e02b      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004f9a:	f000 ffc1 	bl	8005f20 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004f9e:	e028      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004fa0:	f001 fc9e 	bl	80068e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004fa4:	e025      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004fa6:	f001 fc7d 	bl	80068a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004faa:	e022      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fac:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <_HandleIncomingPacket+0xd8>)
 8004fae:	7e1b      	ldrb	r3, [r3, #24]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	1cfb      	adds	r3, r7, #3
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7ff fda2 	bl	8004b00 <SEGGER_RTT_ReadNoLock>
 8004fbc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fbe2 	bl	8006790 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004fcc:	e00e      	b.n	8004fec <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da0c      	bge.n	8004ff0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <_HandleIncomingPacket+0xd8>)
 8004fd8:	7e1b      	ldrb	r3, [r3, #24]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	1cfb      	adds	r3, r7, #3
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f7ff fd8d 	bl	8004b00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004fe6:	e003      	b.n	8004ff0 <_HandleIncomingPacket+0xcc>
      break;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
      break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <_HandleIncomingPacket+0xce>
      break;
 8004ff0:	bf00      	nop
    }
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20013b30 	.word	0x20013b30

08005000 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	@ 0x30
 8005004:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005006:	2301      	movs	r3, #1
 8005008:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005014:	4b32      	ldr	r3, [pc, #200]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501a:	e00b      	b.n	8005034 <_TrySendOverflowPacket+0x34>
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005026:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005030:	09db      	lsrs	r3, r3, #7
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	2b7f      	cmp	r3, #127	@ 0x7f
 8005038:	d8f0      	bhi.n	800501c <_TrySendOverflowPacket+0x1c>
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005048:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800504a:	4b26      	ldr	r3, [pc, #152]	@ (80050e4 <_TrySendOverflowPacket+0xe4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005050:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	e00b      	b.n	800507c <_TrySendOverflowPacket+0x7c>
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	6279      	str	r1, [r7, #36]	@ 0x24
 800506e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	09db      	lsrs	r3, r3, #7
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005080:	d8f0      	bhi.n	8005064 <_TrySendOverflowPacket+0x64>
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	627a      	str	r2, [r7, #36]	@ 0x24
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	4618      	mov	r0, r3
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	f7fb f894 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80050a8:	4603      	mov	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80050ac:	f7ff faf6 	bl	800469c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80050bc:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e004      	b.n	80050d4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	3301      	adds	r3, #1
 80050d0:	4a03      	ldr	r2, [pc, #12]	@ (80050e0 <_TrySendOverflowPacket+0xe0>)
 80050d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80050d4:	693b      	ldr	r3, [r7, #16]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3730      	adds	r7, #48	@ 0x30
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20013b30 	.word	0x20013b30
 80050e4:	e0001004 	.word	0xe0001004

080050e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	@ 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80050f4:	4b96      	ldr	r3, [pc, #600]	@ (8005350 <_SendPacket+0x268>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d010      	beq.n	800511e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80050fc:	4b94      	ldr	r3, [pc, #592]	@ (8005350 <_SendPacket+0x268>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8130 	beq.w	8005366 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005106:	4b92      	ldr	r3, [pc, #584]	@ (8005350 <_SendPacket+0x268>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d109      	bne.n	8005122 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800510e:	f7ff ff77 	bl	8005000 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005112:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <_SendPacket+0x268>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	f040 8127 	bne.w	800536a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800511c:	e001      	b.n	8005122 <_SendPacket+0x3a>
    goto Send;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <_SendPacket+0x3c>
Send:
 8005122:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b1f      	cmp	r3, #31
 8005128:	d809      	bhi.n	800513e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800512a:	4b89      	ldr	r3, [pc, #548]	@ (8005350 <_SendPacket+0x268>)
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8118 	bne.w	800536e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b17      	cmp	r3, #23
 8005142:	d807      	bhi.n	8005154 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e0c4      	b.n	80052de <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005160:	d912      	bls.n	8005188 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	09da      	lsrs	r2, r3, #7
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	3a01      	subs	r2, #1
 800517a:	60fa      	str	r2, [r7, #12]
 800517c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e006      	b.n	8005196 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3b01      	subs	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b7e      	cmp	r3, #126	@ 0x7e
 800519a:	d807      	bhi.n	80051ac <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e098      	b.n	80052de <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b2:	d212      	bcs.n	80051da <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	09da      	lsrs	r2, r3, #7
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	3a01      	subs	r2, #1
 80051cc:	60fa      	str	r2, [r7, #12]
 80051ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e081      	b.n	80052de <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051e0:	d21d      	bcs.n	800521e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0b9a      	lsrs	r2, r3, #14
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	3a01      	subs	r2, #1
 80051fc:	60fa      	str	r2, [r7, #12]
 80051fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	3a01      	subs	r2, #1
 8005210:	60fa      	str	r2, [r7, #12]
 8005212:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e05f      	b.n	80052de <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005224:	d228      	bcs.n	8005278 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0d5a      	lsrs	r2, r3, #21
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b01      	subs	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0b9b      	lsrs	r3, r3, #14
 800523a:	b2db      	uxtb	r3, r3
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	3a01      	subs	r2, #1
 8005240:	60fa      	str	r2, [r7, #12]
 8005242:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	09db      	lsrs	r3, r3, #7
 8005250:	b2db      	uxtb	r3, r3
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	3a01      	subs	r2, #1
 8005256:	60fa      	str	r2, [r7, #12]
 8005258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	3a01      	subs	r2, #1
 800526a:	60fa      	str	r2, [r7, #12]
 800526c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e032      	b.n	80052de <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0f1a      	lsrs	r2, r3, #28
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0d5b      	lsrs	r3, r3, #21
 800528c:	b2db      	uxtb	r3, r3
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	3a01      	subs	r2, #1
 8005292:	60fa      	str	r2, [r7, #12]
 8005294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0b9b      	lsrs	r3, r3, #14
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	3a01      	subs	r2, #1
 80052a8:	60fa      	str	r2, [r7, #12]
 80052aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	09db      	lsrs	r3, r3, #7
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	3a01      	subs	r2, #1
 80052be:	60fa      	str	r2, [r7, #12]
 80052c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	3a01      	subs	r2, #1
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052de:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <_SendPacket+0x26c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <_SendPacket+0x268>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	e00b      	b.n	8005310 <_SendPacket+0x228>
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	1c59      	adds	r1, r3, #1
 8005300:	6279      	str	r1, [r7, #36]	@ 0x24
 8005302:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	09db      	lsrs	r3, r3, #7
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b7f      	cmp	r3, #127	@ 0x7f
 8005314:	d8f0      	bhi.n	80052f8 <_SendPacket+0x210>
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	627a      	str	r2, [r7, #36]	@ 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <_SendPacket+0x268>)
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	4618      	mov	r0, r3
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	461a      	mov	r2, r3
 8005334:	68f9      	ldr	r1, [r7, #12]
 8005336:	f7fa ff4b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800533a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800533c:	f7ff f9ae 	bl	800469c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005346:	4a02      	ldr	r2, [pc, #8]	@ (8005350 <_SendPacket+0x268>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	60d3      	str	r3, [r2, #12]
 800534c:	e010      	b.n	8005370 <_SendPacket+0x288>
 800534e:	bf00      	nop
 8005350:	20013b30 	.word	0x20013b30
 8005354:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <_SendPacket+0x2d8>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b17      	ldr	r3, [pc, #92]	@ (80053c0 <_SendPacket+0x2d8>)
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e004      	b.n	8005370 <_SendPacket+0x288>
    goto SendDone;
 8005366:	bf00      	nop
 8005368:	e002      	b.n	8005370 <_SendPacket+0x288>
      goto SendDone;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <_SendPacket+0x288>
      goto SendDone;
 800536e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005370:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <_SendPacket+0x2d8>)
 8005372:	7e1b      	ldrb	r3, [r3, #24]
 8005374:	4619      	mov	r1, r3
 8005376:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <_SendPacket+0x2dc>)
 8005378:	460b      	mov	r3, r1
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	440b      	add	r3, r1
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	336c      	adds	r3, #108	@ 0x6c
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b0e      	ldr	r3, [pc, #56]	@ (80053c0 <_SendPacket+0x2d8>)
 8005388:	7e1b      	ldrb	r3, [r3, #24]
 800538a:	4618      	mov	r0, r3
 800538c:	490d      	ldr	r1, [pc, #52]	@ (80053c4 <_SendPacket+0x2dc>)
 800538e:	4603      	mov	r3, r0
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4403      	add	r3, r0
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	440b      	add	r3, r1
 8005398:	3370      	adds	r3, #112	@ 0x70
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d00b      	beq.n	80053b8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053a0:	4b07      	ldr	r3, [pc, #28]	@ (80053c0 <_SendPacket+0x2d8>)
 80053a2:	789b      	ldrb	r3, [r3, #2]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <_SendPacket+0x2d8>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053ae:	f7ff fdb9 	bl	8004f24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053b2:	4b03      	ldr	r3, [pc, #12]	@ (80053c0 <_SendPacket+0x2d8>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053b8:	bf00      	nop
 80053ba:	3728      	adds	r7, #40	@ 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20013b30 	.word	0x20013b30
 80053c4:	20012e70 	.word	0x20012e70

080053c8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d80a      	bhi.n	80053f8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6051      	str	r1, [r2, #4]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b80      	cmp	r3, #128	@ 0x80
 80053fe:	d15a      	bne.n	80054b6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	e00b      	b.n	800543a <_StoreChar+0x72>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	6279      	str	r1, [r7, #36]	@ 0x24
 800542c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	09db      	lsrs	r3, r3, #7
 8005438:	623b      	str	r3, [r7, #32]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	2b7f      	cmp	r3, #127	@ 0x7f
 800543e:	d8f0      	bhi.n	8005422 <_StoreChar+0x5a>
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	627a      	str	r2, [r7, #36]	@ 0x24
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e00b      	b.n	8005472 <_StoreChar+0xaa>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	61f9      	str	r1, [r7, #28]
 8005464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	09db      	lsrs	r3, r3, #7
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b7f      	cmp	r3, #127	@ 0x7f
 8005476:	d8f0      	bhi.n	800545a <_StoreChar+0x92>
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	221a      	movs	r2, #26
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe29 	bl	80050e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fd35 	bl	8004f0a <_PreparePacket>
 80054a0:	4602      	mov	r2, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
  }
}
 80054b6:	bf00      	nop
 80054b8:	3728      	adds	r7, #40	@ 0x28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	@ 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80054d2:	2301      	movs	r3, #1
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80054da:	e007      	b.n	80054ec <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	623b      	str	r3, [r7, #32]
    Width++;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d2f3      	bcs.n	80054dc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d901      	bls.n	8005500 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d000      	beq.n	800550c <_PrintUnsigned+0x4c>
 800550a:	e01f      	b.n	800554c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01c      	beq.n	800554c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <_PrintUnsigned+0x68>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <_PrintUnsigned+0x68>
        c = '0';
 8005522:	2330      	movs	r3, #48	@ 0x30
 8005524:	76fb      	strb	r3, [r7, #27]
 8005526:	e001      	b.n	800552c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005528:	2320      	movs	r3, #32
 800552a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800552c:	e007      	b.n	800553e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	3b01      	subs	r3, #1
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005534:	7efb      	ldrb	r3, [r7, #27]
 8005536:	4619      	mov	r1, r3
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff45 	bl	80053c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <_PrintUnsigned+0x8c>
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	429a      	cmp	r2, r3
 800554a:	d3f0      	bcc.n	800552e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d903      	bls.n	800555a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3b01      	subs	r3, #1
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	e009      	b.n	800556e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d200      	bcs.n	800556e <_PrintUnsigned+0xae>
        break;
 800556c:	e005      	b.n	800557a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005578:	e7e8      	b.n	800554c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005592:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <_PrintUnsigned+0x128>)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff ff13 	bl	80053c8 <_StoreChar>
    Digit /= Base;
 80055a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055c2:	e006      	b.n	80055d2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	3b01      	subs	r3, #1
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80055ca:	2120      	movs	r1, #32
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fefb 	bl	80053c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <_PrintUnsigned+0x120>
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3f1      	bcc.n	80055c4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3728      	adds	r7, #40	@ 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	08006cdc 	.word	0x08006cdc

080055ec <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfb8      	it	lt
 8005600:	425b      	neglt	r3, r3
 8005602:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005608:	e007      	b.n	800561a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]
    Width++;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	daf3      	bge.n	800560a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	429a      	cmp	r2, r3
 8005628:	d901      	bls.n	800562e <_PrintInt+0x42>
    Width = NumDigits;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <_PrintInt+0x5e>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	db04      	blt.n	8005644 <_PrintInt+0x58>
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <_PrintInt+0x5e>
    FieldWidth--;
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	3b01      	subs	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <_PrintInt+0x6e>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d016      	beq.n	8005688 <_PrintInt+0x9c>
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d111      	bne.n	8005688 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00e      	beq.n	8005688 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800566a:	e006      	b.n	800567a <_PrintInt+0x8e>
        FieldWidth--;
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	3b01      	subs	r3, #1
 8005670:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005672:	2120      	movs	r1, #32
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fea7 	bl	80053c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <_PrintInt+0x9c>
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	429a      	cmp	r2, r3
 8005686:	d3f1      	bcc.n	800566c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da07      	bge.n	800569e <_PrintInt+0xb2>
    v = -v;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	425b      	negs	r3, r3
 8005692:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005694:	212d      	movs	r1, #45	@ 0x2d
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe96 	bl	80053c8 <_StoreChar>
 800569c:	e008      	b.n	80056b0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80056a8:	212b      	movs	r1, #43	@ 0x2b
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fe8c 	bl	80053c8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <_PrintInt+0x102>
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d114      	bne.n	80056ee <_PrintInt+0x102>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d111      	bne.n	80056ee <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056d0:	e006      	b.n	80056e0 <_PrintInt+0xf4>
        FieldWidth--;
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80056d8:	2130      	movs	r1, #48	@ 0x30
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fe74 	bl	80053c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <_PrintInt+0x102>
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3f1      	bcc.n	80056d2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f7ff fedf 	bl	80054c0 <_PrintUnsigned>
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b098      	sub	sp, #96	@ 0x60
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005718:	f3ef 8311 	mrs	r3, BASEPRI
 800571c:	f04f 0120 	mov.w	r1, #32
 8005720:	f381 8811 	msr	BASEPRI, r1
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005726:	48b7      	ldr	r0, [pc, #732]	@ (8005a04 <_VPrintTarget+0x2f8>)
 8005728:	f7ff fbef 	bl	8004f0a <_PreparePacket>
 800572c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800572e:	4bb5      	ldr	r3, [pc, #724]	@ (8005a04 <_VPrintTarget+0x2f8>)
 8005730:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005732:	2300      	movs	r3, #0
 8005734:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005738:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3301      	adds	r3, #1
 800573e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005752:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81a8 	beq.w	8005aac <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800575c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005760:	2b25      	cmp	r3, #37	@ 0x25
 8005762:	f040 8195 	bne.w	8005a90 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005766:	2300      	movs	r3, #0
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005776:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800577a:	3b23      	subs	r3, #35	@ 0x23
 800577c:	2b0d      	cmp	r3, #13
 800577e:	d83f      	bhi.n	8005800 <_VPrintTarget+0xf4>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <_VPrintTarget+0x7c>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057f1 	.word	0x080057f1
 800578c:	08005801 	.word	0x08005801
 8005790:	08005801 	.word	0x08005801
 8005794:	08005801 	.word	0x08005801
 8005798:	08005801 	.word	0x08005801
 800579c:	08005801 	.word	0x08005801
 80057a0:	08005801 	.word	0x08005801
 80057a4:	08005801 	.word	0x08005801
 80057a8:	080057e1 	.word	0x080057e1
 80057ac:	08005801 	.word	0x08005801
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	08005801 	.word	0x08005801
 80057b8:	08005801 	.word	0x08005801
 80057bc:	080057d1 	.word	0x080057d1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80057c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e01a      	b.n	8005806 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80057d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e012      	b.n	8005806 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80057e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e00a      	b.n	8005806 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80057f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f2:	f043 0308 	orr.w	r3, r3, #8
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e002      	b.n	8005806 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005800:	2300      	movs	r3, #0
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
 8005804:	bf00      	nop
        }
      } while (v);
 8005806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1b0      	bne.n	800576e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800580c:	2300      	movs	r3, #0
 800580e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800581c:	2b2f      	cmp	r3, #47	@ 0x2f
 800581e:	d912      	bls.n	8005846 <_VPrintTarget+0x13a>
 8005820:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005824:	2b39      	cmp	r3, #57	@ 0x39
 8005826:	d80e      	bhi.n	8005846 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800582e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	461a      	mov	r2, r3
 800583a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800583e:	4413      	add	r3, r2
 8005840:	3b30      	subs	r3, #48	@ 0x30
 8005842:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005844:	e7e4      	b.n	8005810 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005846:	2300      	movs	r3, #0
 8005848:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005852:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005856:	2b2e      	cmp	r3, #46	@ 0x2e
 8005858:	d11d      	bne.n	8005896 <_VPrintTarget+0x18a>
        sFormat++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005868:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800586c:	2b2f      	cmp	r3, #47	@ 0x2f
 800586e:	d912      	bls.n	8005896 <_VPrintTarget+0x18a>
 8005870:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005874:	2b39      	cmp	r3, #57	@ 0x39
 8005876:	d80e      	bhi.n	8005896 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800587e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	461a      	mov	r2, r3
 800588a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800588e:	4413      	add	r3, r2
 8005890:	3b30      	subs	r3, #48	@ 0x30
 8005892:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005894:	e7e4      	b.n	8005860 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800589e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058a2:	2b6c      	cmp	r3, #108	@ 0x6c
 80058a4:	d003      	beq.n	80058ae <_VPrintTarget+0x1a2>
 80058a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058aa:	2b68      	cmp	r3, #104	@ 0x68
 80058ac:	d107      	bne.n	80058be <_VPrintTarget+0x1b2>
          c = *sFormat;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80058bc:	e7ef      	b.n	800589e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80058be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058c2:	2b25      	cmp	r3, #37	@ 0x25
 80058c4:	f000 80d8 	beq.w	8005a78 <_VPrintTarget+0x36c>
 80058c8:	2b25      	cmp	r3, #37	@ 0x25
 80058ca:	f2c0 80dc 	blt.w	8005a86 <_VPrintTarget+0x37a>
 80058ce:	2b78      	cmp	r3, #120	@ 0x78
 80058d0:	f300 80d9 	bgt.w	8005a86 <_VPrintTarget+0x37a>
 80058d4:	2b58      	cmp	r3, #88	@ 0x58
 80058d6:	f2c0 80d6 	blt.w	8005a86 <_VPrintTarget+0x37a>
 80058da:	3b58      	subs	r3, #88	@ 0x58
 80058dc:	2b20      	cmp	r3, #32
 80058de:	f200 80d2 	bhi.w	8005a86 <_VPrintTarget+0x37a>
 80058e2:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <_VPrintTarget+0x1dc>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	080059df 	.word	0x080059df
 80058ec:	08005a87 	.word	0x08005a87
 80058f0:	08005a87 	.word	0x08005a87
 80058f4:	08005a87 	.word	0x08005a87
 80058f8:	08005a87 	.word	0x08005a87
 80058fc:	08005a87 	.word	0x08005a87
 8005900:	08005a87 	.word	0x08005a87
 8005904:	08005a87 	.word	0x08005a87
 8005908:	08005a87 	.word	0x08005a87
 800590c:	08005a87 	.word	0x08005a87
 8005910:	08005a87 	.word	0x08005a87
 8005914:	0800596d 	.word	0x0800596d
 8005918:	08005993 	.word	0x08005993
 800591c:	08005a87 	.word	0x08005a87
 8005920:	08005a87 	.word	0x08005a87
 8005924:	08005a87 	.word	0x08005a87
 8005928:	08005a87 	.word	0x08005a87
 800592c:	08005a87 	.word	0x08005a87
 8005930:	08005a87 	.word	0x08005a87
 8005934:	08005a87 	.word	0x08005a87
 8005938:	08005a87 	.word	0x08005a87
 800593c:	08005a87 	.word	0x08005a87
 8005940:	08005a87 	.word	0x08005a87
 8005944:	08005a87 	.word	0x08005a87
 8005948:	08005a53 	.word	0x08005a53
 800594c:	08005a87 	.word	0x08005a87
 8005950:	08005a87 	.word	0x08005a87
 8005954:	08005a09 	.word	0x08005a09
 8005958:	08005a87 	.word	0x08005a87
 800595c:	080059b9 	.word	0x080059b9
 8005960:	08005a87 	.word	0x08005a87
 8005964:	08005a87 	.word	0x08005a87
 8005968:	080059df 	.word	0x080059df
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800597a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005980:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fd1c 	bl	80053c8 <_StoreChar>
        break;
 8005990:	e07a      	b.n	8005a88 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6011      	str	r1, [r2, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059a0:	f107 0010 	add.w	r0, r7, #16
 80059a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ae:	220a      	movs	r2, #10
 80059b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059b2:	f7ff fe1b 	bl	80055ec <_PrintInt>
        break;
 80059b6:	e067      	b.n	8005a88 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6011      	str	r1, [r2, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059c8:	f107 0010 	add.w	r0, r7, #16
 80059cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d6:	220a      	movs	r2, #10
 80059d8:	f7ff fd72 	bl	80054c0 <_PrintUnsigned>
        break;
 80059dc:	e054      	b.n	8005a88 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1d19      	adds	r1, r3, #4
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6011      	str	r1, [r2, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80059ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059ee:	f107 0010 	add.w	r0, r7, #16
 80059f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059fc:	2210      	movs	r2, #16
 80059fe:	f7ff fd5f 	bl	80054c0 <_PrintUnsigned>
        break;
 8005a02:	e041      	b.n	8005a88 <_VPrintTarget+0x37c>
 8005a04:	20013b60 	.word	0x20013b60
      case 's':
        s = va_arg(*pParamList, const char*);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	1d19      	adds	r1, r3, #4
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <_VPrintTarget+0x314>
          s = "(null)";
 8005a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b48 <_VPrintTarget+0x43c>)
 8005a1e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005a36:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fcc1 	bl	80053c8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a4a:	d9e9      	bls.n	8005a20 <_VPrintTarget+0x314>
        break;
 8005a4c:	e01c      	b.n	8005a88 <_VPrintTarget+0x37c>
            break;
 8005a4e:	bf00      	nop
        break;
 8005a50:	e01a      	b.n	8005a88 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	1d19      	adds	r1, r3, #4
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6011      	str	r1, [r2, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005a60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a62:	f107 0010 	add.w	r0, r7, #16
 8005a66:	2300      	movs	r3, #0
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2308      	movs	r3, #8
 8005a70:	2210      	movs	r2, #16
 8005a72:	f7ff fd25 	bl	80054c0 <_PrintUnsigned>
        break;
 8005a76:	e007      	b.n	8005a88 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	2125      	movs	r1, #37	@ 0x25
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fca2 	bl	80053c8 <_StoreChar>
        break;
 8005a84:	e000      	b.n	8005a88 <_VPrintTarget+0x37c>
      default:
        break;
 8005a86:	bf00      	nop
      }
      sFormat++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e007      	b.n	8005aa0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005a90:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005a94:	f107 0310 	add.w	r3, r7, #16
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fc94 	bl	80053c8 <_StoreChar>
    }
  } while (*sFormat);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f ae4d 	bne.w	8005744 <_VPrintTarget+0x38>
 8005aaa:	e000      	b.n	8005aae <_VPrintTarget+0x3a2>
      break;
 8005aac:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d041      	beq.n	8005b38 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005ab4:	6a3a      	ldr	r2, [r7, #32]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac4:	e00b      	b.n	8005ade <_VPrintTarget+0x3d2>
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ad0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae2:	d8f0      	bhi.n	8005ac6 <_VPrintTarget+0x3ba>
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af8:	2300      	movs	r3, #0
 8005afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005afc:	e00b      	b.n	8005b16 <_VPrintTarget+0x40a>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1a:	d8f0      	bhi.n	8005afe <_VPrintTarget+0x3f2>
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	221a      	movs	r2, #26
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fad8 	bl	80050e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b3e:	bf00      	nop
 8005b40:	3758      	adds	r7, #88	@ 0x58
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08006c88 	.word	0x08006c88

08005b4c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b60:	4917      	ldr	r1, [pc, #92]	@ (8005bc0 <SEGGER_SYSVIEW_Init+0x74>)
 8005b62:	4818      	ldr	r0, [pc, #96]	@ (8005bc4 <SEGGER_SYSVIEW_Init+0x78>)
 8005b64:	f7ff f8c8 	bl	8004cf8 <SEGGER_RTT_AllocUpBuffer>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b16      	ldr	r3, [pc, #88]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b6e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005b70:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b72:	785a      	ldrb	r2, [r3, #1]
 8005b74:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b76:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b78:	4b13      	ldr	r3, [pc, #76]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b7a:	7e1b      	ldrb	r3, [r3, #24]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2308      	movs	r3, #8
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <SEGGER_SYSVIEW_Init+0x80>)
 8005b86:	490f      	ldr	r1, [pc, #60]	@ (8005bc4 <SEGGER_SYSVIEW_Init+0x78>)
 8005b88:	f7ff f93a 	bl	8004e00 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b92:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <SEGGER_SYSVIEW_Init+0x84>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b98:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005ba0:	4a09      	ldr	r2, [pc, #36]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005ba6:	4a08      	ldr	r2, [pc, #32]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005bac:	4a06      	ldr	r2, [pc, #24]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20013328 	.word	0x20013328
 8005bc4:	08006c90 	.word	0x08006c90
 8005bc8:	20013b30 	.word	0x20013b30
 8005bcc:	20013b28 	.word	0x20013b28
 8005bd0:	e0001004 	.word	0xe0001004

08005bd4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005bdc:	4a04      	ldr	r2, [pc, #16]	@ (8005bf0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6113      	str	r3, [r2, #16]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20013b30 	.word	0x20013b30

08005bf4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005c00:	f04f 0120 	mov.w	r1, #32
 8005c04:	f381 8811 	msr	BASEPRI, r1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	4808      	ldr	r0, [pc, #32]	@ (8005c2c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c0c:	f7ff f97d 	bl	8004f0a <_PreparePacket>
 8005c10:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff fa66 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20013b60 	.word	0x20013b60

08005c30 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c3e:	f04f 0120 	mov.w	r1, #32
 8005c42:	f381 8811 	msr	BASEPRI, r1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	4816      	ldr	r0, [pc, #88]	@ (8005ca4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c4a:	f7ff f95e 	bl	8004f0a <_PreparePacket>
 8005c4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	61f9      	str	r1, [r7, #28]
 8005c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff fa29 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f383 8811 	msr	BASEPRI, r3
}
 8005c9c:	bf00      	nop
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20013b60 	.word	0x20013b60

08005ca8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	@ 0x30
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	4825      	ldr	r0, [pc, #148]	@ (8005d58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005cc4:	f7ff f921 	bl	8004f0a <_PreparePacket>
 8005cc8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd6:	e00b      	b.n	8005cf0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	1c59      	adds	r1, r3, #1
 8005ce0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ce2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	09db      	lsrs	r3, r3, #7
 8005cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cf4:	d8f0      	bhi.n	8005cd8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	e00b      	b.n	8005d28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	09db      	lsrs	r3, r3, #7
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d2c:	d8f0      	bhi.n	8005d10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6979      	ldr	r1, [r7, #20]
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f7ff f9d0 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f383 8811 	msr	BASEPRI, r3
}
 8005d4e:	bf00      	nop
 8005d50:	3730      	adds	r7, #48	@ 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20013b60 	.word	0x20013b60

08005d5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	@ 0x30
 8005d60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005d62:	4b59      	ldr	r3, [pc, #356]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005d68:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6c:	f04f 0120 	mov.w	r1, #32
 8005d70:	f381 8811 	msr	BASEPRI, r1
 8005d74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005d76:	4b54      	ldr	r3, [pc, #336]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	220a      	movs	r2, #10
 8005d7c:	4953      	ldr	r1, [pc, #332]	@ (8005ecc <SEGGER_SYSVIEW_Start+0x170>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fa fa26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005d8a:	f7fe fc87 	bl	800469c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005d8e:	200a      	movs	r0, #10
 8005d90:	f7ff ff30 	bl	8005bf4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d94:	f3ef 8311 	mrs	r3, BASEPRI
 8005d98:	f04f 0120 	mov.w	r1, #32
 8005d9c:	f381 8811 	msr	BASEPRI, r1
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	484b      	ldr	r0, [pc, #300]	@ (8005ed0 <SEGGER_SYSVIEW_Start+0x174>)
 8005da4:	f7ff f8b1 	bl	8004f0a <_PreparePacket>
 8005da8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db2:	4b45      	ldr	r3, [pc, #276]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db8:	e00b      	b.n	8005dd2 <SEGGER_SYSVIEW_Start+0x76>
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <SEGGER_SYSVIEW_Start+0x5e>
 8005dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	e00b      	b.n	8005e0c <SEGGER_SYSVIEW_Start+0xb0>
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	1c59      	adds	r1, r3, #1
 8005dfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	09db      	lsrs	r3, r3, #7
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e10:	d8f0      	bhi.n	8005df4 <SEGGER_SYSVIEW_Start+0x98>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	4b28      	ldr	r3, [pc, #160]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e00b      	b.n	8005e46 <SEGGER_SYSVIEW_Start+0xea>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	1c59      	adds	r1, r3, #1
 8005e36:	61f9      	str	r1, [r7, #28]
 8005e38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	09db      	lsrs	r3, r3, #7
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e4a:	d8f0      	bhi.n	8005e2e <SEGGER_SYSVIEW_Start+0xd2>
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	61fa      	str	r2, [r7, #28]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e00b      	b.n	8005e7e <SEGGER_SYSVIEW_Start+0x122>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	6179      	str	r1, [r7, #20]
 8005e70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	09db      	lsrs	r3, r3, #7
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e82:	d8f0      	bhi.n	8005e66 <SEGGER_SYSVIEW_Start+0x10a>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	617a      	str	r2, [r7, #20]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e94:	2218      	movs	r2, #24
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff f925 	bl	80050e8 <_SendPacket>
      RECORD_END();
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ea4:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005eb2:	f000 f9eb 	bl	800628c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005eb6:	f000 f9b1 	bl	800621c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005eba:	f000 fd11 	bl	80068e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005ebe:	bf00      	nop
 8005ec0:	3730      	adds	r7, #48	@ 0x30
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20013b30 	.word	0x20013b30
 8005ecc:	08006cd0 	.word	0x08006cd0
 8005ed0:	20013b60 	.word	0x20013b60

08005ed4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005eda:	f3ef 8311 	mrs	r3, BASEPRI
 8005ede:	f04f 0120 	mov.w	r1, #32
 8005ee2:	f381 8811 	msr	BASEPRI, r1
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	480b      	ldr	r0, [pc, #44]	@ (8005f18 <SEGGER_SYSVIEW_Stop+0x44>)
 8005eea:	f7ff f80e 	bl	8004f0a <_PreparePacket>
 8005eee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ef8:	220b      	movs	r2, #11
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f7ff f8f3 	bl	80050e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005f02:	4b06      	ldr	r3, [pc, #24]	@ (8005f1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f383 8811 	msr	BASEPRI, r3
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20013b60 	.word	0x20013b60
 8005f1c:	20013b30 	.word	0x20013b30

08005f20 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	@ 0x30
 8005f24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f26:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2a:	f04f 0120 	mov.w	r1, #32
 8005f2e:	f381 8811 	msr	BASEPRI, r1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	4845      	ldr	r0, [pc, #276]	@ (800604c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005f36:	f7fe ffe8 	bl	8004f0a <_PreparePacket>
 8005f3a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f44:	4b42      	ldr	r3, [pc, #264]	@ (8006050 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f4a:	e00b      	b.n	8005f64 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	09db      	lsrs	r3, r3, #7
 8005f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f68:	d8f0      	bhi.n	8005f4c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	e00b      	b.n	8005f9e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	1c59      	adds	r1, r3, #1
 8005f8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	09db      	lsrs	r3, r3, #7
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fa2:	d8f0      	bhi.n	8005f86 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	4b25      	ldr	r3, [pc, #148]	@ (8006050 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e00b      	b.n	8005fd8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	61f9      	str	r1, [r7, #28]
 8005fca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fdc:	d8f0      	bhi.n	8005fc0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	61fa      	str	r2, [r7, #28]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e00b      	b.n	8006010 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	6179      	str	r1, [r7, #20]
 8006002:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	09db      	lsrs	r3, r3, #7
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b7f      	cmp	r3, #127	@ 0x7f
 8006014:	d8f0      	bhi.n	8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	617a      	str	r2, [r7, #20]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006026:	2218      	movs	r2, #24
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f7ff f85c 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800603e:	4b04      	ldr	r3, [pc, #16]	@ (8006050 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	4798      	blx	r3
  }
}
 8006044:	bf00      	nop
 8006046:	3730      	adds	r7, #48	@ 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20013b60 	.word	0x20013b60
 8006050:	20013b30 	.word	0x20013b30

08006054 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b092      	sub	sp, #72	@ 0x48
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800605c:	f3ef 8311 	mrs	r3, BASEPRI
 8006060:	f04f 0120 	mov.w	r1, #32
 8006064:	f381 8811 	msr	BASEPRI, r1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	486a      	ldr	r0, [pc, #424]	@ (8006214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800606c:	f7fe ff4d 	bl	8004f0a <_PreparePacket>
 8006070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b66      	ldr	r3, [pc, #408]	@ (8006218 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	643b      	str	r3, [r7, #64]	@ 0x40
 8006086:	e00b      	b.n	80060a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	6479      	str	r1, [r7, #68]	@ 0x44
 8006092:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	643b      	str	r3, [r7, #64]	@ 0x40
 80060a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a4:	d8f0      	bhi.n	8006088 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80060a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80060ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80060cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80060e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	4619      	mov	r1, r3
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7fe fecd 	bl	8004e98 <_EncodeStr>
 80060fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006100:	2209      	movs	r2, #9
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	6938      	ldr	r0, [r7, #16]
 8006106:	f7fe ffef 	bl	80050e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	637b      	str	r3, [r7, #52]	@ 0x34
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b40      	ldr	r3, [pc, #256]	@ (8006218 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	633b      	str	r3, [r7, #48]	@ 0x30
 800611e:	e00b      	b.n	8006138 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	b2da      	uxtb	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	6379      	str	r1, [r7, #52]	@ 0x34
 800612a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	2b7f      	cmp	r3, #127	@ 0x7f
 800613c:	d8f0      	bhi.n	8006120 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800613e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	637a      	str	r2, [r7, #52]	@ 0x34
 8006144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006158:	e00b      	b.n	8006172 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006164:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006174:	2b7f      	cmp	r3, #127	@ 0x7f
 8006176:	d8f0      	bhi.n	800615a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800617e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	623b      	str	r3, [r7, #32]
 8006192:	e00b      	b.n	80061ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	6279      	str	r1, [r7, #36]	@ 0x24
 800619e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	09db      	lsrs	r3, r3, #7
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b0:	d8f0      	bhi.n	8006194 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e00b      	b.n	80061e6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	1c59      	adds	r1, r3, #1
 80061d6:	61f9      	str	r1, [r7, #28]
 80061d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	09db      	lsrs	r3, r3, #7
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ea:	d8f0      	bhi.n	80061ce <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	61fa      	str	r2, [r7, #28]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80061fc:	2215      	movs	r2, #21
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	6938      	ldr	r0, [r7, #16]
 8006202:	f7fe ff71 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f383 8811 	msr	BASEPRI, r3
}
 800620c:	bf00      	nop
 800620e:	3748      	adds	r7, #72	@ 0x48
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20013b60 	.word	0x20013b60
 8006218:	20013b30 	.word	0x20013b30

0800621c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006220:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006228:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006232:	4b03      	ldr	r3, [pc, #12]	@ (8006240 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4798      	blx	r3
  }
}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20013b30 	.word	0x20013b30

08006244 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800624c:	f3ef 8311 	mrs	r3, BASEPRI
 8006250:	f04f 0120 	mov.w	r1, #32
 8006254:	f381 8811 	msr	BASEPRI, r1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	480b      	ldr	r0, [pc, #44]	@ (8006288 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800625c:	f7fe fe55 	bl	8004f0a <_PreparePacket>
 8006260:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006262:	2280      	movs	r2, #128	@ 0x80
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f7fe fe16 	bl	8004e98 <_EncodeStr>
 800626c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800626e:	220e      	movs	r2, #14
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f7fe ff38 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20013b60 	.word	0x20013b60

0800628c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01a      	beq.n	80062d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80062a4:	4b10      	ldr	r3, [pc, #64]	@ (80062e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4798      	blx	r3
 80062ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80062b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	000a      	movs	r2, r1
 80062c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062c2:	4613      	mov	r3, r2
 80062c4:	461a      	mov	r2, r3
 80062c6:	4621      	mov	r1, r4
 80062c8:	200d      	movs	r0, #13
 80062ca:	f7ff fced 	bl	8005ca8 <SEGGER_SYSVIEW_RecordU32x2>
 80062ce:	e006      	b.n	80062de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80062d0:	4b06      	ldr	r3, [pc, #24]	@ (80062ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	200c      	movs	r0, #12
 80062d8:	f7ff fcaa 	bl	8005c30 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20013b30 	.word	0x20013b30
 80062ec:	e0001004 	.word	0xe0001004

080062f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062f6:	f3ef 8311 	mrs	r3, BASEPRI
 80062fa:	f04f 0120 	mov.w	r1, #32
 80062fe:	f381 8811 	msr	BASEPRI, r1
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	4819      	ldr	r0, [pc, #100]	@ (800636c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006306:	f7fe fe00 	bl	8004f0a <_PreparePacket>
 800630a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006310:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006318:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	e00b      	b.n	800633c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1c59      	adds	r1, r3, #1
 800632c:	6179      	str	r1, [r7, #20]
 800632e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	09db      	lsrs	r3, r3, #7
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006340:	d8f0      	bhi.n	8006324 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	617a      	str	r2, [r7, #20]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006352:	2202      	movs	r2, #2
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	68b8      	ldr	r0, [r7, #8]
 8006358:	f7fe fec6 	bl	80050e8 <_SendPacket>
  RECORD_END();
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f383 8811 	msr	BASEPRI, r3
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20013b60 	.word	0x20013b60
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800637a:	f3ef 8311 	mrs	r3, BASEPRI
 800637e:	f04f 0120 	mov.w	r1, #32
 8006382:	f381 8811 	msr	BASEPRI, r1
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	4807      	ldr	r0, [pc, #28]	@ (80063a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800638a:	f7fe fdbe 	bl	8004f0a <_PreparePacket>
 800638e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006390:	2203      	movs	r2, #3
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6838      	ldr	r0, [r7, #0]
 8006396:	f7fe fea7 	bl	80050e8 <_SendPacket>
  RECORD_END();
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f383 8811 	msr	BASEPRI, r3
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20013b60 	.word	0x20013b60

080063ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063b2:	f3ef 8311 	mrs	r3, BASEPRI
 80063b6:	f04f 0120 	mov.w	r1, #32
 80063ba:	f381 8811 	msr	BASEPRI, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	4807      	ldr	r0, [pc, #28]	@ (80063e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80063c2:	f7fe fda2 	bl	8004f0a <_PreparePacket>
 80063c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80063c8:	2212      	movs	r2, #18
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6838      	ldr	r0, [r7, #0]
 80063ce:	f7fe fe8b 	bl	80050e8 <_SendPacket>
  RECORD_END();
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f383 8811 	msr	BASEPRI, r3
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20013b60 	.word	0x20013b60

080063e4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063ec:	f3ef 8311 	mrs	r3, BASEPRI
 80063f0:	f04f 0120 	mov.w	r1, #32
 80063f4:	f381 8811 	msr	BASEPRI, r1
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	4817      	ldr	r0, [pc, #92]	@ (8006458 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80063fc:	f7fe fd85 	bl	8004f0a <_PreparePacket>
 8006400:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e00b      	b.n	8006428 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	61f9      	str	r1, [r7, #28]
 800641a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	09db      	lsrs	r3, r3, #7
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b7f      	cmp	r3, #127	@ 0x7f
 800642c:	d8f0      	bhi.n	8006410 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	61fa      	str	r2, [r7, #28]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800643e:	221c      	movs	r2, #28
 8006440:	68f9      	ldr	r1, [r7, #12]
 8006442:	6938      	ldr	r0, [r7, #16]
 8006444:	f7fe fe50 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f383 8811 	msr	BASEPRI, r3
}
 800644e:	bf00      	nop
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20013b60 	.word	0x20013b60

0800645c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006466:	f3ef 8311 	mrs	r3, BASEPRI
 800646a:	f04f 0120 	mov.w	r1, #32
 800646e:	f381 8811 	msr	BASEPRI, r1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	4824      	ldr	r0, [pc, #144]	@ (8006508 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006476:	f7fe fd48 	bl	8004f0a <_PreparePacket>
 800647a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	6279      	str	r1, [r7, #36]	@ 0x24
 8006494:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e00b      	b.n	80064da <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	61f9      	str	r1, [r7, #28]
 80064cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80064de:	d8f0      	bhi.n	80064c2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	61fa      	str	r2, [r7, #28]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80064f0:	221c      	movs	r2, #28
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	6938      	ldr	r0, [r7, #16]
 80064f6:	f7fe fdf7 	bl	80050e8 <_SendPacket>
  RECORD_END();
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8811 	msr	BASEPRI, r3
}
 8006500:	bf00      	nop
 8006502:	3728      	adds	r7, #40	@ 0x28
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20013b60 	.word	0x20013b60

0800650c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006512:	f3ef 8311 	mrs	r3, BASEPRI
 8006516:	f04f 0120 	mov.w	r1, #32
 800651a:	f381 8811 	msr	BASEPRI, r1
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	4807      	ldr	r0, [pc, #28]	@ (8006540 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006522:	f7fe fcf2 	bl	8004f0a <_PreparePacket>
 8006526:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006528:	2211      	movs	r2, #17
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6838      	ldr	r0, [r7, #0]
 800652e:	f7fe fddb 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f383 8811 	msr	BASEPRI, r3
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20013b60 	.word	0x20013b60

08006544 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800654c:	f3ef 8311 	mrs	r3, BASEPRI
 8006550:	f04f 0120 	mov.w	r1, #32
 8006554:	f381 8811 	msr	BASEPRI, r1
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	4819      	ldr	r0, [pc, #100]	@ (80065c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800655c:	f7fe fcd5 	bl	8004f0a <_PreparePacket>
 8006560:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006566:	4b17      	ldr	r3, [pc, #92]	@ (80065c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	61f9      	str	r1, [r7, #28]
 8006584:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b7f      	cmp	r3, #127	@ 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80065a8:	2208      	movs	r2, #8
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	6938      	ldr	r0, [r7, #16]
 80065ae:	f7fe fd9b 	bl	80050e8 <_SendPacket>
  RECORD_END();
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f383 8811 	msr	BASEPRI, r3
}
 80065b8:	bf00      	nop
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20013b60 	.word	0x20013b60
 80065c4:	20013b30 	.word	0x20013b30

080065c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065d0:	f3ef 8311 	mrs	r3, BASEPRI
 80065d4:	f04f 0120 	mov.w	r1, #32
 80065d8:	f381 8811 	msr	BASEPRI, r1
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	4819      	ldr	r0, [pc, #100]	@ (8006644 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80065e0:	f7fe fc93 	bl	8004f0a <_PreparePacket>
 80065e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065ea:	4b17      	ldr	r3, [pc, #92]	@ (8006648 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	61f9      	str	r1, [r7, #28]
 8006608:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b7f      	cmp	r3, #127	@ 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	61fa      	str	r2, [r7, #28]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800662c:	2204      	movs	r2, #4
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6938      	ldr	r0, [r7, #16]
 8006632:	f7fe fd59 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f383 8811 	msr	BASEPRI, r3
}
 800663c:	bf00      	nop
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20013b60 	.word	0x20013b60
 8006648:	20013b30 	.word	0x20013b30

0800664c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	4819      	ldr	r0, [pc, #100]	@ (80066c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006664:	f7fe fc51 	bl	8004f0a <_PreparePacket>
 8006668:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e00b      	b.n	800669a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	61f9      	str	r1, [r7, #28]
 800668c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	09db      	lsrs	r3, r3, #7
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b7f      	cmp	r3, #127	@ 0x7f
 800669e:	d8f0      	bhi.n	8006682 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	61fa      	str	r2, [r7, #28]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80066b0:	2206      	movs	r2, #6
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6938      	ldr	r0, [r7, #16]
 80066b6:	f7fe fd17 	bl	80050e8 <_SendPacket>
  RECORD_END();
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f383 8811 	msr	BASEPRI, r3
}
 80066c0:	bf00      	nop
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20013b60 	.word	0x20013b60
 80066cc:	20013b30 	.word	0x20013b30

080066d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	@ 0x28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066da:	f3ef 8311 	mrs	r3, BASEPRI
 80066de:	f04f 0120 	mov.w	r1, #32
 80066e2:	f381 8811 	msr	BASEPRI, r1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	4827      	ldr	r0, [pc, #156]	@ (8006788 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80066ea:	f7fe fc0e 	bl	8004f0a <_PreparePacket>
 80066ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066f4:	4b25      	ldr	r3, [pc, #148]	@ (800678c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	e00b      	b.n	8006720 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	6279      	str	r1, [r7, #36]	@ 0x24
 8006712:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	09db      	lsrs	r3, r3, #7
 800671e:	623b      	str	r3, [r7, #32]
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b7f      	cmp	r3, #127	@ 0x7f
 8006724:	d8f0      	bhi.n	8006708 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	627a      	str	r2, [r7, #36]	@ 0x24
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	61f9      	str	r1, [r7, #28]
 800674a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b7f      	cmp	r3, #127	@ 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	61fa      	str	r2, [r7, #28]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800676e:	2207      	movs	r2, #7
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	6938      	ldr	r0, [r7, #16]
 8006774:	f7fe fcb8 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
 8006780:	3728      	adds	r7, #40	@ 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20013b60 	.word	0x20013b60
 800678c:	20013b30 	.word	0x20013b30

08006790 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	@ 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800679a:	4b40      	ldr	r3, [pc, #256]	@ (800689c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d077      	beq.n	8006892 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80067a2:	4b3e      	ldr	r3, [pc, #248]	@ (800689c <SEGGER_SYSVIEW_SendModule+0x10c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80067a8:	2300      	movs	r3, #0
 80067aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ac:	e008      	b.n	80067c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80067b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	3301      	adds	r3, #1
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d3f2      	bcc.n	80067ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80067c8:	e000      	b.n	80067cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80067ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d055      	beq.n	800687e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067d2:	f3ef 8311 	mrs	r3, BASEPRI
 80067d6:	f04f 0120 	mov.w	r1, #32
 80067da:	f381 8811 	msr	BASEPRI, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	482f      	ldr	r0, [pc, #188]	@ (80068a0 <SEGGER_SYSVIEW_SendModule+0x110>)
 80067e2:	f7fe fb92 	bl	8004f0a <_PreparePacket>
 80067e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	623b      	str	r3, [r7, #32]
 80067f4:	e00b      	b.n	800680e <SEGGER_SYSVIEW_SendModule+0x7e>
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	1c59      	adds	r1, r3, #1
 80067fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8006800:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	09db      	lsrs	r3, r3, #7
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	2b7f      	cmp	r3, #127	@ 0x7f
 8006812:	d8f0      	bhi.n	80067f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	627a      	str	r2, [r7, #36]	@ 0x24
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e00b      	b.n	8006848 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	61f9      	str	r1, [r7, #28]
 800683a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	09db      	lsrs	r3, r3, #7
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b7f      	cmp	r3, #127	@ 0x7f
 800684c:	d8f0      	bhi.n	8006830 <SEGGER_SYSVIEW_SendModule+0xa0>
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	61fa      	str	r2, [r7, #28]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2280      	movs	r2, #128	@ 0x80
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7fe fb16 	bl	8004e98 <_EncodeStr>
 800686c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800686e:	2216      	movs	r2, #22
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	6938      	ldr	r0, [r7, #16]
 8006874:	f7fe fc38 	bl	80050e8 <_SendPacket>
      RECORD_END();
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <SEGGER_SYSVIEW_SendModule+0x102>
 8006884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4798      	blx	r3
    }
  }
}
 8006892:	bf00      	nop
 8006894:	3730      	adds	r7, #48	@ 0x30
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20013b58 	.word	0x20013b58
 80068a0:	20013b60 	.word	0x20013b60

080068a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00f      	beq.n	80068d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80068b2:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f2      	bne.n	80068b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20013b58 	.word	0x20013b58

080068e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80068e6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ea:	f04f 0120 	mov.w	r1, #32
 80068ee:	f381 8811 	msr	BASEPRI, r1
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	4817      	ldr	r0, [pc, #92]	@ (8006954 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80068f6:	f7fe fb08 	bl	8004f0a <_PreparePacket>
 80068fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	4b14      	ldr	r3, [pc, #80]	@ (8006958 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	6179      	str	r1, [r7, #20]
 8006916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b7f      	cmp	r3, #127	@ 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	617a      	str	r2, [r7, #20]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800693a:	221b      	movs	r2, #27
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	68b8      	ldr	r0, [r7, #8]
 8006940:	f7fe fbd2 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f383 8811 	msr	BASEPRI, r3
}
 800694a:	bf00      	nop
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20013b60 	.word	0x20013b60
 8006958:	20013b5c 	.word	0x20013b5c

0800695c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800695c:	b40f      	push	{r0, r1, r2, r3}
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006964:	f107 0314 	add.w	r3, r7, #20
 8006968:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	461a      	mov	r2, r3
 800696e:	2100      	movs	r1, #0
 8006970:	6938      	ldr	r0, [r7, #16]
 8006972:	f7fe fecb 	bl	800570c <_VPrintTarget>
  va_end(ParamList);
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006980:	b004      	add	sp, #16
 8006982:	4770      	bx	lr

08006984 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	@ 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800698c:	f3ef 8311 	mrs	r3, BASEPRI
 8006990:	f04f 0120 	mov.w	r1, #32
 8006994:	f381 8811 	msr	BASEPRI, r1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	4827      	ldr	r0, [pc, #156]	@ (8006a38 <SEGGER_SYSVIEW_Warn+0xb4>)
 800699c:	f7fe fab5 	bl	8004f0a <_PreparePacket>
 80069a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069a2:	2280      	movs	r2, #128	@ 0x80
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f7fe fa76 	bl	8004e98 <_EncodeStr>
 80069ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b2:	2301      	movs	r3, #1
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	e00b      	b.n	80069d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80069c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	09db      	lsrs	r3, r3, #7
 80069ce:	623b      	str	r3, [r7, #32]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d4:	d8f0      	bhi.n	80069b8 <SEGGER_SYSVIEW_Warn+0x34>
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	627a      	str	r2, [r7, #36]	@ 0x24
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e00b      	b.n	8006a08 <SEGGER_SYSVIEW_Warn+0x84>
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	61f9      	str	r1, [r7, #28]
 80069fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	09db      	lsrs	r3, r3, #7
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a0c:	d8f0      	bhi.n	80069f0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	61fa      	str	r2, [r7, #28]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a1e:	221a      	movs	r2, #26
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	6938      	ldr	r0, [r7, #16]
 8006a24:	f7fe fb60 	bl	80050e8 <_SendPacket>
  RECORD_END();
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
 8006a30:	3728      	adds	r7, #40	@ 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20013b60 	.word	0x20013b60

08006a3c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006a40:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a42:	7e1b      	ldrb	r3, [r3, #24]
 8006a44:	4619      	mov	r1, r3
 8006a46:	4a13      	ldr	r2, [pc, #76]	@ (8006a94 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006a48:	460b      	mov	r3, r1
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	440b      	add	r3, r1
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	336c      	adds	r3, #108	@ 0x6c
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a58:	7e1b      	ldrb	r3, [r3, #24]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	490d      	ldr	r1, [pc, #52]	@ (8006a94 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006a5e:	4603      	mov	r3, r0
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4403      	add	r3, r0
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	440b      	add	r3, r1
 8006a68:	3370      	adds	r3, #112	@ 0x70
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d00b      	beq.n	8006a88 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006a70:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a72:	789b      	ldrb	r3, [r3, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006a7e:	f7fe fa51 	bl	8004f24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006a82:	4b03      	ldr	r3, [pc, #12]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006a88:	4b01      	ldr	r3, [pc, #4]	@ (8006a90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20013b30 	.word	0x20013b30
 8006a94:	20012e70 	.word	0x20012e70

08006a98 <memcmp>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	3901      	subs	r1, #1
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4290      	cmp	r0, r2
 8006aa0:	d101      	bne.n	8006aa6 <memcmp+0xe>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e005      	b.n	8006ab2 <memcmp+0x1a>
 8006aa6:	7803      	ldrb	r3, [r0, #0]
 8006aa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	d001      	beq.n	8006ab4 <memcmp+0x1c>
 8006ab0:	1b18      	subs	r0, r3, r4
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	e7f2      	b.n	8006a9e <memcmp+0x6>

08006ab8 <memset>:
 8006ab8:	4402      	add	r2, r0
 8006aba:	4603      	mov	r3, r0
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d100      	bne.n	8006ac2 <memset+0xa>
 8006ac0:	4770      	bx	lr
 8006ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac6:	e7f9      	b.n	8006abc <memset+0x4>

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4d0d      	ldr	r5, [pc, #52]	@ (8006b00 <__libc_init_array+0x38>)
 8006acc:	4c0d      	ldr	r4, [pc, #52]	@ (8006b04 <__libc_init_array+0x3c>)
 8006ace:	1b64      	subs	r4, r4, r5
 8006ad0:	10a4      	asrs	r4, r4, #2
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8006b08 <__libc_init_array+0x40>)
 8006ada:	4c0c      	ldr	r4, [pc, #48]	@ (8006b0c <__libc_init_array+0x44>)
 8006adc:	f000 f826 	bl	8006b2c <_init>
 8006ae0:	1b64      	subs	r4, r4, r5
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af0:	4798      	blx	r3
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afa:	4798      	blx	r3
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	08006cf4 	.word	0x08006cf4
 8006b04:	08006cf4 	.word	0x08006cf4
 8006b08:	08006cf4 	.word	0x08006cf4
 8006b0c:	08006cf8 	.word	0x08006cf8

08006b10 <memcpy>:
 8006b10:	440a      	add	r2, r1
 8006b12:	4291      	cmp	r1, r2
 8006b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b18:	d100      	bne.n	8006b1c <memcpy+0xc>
 8006b1a:	4770      	bx	lr
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b26:	4291      	cmp	r1, r2
 8006b28:	d1f9      	bne.n	8006b1e <memcpy+0xe>
 8006b2a:	bd10      	pop	{r4, pc}

08006b2c <_init>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr

08006b38 <_fini>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr
